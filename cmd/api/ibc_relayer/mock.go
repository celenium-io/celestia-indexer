// SPDX-FileCopyrightText: 2025 Bb Strategy Pte. Ltd. <celenium@baking-bad.org>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock.go -package=ibc_relayer -typed
//

// Package ibc_relayer is a generated GoMock package.
package ibc_relayer

import (
	reflect "reflect"

	responses "github.com/celenium-io/celestia-indexer/cmd/api/handler/responses"
	gomock "go.uber.org/mock/gomock"
)

// MockIRelayerStore is a mock of IRelayerStore interface.
type MockIRelayerStore struct {
	ctrl     *gomock.Controller
	recorder *MockIRelayerStoreMockRecorder
	isgomock struct{}
}

// MockIRelayerStoreMockRecorder is the mock recorder for MockIRelayerStore.
type MockIRelayerStoreMockRecorder struct {
	mock *MockIRelayerStore
}

// NewMockIRelayerStore creates a new mock instance.
func NewMockIRelayerStore(ctrl *gomock.Controller) *MockIRelayerStore {
	mock := &MockIRelayerStore{ctrl: ctrl}
	mock.recorder = &MockIRelayerStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRelayerStore) EXPECT() *MockIRelayerStoreMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockIRelayerStore) All() []responses.Relayer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]responses.Relayer)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockIRelayerStoreMockRecorder) All() *MockIRelayerStoreAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockIRelayerStore)(nil).All))
	return &MockIRelayerStoreAllCall{Call: call}
}

// MockIRelayerStoreAllCall wrap *gomock.Call
type MockIRelayerStoreAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIRelayerStoreAllCall) Return(relayers []responses.Relayer) *MockIRelayerStoreAllCall {
	c.Call = c.Call.Return(relayers)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIRelayerStoreAllCall) Do(f func() []responses.Relayer) *MockIRelayerStoreAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIRelayerStoreAllCall) DoAndReturn(f func() []responses.Relayer) *MockIRelayerStoreAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIRelayerStore) List() map[uint64]responses.Relayer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(map[uint64]responses.Relayer)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockIRelayerStoreMockRecorder) List() *MockIRelayerStoreListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIRelayerStore)(nil).List))
	return &MockIRelayerStoreListCall{Call: call}
}

// MockIRelayerStoreListCall wrap *gomock.Call
type MockIRelayerStoreListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIRelayerStoreListCall) Return(metadata map[uint64]responses.Relayer) *MockIRelayerStoreListCall {
	c.Call = c.Call.Return(metadata)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIRelayerStoreListCall) Do(f func() map[uint64]responses.Relayer) *MockIRelayerStoreListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIRelayerStoreListCall) DoAndReturn(f func() map[uint64]responses.Relayer) *MockIRelayerStoreListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
