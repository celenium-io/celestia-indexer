{
    "schemes": [
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Celenium API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!",
        "title": "Celenium API",
        "contact": {
            "name": "Support",
            "url": "https://discord.gg/3k83Przqk8",
            "email": "celenium@pklabs.me"
        },
        "version": "1.0"
    },
    "host": "api-mainnet.celenium.io",
    "basePath": "/v1",
    "paths": {
        "/address": {
            "get": {
                "description": "List address info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "List address info",
                "operationId": "list-address",
                "parameters": [
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "id",
                            "delegated",
                            "spendable",
                            "unbonding",
                            "first_height",
                            "last_height"
                        ],
                        "type": "string",
                        "description": "Sort field",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Address"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/address/count": {
            "get": {
                "description": "Get count of addresses in network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Get count of addresses in network",
                "operationId": "get-address-count",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/address/{hash}": {
            "get": {
                "description": "Get address info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Get address info",
                "operationId": "get-address",
                "parameters": [
                    {
                        "maxLength": 47,
                        "minLength": 47,
                        "type": "string",
                        "description": "Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Address"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/address/{hash}/blobs": {
            "get": {
                "description": "Get blobs pushed by address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Get blobs pushed by address",
                "operationId": "address-blobs",
                "parameters": [
                    {
                        "maxLength": 47,
                        "minLength": 47,
                        "type": "string",
                        "description": "Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order. Default: desc",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "time",
                            "size"
                        ],
                        "type": "string",
                        "description": "Sort field. If it's empty internal id is used",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Flag indicating whether entities of transaction and namespace should be attached or not. Default: true",
                        "name": "joins",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.BlobLog"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/address/{hash}/delegations": {
            "get": {
                "description": "Get delegations made by address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Get delegations made by address",
                "operationId": "address-delegations",
                "parameters": [
                    {
                        "maxLength": 47,
                        "minLength": 47,
                        "type": "string",
                        "description": "Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Show zero delegations",
                        "name": "show_zero",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Delegation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/address/{hash}/granters": {
            "get": {
                "description": "Get grants where address is grantee",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Get grants where address is grantee",
                "operationId": "address-grantee",
                "parameters": [
                    {
                        "maxLength": 47,
                        "minLength": 47,
                        "type": "string",
                        "description": "Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Grant"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/address/{hash}/grants": {
            "get": {
                "description": "Get grants made by address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Get grants made by address",
                "operationId": "address-grants",
                "parameters": [
                    {
                        "maxLength": 47,
                        "minLength": 47,
                        "type": "string",
                        "description": "Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Grant"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/address/{hash}/messages": {
            "get": {
                "description": "Get address messages",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Get address messages",
                "operationId": "address-messages",
                "parameters": [
                    {
                        "maxLength": 47,
                        "minLength": 47,
                        "type": "string",
                        "description": "Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "MsgUnknown",
                            "MsgSetWithdrawAddress",
                            "MsgWithdrawDelegatorReward",
                            "MsgWithdrawValidatorCommission",
                            "MsgFundCommunityPool",
                            "MsgCreateValidator",
                            "MsgEditValidator",
                            "MsgDelegate",
                            "MsgBeginRedelegate",
                            "MsgUndelegate",
                            "MsgCancelUnbondingDelegation",
                            "MsgUnjail",
                            "MsgSend",
                            "MsgMultiSend",
                            "MsgCreateVestingAccount",
                            "MsgCreatePermanentLockedAccount",
                            "MsgCreatePeriodicVestingAccount",
                            "MsgPayForBlobs",
                            "MsgGrant",
                            "MsgExec",
                            "MsgRevoke",
                            "MsgGrantAllowance",
                            "MsgRevokeAllowance",
                            "MsgRegisterEVMAddress",
                            "MsgSubmitProposal",
                            "MsgExecLegacyContent",
                            "MsgVote",
                            "MsgVoteWeighted",
                            "MsgDeposit",
                            "IBCTransfer",
                            "MsgVerifyInvariant",
                            "MsgSubmitEvidence",
                            "MsgSendNFT",
                            "MsgCreateGroup",
                            "MsgUpdateGroupMembers",
                            "MsgUpdateGroupAdmin",
                            "MsgUpdateGroupMetadata",
                            "MsgCreateGroupPolicy",
                            "MsgUpdateGroupPolicyAdmin",
                            "MsgCreateGroupWithPolicy",
                            "MsgUpdateGroupPolicyDecisionPolicy",
                            "MsgUpdateGroupPolicyMetadata",
                            "MsgSubmitProposalGroup",
                            "MsgWithdrawProposal",
                            "MsgVoteGroup",
                            "MsgExecGroup",
                            "MsgLeaveGroup",
                            "MsgSoftwareUpgrade",
                            "MsgCancelUpgrade",
                            "MsgRegisterInterchainAccount",
                            "MsgSendTx",
                            "MsgRegisterPayee",
                            "MsgRegisterCounterpartyPayee",
                            "MsgPayPacketFee",
                            "MsgPayPacketFeeAsync",
                            "MsgTransfer",
                            "MsgCreateClient",
                            "MsgUpdateClient",
                            "MsgUpgradeClient",
                            "MsgSubmitMisbehaviour",
                            "MsgConnectionOpenInit",
                            "MsgConnectionOpenTry",
                            "MsgConnectionOpenAck",
                            "MsgConnectionOpenConfirm",
                            "MsgChannelOpenInit",
                            "MsgChannelOpenTry",
                            "MsgChannelOpenAck",
                            "MsgChannelOpenConfirm",
                            "MsgChannelCloseInit",
                            "MsgChannelCloseConfirm",
                            "MsgRecvPacket",
                            "MsgTimeout",
                            "MsgTimeoutOnClose",
                            "MsgAcknowledgement"
                        ],
                        "type": "string",
                        "description": "Comma-separated message types list",
                        "name": "msg_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.MessageForAddress"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/address/{hash}/redelegations": {
            "get": {
                "description": "Get redelegations made by address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Get redelegations made by address",
                "operationId": "address-redelegations",
                "parameters": [
                    {
                        "maxLength": 47,
                        "minLength": 47,
                        "type": "string",
                        "description": "Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Redelegation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/address/{hash}/stats/{name}/{timeframe}": {
            "get": {
                "description": "Get address stats",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Get address stats",
                "operationId": "address-stats",
                "parameters": [
                    {
                        "maxLength": 47,
                        "minLength": 47,
                        "type": "string",
                        "description": "Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "gas_used",
                            "gas_wanted",
                            "fee",
                            "tx_count"
                        ],
                        "type": "string",
                        "description": "Series name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "hour",
                            "day",
                            "month"
                        ],
                        "type": "string",
                        "description": "Timeframe",
                        "name": "timeframe",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Time from in unix timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time to in unix timestamp",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.HistogramItem"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/address/{hash}/txs": {
            "get": {
                "description": "Get address transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Get address transactions",
                "operationId": "address-transactions",
                "parameters": [
                    {
                        "maxLength": 47,
                        "minLength": 47,
                        "type": "string",
                        "description": "Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "success",
                            "failed"
                        ],
                        "type": "string",
                        "description": "Comma-separated status list",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "MsgUnknown",
                            "MsgSetWithdrawAddress",
                            "MsgWithdrawDelegatorReward",
                            "MsgWithdrawValidatorCommission",
                            "MsgFundCommunityPool",
                            "MsgCreateValidator",
                            "MsgEditValidator",
                            "MsgDelegate",
                            "MsgBeginRedelegate",
                            "MsgUndelegate",
                            "MsgCancelUnbondingDelegation",
                            "MsgUnjail",
                            "MsgSend",
                            "MsgMultiSend",
                            "MsgCreateVestingAccount",
                            "MsgCreatePermanentLockedAccount",
                            "MsgCreatePeriodicVestingAccount",
                            "MsgPayForBlobs",
                            "MsgGrant",
                            "MsgExec",
                            "MsgRevoke",
                            "MsgGrantAllowance",
                            "MsgRevokeAllowance",
                            "MsgRegisterEVMAddress",
                            "MsgSubmitProposal",
                            "MsgExecLegacyContent",
                            "MsgVote",
                            "MsgVoteWeighted",
                            "MsgDeposit",
                            "IBCTransfer",
                            "MsgVerifyInvariant",
                            "MsgSubmitEvidence",
                            "MsgSendNFT",
                            "MsgCreateGroup",
                            "MsgUpdateGroupMembers",
                            "MsgUpdateGroupAdmin",
                            "MsgUpdateGroupMetadata",
                            "MsgCreateGroupPolicy",
                            "MsgUpdateGroupPolicyAdmin",
                            "MsgCreateGroupWithPolicy",
                            "MsgUpdateGroupPolicyDecisionPolicy",
                            "MsgUpdateGroupPolicyMetadata",
                            "MsgSubmitProposalGroup",
                            "MsgWithdrawProposal",
                            "MsgVoteGroup",
                            "MsgExecGroup",
                            "MsgLeaveGroup",
                            "MsgSoftwareUpgrade",
                            "MsgCancelUpgrade",
                            "MsgRegisterInterchainAccount",
                            "MsgSendTx",
                            "MsgRegisterPayee",
                            "MsgRegisterCounterpartyPayee",
                            "MsgPayPacketFee",
                            "MsgPayPacketFeeAsync",
                            "MsgTransfer",
                            "MsgCreateClient",
                            "MsgUpdateClient",
                            "MsgUpgradeClient",
                            "MsgSubmitMisbehaviour",
                            "MsgConnectionOpenInit",
                            "MsgConnectionOpenTry",
                            "MsgConnectionOpenAck",
                            "MsgConnectionOpenConfirm",
                            "MsgChannelOpenInit",
                            "MsgChannelOpenTry",
                            "MsgChannelOpenAck",
                            "MsgChannelOpenConfirm",
                            "MsgChannelCloseInit",
                            "MsgChannelCloseConfirm",
                            "MsgRecvPacket",
                            "MsgTimeout",
                            "MsgTimeoutOnClose",
                            "MsgAcknowledgement"
                        ],
                        "type": "string",
                        "description": "Comma-separated message types list",
                        "name": "msg_type",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Time from in unix timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Time to in unix timestamp",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Block number",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Tx"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/address/{hash}/undelegations": {
            "get": {
                "description": "Get undelegations made by address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Get undelegations made by address",
                "operationId": "address-undelegations",
                "parameters": [
                    {
                        "maxLength": 47,
                        "minLength": 47,
                        "type": "string",
                        "description": "Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Undelegation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/address/{hash}/vestings": {
            "get": {
                "description": "Get vesting for address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Get vesting for address",
                "operationId": "address-vesting",
                "parameters": [
                    {
                        "maxLength": 47,
                        "minLength": 47,
                        "type": "string",
                        "description": "Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Show finished vestings delegations",
                        "name": "show_ended",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Vesting"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/blob": {
            "get": {
                "description": "Returns blobs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "List all blobs with filters",
                "operationId": "get-blobs",
                "parameters": [
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order. Default: desc",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "time",
                            "size"
                        ],
                        "type": "string",
                        "description": "Sort field. If it's empty internal id is used",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Commitment value in URLbase64 format",
                        "name": "commitment",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time from in unix timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time to in unix timestamp",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated celestia addresses",
                        "name": "signers",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated celestia namespaces",
                        "name": "namespaces",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Last entity id which is used for cursor pagination",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.LightBlobLog"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Returns blob\nTo authorize your requests you have to select the required tariff on our site. Then you receive api key to authorize. Api key should be passed via request header `apikey`.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "Get namespace blob by commitment on height",
                "operationId": "get-blob",
                "parameters": [
                    {
                        "description": "Base64-encoded namespace id and version",
                        "name": "hash",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "minimum": 1,
                        "description": "Block heigth",
                        "name": "height",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Blob commitment",
                        "name": "commitment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Blob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/blob/metadata": {
            "post": {
                "description": "Returns blob metadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "Get blob metadata by commitment on height",
                "operationId": "get-blob-metadata",
                "parameters": [
                    {
                        "description": "Base64-encoded namespace id and version",
                        "name": "hash",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "minimum": 1,
                        "description": "Block heigth",
                        "name": "height",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Blob commitment",
                        "name": "commitment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.BlobLog"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/block": {
            "get": {
                "description": "List blocks info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "List blocks info",
                "operationId": "list-block",
                "parameters": [
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Need join stats for block",
                        "name": "stats",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Block"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/block/count": {
            "get": {
                "description": "Get count of blocks in network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "Get count of blocks in network",
                "operationId": "get-block-count",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/block/{height}": {
            "get": {
                "description": "Get block info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "Get block info",
                "operationId": "get-block",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Block height",
                        "name": "height",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Need join stats for block",
                        "name": "stats",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Block"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/block/{height}/blobs": {
            "get": {
                "description": "List blobs which was pushed in the block",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "List blobs which was pushed in the block",
                "operationId": "get-block-blobs",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Block height",
                        "name": "height",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order. Default: desc",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "time",
                            "size"
                        ],
                        "type": "string",
                        "description": "Sort field. If it's empty internal id is used",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.BlobLog"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/block/{height}/blobs/count": {
            "get": {
                "description": "Count of blobs which was pushed by transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "Count of blobs which was pushed by transaction",
                "operationId": "block-blobs-count",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Block height",
                        "name": "height",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/block/{height}/events": {
            "get": {
                "description": "Get events from begin and end of block",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "Get events from begin and end of block",
                "operationId": "get-block-events",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Block height",
                        "name": "height",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Event"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/block/{height}/messages": {
            "get": {
                "description": "Get messages contained in the block",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "Get messages contained in the block",
                "operationId": "get-block-messages",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Block height",
                        "name": "height",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "MsgUnknown",
                            "MsgSetWithdrawAddress",
                            "MsgWithdrawDelegatorReward",
                            "MsgWithdrawValidatorCommission",
                            "MsgFundCommunityPool",
                            "MsgCreateValidator",
                            "MsgEditValidator",
                            "MsgDelegate",
                            "MsgBeginRedelegate",
                            "MsgUndelegate",
                            "MsgCancelUnbondingDelegation",
                            "MsgUnjail",
                            "MsgSend",
                            "MsgMultiSend",
                            "MsgCreateVestingAccount",
                            "MsgCreatePermanentLockedAccount",
                            "MsgCreatePeriodicVestingAccount",
                            "MsgPayForBlobs",
                            "MsgGrant",
                            "MsgExec",
                            "MsgRevoke",
                            "MsgGrantAllowance",
                            "MsgRevokeAllowance",
                            "MsgRegisterEVMAddress",
                            "MsgSubmitProposal",
                            "MsgExecLegacyContent",
                            "MsgVote",
                            "MsgVoteWeighted",
                            "MsgDeposit",
                            "IBCTransfer",
                            "MsgVerifyInvariant",
                            "MsgSubmitEvidence",
                            "MsgSendNFT",
                            "MsgCreateGroup",
                            "MsgUpdateGroupMembers",
                            "MsgUpdateGroupAdmin",
                            "MsgUpdateGroupMetadata",
                            "MsgCreateGroupPolicy",
                            "MsgUpdateGroupPolicyAdmin",
                            "MsgCreateGroupWithPolicy",
                            "MsgUpdateGroupPolicyDecisionPolicy",
                            "MsgUpdateGroupPolicyMetadata",
                            "MsgSubmitProposalGroup",
                            "MsgWithdrawProposal",
                            "MsgVoteGroup",
                            "MsgExecGroup",
                            "MsgLeaveGroup",
                            "MsgSoftwareUpgrade",
                            "MsgCancelUpgrade",
                            "MsgRegisterInterchainAccount",
                            "MsgSendTx",
                            "MsgRegisterPayee",
                            "MsgRegisterCounterpartyPayee",
                            "MsgPayPacketFee",
                            "MsgPayPacketFeeAsync",
                            "MsgTransfer",
                            "MsgCreateClient",
                            "MsgUpdateClient",
                            "MsgUpgradeClient",
                            "MsgSubmitMisbehaviour",
                            "MsgConnectionOpenInit",
                            "MsgConnectionOpenTry",
                            "MsgConnectionOpenAck",
                            "MsgConnectionOpenConfirm",
                            "MsgChannelOpenInit",
                            "MsgChannelOpenTry",
                            "MsgChannelOpenAck",
                            "MsgChannelOpenConfirm",
                            "MsgChannelCloseInit",
                            "MsgChannelCloseConfirm",
                            "MsgRecvPacket",
                            "MsgTimeout",
                            "MsgTimeoutOnClose",
                            "MsgAcknowledgement"
                        ],
                        "type": "string",
                        "description": "Comma-separated message types list",
                        "name": "msg_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "MsgUnknown",
                            "MsgSetWithdrawAddress",
                            "MsgWithdrawDelegatorReward",
                            "MsgWithdrawValidatorCommission",
                            "MsgFundCommunityPool",
                            "MsgCreateValidator",
                            "MsgEditValidator",
                            "MsgDelegate",
                            "MsgBeginRedelegate",
                            "MsgUndelegate",
                            "MsgCancelUnbondingDelegation",
                            "MsgUnjail",
                            "MsgSend",
                            "MsgMultiSend",
                            "MsgCreateVestingAccount",
                            "MsgCreatePermanentLockedAccount",
                            "MsgCreatePeriodicVestingAccount",
                            "MsgPayForBlobs",
                            "MsgGrant",
                            "MsgExec",
                            "MsgRevoke",
                            "MsgGrantAllowance",
                            "MsgRevokeAllowance",
                            "MsgRegisterEVMAddress",
                            "MsgSubmitProposal",
                            "MsgExecLegacyContent",
                            "MsgVote",
                            "MsgVoteWeighted",
                            "MsgDeposit",
                            "IBCTransfer",
                            "MsgVerifyInvariant",
                            "MsgSubmitEvidence",
                            "MsgSendNFT",
                            "MsgCreateGroup",
                            "MsgUpdateGroupMembers",
                            "MsgUpdateGroupAdmin",
                            "MsgUpdateGroupMetadata",
                            "MsgCreateGroupPolicy",
                            "MsgUpdateGroupPolicyAdmin",
                            "MsgCreateGroupWithPolicy",
                            "MsgUpdateGroupPolicyDecisionPolicy",
                            "MsgUpdateGroupPolicyMetadata",
                            "MsgSubmitProposalGroup",
                            "MsgWithdrawProposal",
                            "MsgVoteGroup",
                            "MsgExecGroup",
                            "MsgLeaveGroup",
                            "MsgSoftwareUpgrade",
                            "MsgCancelUpgrade",
                            "MsgRegisterInterchainAccount",
                            "MsgSendTx",
                            "MsgRegisterPayee",
                            "MsgRegisterCounterpartyPayee",
                            "MsgPayPacketFee",
                            "MsgPayPacketFeeAsync",
                            "MsgTransfer",
                            "MsgCreateClient",
                            "MsgUpdateClient",
                            "MsgUpgradeClient",
                            "MsgSubmitMisbehaviour",
                            "MsgConnectionOpenInit",
                            "MsgConnectionOpenTry",
                            "MsgConnectionOpenAck",
                            "MsgConnectionOpenConfirm",
                            "MsgChannelOpenInit",
                            "MsgChannelOpenTry",
                            "MsgChannelOpenAck",
                            "MsgChannelOpenConfirm",
                            "MsgChannelCloseInit",
                            "MsgChannelCloseConfirm",
                            "MsgRecvPacket",
                            "MsgTimeout",
                            "MsgTimeoutOnClose",
                            "MsgAcknowledgement"
                        ],
                        "type": "string",
                        "description": "Comma-separated message types which should be excluded from list",
                        "name": "excluded_msg_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Message"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/block/{height}/ods": {
            "get": {
                "description": "ODS for block",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "ODS for block",
                "operationId": "block-ods",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Block height",
                        "name": "height",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.ODS"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                },
                "x-internal": true
            }
        },
        "/block/{height}/stats": {
            "get": {
                "description": "Get block stats by height",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "Get block stats by height",
                "operationId": "get-block-stats",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Block height",
                        "name": "height",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.BlockStats"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/constants": {
            "get": {
                "description": "Get network constants",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "general"
                ],
                "summary": "Get network constants",
                "operationId": "get-constants",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Constants"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/enums": {
            "get": {
                "description": "Get celenium enumerators",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "general"
                ],
                "summary": "Get celenium enumerators",
                "operationId": "get-enums",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Enums"
                        }
                    }
                }
            }
        },
        "/gas/estimate_for_pfb": {
            "get": {
                "description": "Get estimated gas for pay for blob message with certain values of blob sizes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gas"
                ],
                "summary": "Get estimated gas for pay for blob",
                "operationId": "gas-estimate-for-pfb",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated array of blob sizes",
                        "name": "sizes",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/gas/price": {
            "get": {
                "description": "Get estimated gas price based on historical data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gas"
                ],
                "summary": "Get estimated gas price",
                "operationId": "gas-price",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.GasPrice"
                        }
                    }
                }
            }
        },
        "/head": {
            "get": {
                "description": "Get current indexer head",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "general"
                ],
                "summary": "Get current indexer head",
                "operationId": "head",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.State"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/namespace": {
            "get": {
                "description": "List namespace info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "List namespace info",
                "operationId": "list-namespace",
                "parameters": [
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order. Default: desc",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "time",
                            "pfb_count",
                            "size"
                        ],
                        "type": "string",
                        "description": "Sort field. If it's empty internal id is used",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Namespace"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/namespace/active": {
            "get": {
                "description": "Get last used namespace",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "Get last used namespace",
                "operationId": "get-namespace-active",
                "parameters": [
                    {
                        "enum": [
                            "time",
                            "pfb_count",
                            "size"
                        ],
                        "type": "string",
                        "description": "Sort field. Default: time",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Namespace"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/namespace/count": {
            "get": {
                "description": "Get count of namespaces in network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "Get count of namespaces in network",
                "operationId": "get-namespace-count",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/namespace/{id}": {
            "get": {
                "description": "Returns array of namespace versions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "Get namespace info",
                "operationId": "get-namespace",
                "parameters": [
                    {
                        "maxLength": 56,
                        "minLength": 56,
                        "type": "string",
                        "description": "Namespace id in hexadecimal",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Namespace"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/namespace/{id}/{version}": {
            "get": {
                "description": "Returns namespace by version byte and namespace id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "Get namespace info by id and version",
                "operationId": "get-namespace-by-version-and-id",
                "parameters": [
                    {
                        "maxLength": 56,
                        "minLength": 56,
                        "type": "string",
                        "description": "Namespace id in hexadecimal",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Version of namespace",
                        "name": "version",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Namespace"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/namespace/{id}/{version}/blobs": {
            "get": {
                "description": "Returns blob changes for namespace",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "Get blob changes for namespace",
                "operationId": "get-blob-logs",
                "parameters": [
                    {
                        "maxLength": 56,
                        "minLength": 56,
                        "type": "string",
                        "description": "Namespace id in hexadecimal",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Version of namespace",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order. Default: desc",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "time",
                            "size"
                        ],
                        "type": "string",
                        "description": "Sort field. If it's empty internal id is used",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Commitment value in URLbase64 format",
                        "name": "commitment",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time from in unix timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time to in unix timestamp",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Flag indicating whether entities of rollup, transaction and signer should be attached or not. Default: true",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated celestia addresses",
                        "name": "signers",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Last entity id which is used for cursor pagination",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.BlobLog"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/namespace/{id}/{version}/messages": {
            "get": {
                "description": "Returns namespace messages by version byte and namespace id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "Get namespace messages by id and version",
                "operationId": "get-namespace-messages",
                "parameters": [
                    {
                        "maxLength": 56,
                        "minLength": 56,
                        "type": "string",
                        "description": "Namespace id in hexadecimal",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Version of namespace",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.NamespaceMessage"
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/namespace/{id}/{version}/rollups": {
            "get": {
                "description": "List rollups using the namespace",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "List rollups using the namespace",
                "operationId": "get-namespace-rollups",
                "parameters": [
                    {
                        "maxLength": 56,
                        "minLength": 56,
                        "type": "string",
                        "description": "Namespace id in hexadecimal",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Version of namespace",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Rollup"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/namespace_by_hash/{hash}": {
            "get": {
                "description": "Returns namespace by base64 encoded identity",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "Get namespace info by base64",
                "operationId": "get-namespace-base64",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Base64-encoded namespace id and version",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Namespace"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/namespace_by_hash/{hash}/{height}": {
            "get": {
                "description": "Returns blobs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "Get namespace blobs on height",
                "operationId": "get-namespace-blobs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Base64-encoded namespace id and version",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Block heigth",
                        "name": "height",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Blob"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/rollup": {
            "get": {
                "description": "List rollups info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rollup"
                ],
                "summary": "List rollups info",
                "operationId": "list-rollup",
                "parameters": [
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order. Default: desc",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "time",
                            "blobs_count",
                            "size",
                            "fee"
                        ],
                        "type": "string",
                        "description": "Sort field. Default: size",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.RollupWithStats"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/rollup/count": {
            "get": {
                "description": "Get count of rollups in network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rollup"
                ],
                "summary": "Get count of rollups in network",
                "operationId": "get-rollups-count",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/rollup/day": {
            "get": {
                "description": "List rollups info with stats by previous 24 hours",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rollup"
                ],
                "summary": "List rollups info with stats by previous 24 hours",
                "operationId": "list-rollup-24h",
                "parameters": [
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order. Default: desc",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "avg_size",
                            "blobs_count",
                            "total_size",
                            "total_fee",
                            "throughput",
                            "namespace_count",
                            "pfb_count",
                            "mb_price"
                        ],
                        "type": "string",
                        "description": "Sort field. Default: mb_price",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.RollupWithDayStats"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/rollup/slug/{slug}": {
            "get": {
                "description": "Get rollup by slug",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rollup"
                ],
                "summary": "Get rollup by slug",
                "operationId": "get-rollup-by-slug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Rollup"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/rollup/stats/series": {
            "get": {
                "description": "Get series for all rollups",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rollup"
                ],
                "summary": "Get series for all rollups",
                "operationId": "get-rollup-all-series",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.RollupAllSeriesItem"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/rollup/{id}": {
            "get": {
                "description": "Get rollup info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rollup"
                ],
                "summary": "Get rollup info",
                "operationId": "get-rollup",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Internal identity",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Rollup"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/rollup/{id}/blobs": {
            "get": {
                "description": "Get rollup blobs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rollup"
                ],
                "summary": "Get rollup blobs",
                "operationId": "get-rollup-blobs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Internal identity",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order. Default: desc",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "time",
                            "size"
                        ],
                        "type": "string",
                        "description": "Sort field. If it's empty internal id is used",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Flag indicating whether entities of transaction and signer should be attached or not. Default: true",
                        "name": "joins",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.BlobLog"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/rollup/{id}/distribution/{name}/{timeframe}": {
            "get": {
                "description": "Get rollup distribution",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rollup"
                ],
                "summary": "Get rollup distribution",
                "operationId": "get-rollup-distribution",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Internal identity",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "blobs_count",
                            "size",
                            "size_per_blob",
                            "fee_per_blob"
                        ],
                        "type": "string",
                        "description": "Series name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "hour",
                            "day"
                        ],
                        "type": "string",
                        "description": "Timeframe",
                        "name": "timeframe",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.DistributionItem"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/rollup/{id}/export": {
            "get": {
                "description": "Export rollup blobs",
                "tags": [
                    "rollup"
                ],
                "summary": "Export rollup blobs",
                "operationId": "rollup-export",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Internal identity",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Time from in unix timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time to in unix timestamp",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/rollup/{id}/namespaces": {
            "get": {
                "description": "Get rollup namespaces info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rollup"
                ],
                "summary": "Get rollup namespaces info",
                "operationId": "get-rollup-namespaces",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Internal identity",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Namespace"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/rollup/{id}/stats/{name}/{timeframe}": {
            "get": {
                "description": "Get rollup stats",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rollup"
                ],
                "summary": "Get rollup stats",
                "operationId": "get-rollup-stats",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Internal identity",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "blobs_count",
                            "size",
                            "size_per_blob",
                            "fee"
                        ],
                        "type": "string",
                        "description": "Series name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "hour",
                            "day",
                            "month"
                        ],
                        "type": "string",
                        "description": "Timeframe",
                        "name": "timeframe",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Time from in unix timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time to in unix timestamp",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.HistogramItem"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/search": {
            "get": {
                "description": "Endpoint finds entity by hash (block, address, validator, namespace and tx). It returns array of `responses.SearchItem` entities.\n\n### Block\n\nBlock will be found by its hash. Hash example: `652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF`.\nHash should be hexadecimal and has a length of 64.\n\n#### Example response \n\n```json\n{\n    \"type\": \"block\",\n    \"result\": {\n        \"id\": 1,\n        \"hash\": \"652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF\",\n        // ... rest fields from response.Block type\n    }\n}\n```\n\n### Tx\n\nTx will be found by its hash. Hash example: `652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF`.\nTx should be hexadecimal and has a length of 64.\n\n#### Example response \n\n```json\n{\n    \"type\": \"tx\",\n    \"result\": {\n        \"id\": 1,\n        \"hash\": \"652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF\",\n        // ... rest fields from response.Tx type\n    }\n}\n```\n\n### Address\n\nThe Address will be found by its hash.\nHash example: `celestia1jc92qdnty48pafummfr8ava2tjtuhfdw774w60`.\nAddress has prefix `celestia` and has length 47.\nAlso, it should be decoded by `bech32`.\n\n#### Example response \n\n```json\n{\n    \"type\": \"address\",\n    \"result\": {\n        \"id\": 1,\n        \"hash\": \"celestia1jc92qdnty48pafummfr8ava2tjtuhfdw774w60\",\n        \"height\": 100,\n        \"balance\": \"6525472354\"\n    }\n}\n```\n\n### Namespace\n\nNamespace can be found by base64 hash and identity pair version + namespace id. \nHash example: `U3dhZ2dlciByb2Nrcw==`. \nIdentity pair example: `014723ce10b187716adfc55ff7e6d9179c226e6b5440b02577cca49d02`\n\n#### Example response \n\n```json\n{\n    \"type\": \"namespace\",\n    \"result\": {\n        \"id\": 1,\n        \"hash\": \"U3dhZ2dlciByb2Nrcw==\",\n        \"version\": 1,\n        \"namespace_id\": \"4723ce10b187716adfc55ff7e6d9179c226e6b5440b02577cca49d02\"\n        // ... rest fields from response.Namespace type\n    }\n}\n```\n\n### Validator\n\nValidator can be found by moniker prefix. \nFor example: names `Node 1` and `Node 2` can be found with query string `Node`\n\n#### Example response \n\n```json\n{\n    \"type\": \"validator\",\n    \"result\": {\n        \"id\": 1,\n        \"moniker\": \"Node 1\",\n        // ... rest fields from response.Validator type\n    }\n}\n```\n\n### Rollup\n\nRollup can be found by name prefix. \nFor example: rollup with names `Rollup 1` and `Rollup 2` can be found with query string `Rol`\n\n#### Example response \n\n```json\n{\n    \"type\": \"rollup\",\n    \"result\": {\n        \"id\": 1,\n        \"moniker\": \"Rollup 1\",\n        // ... rest fields from response.Rollup type\n    }\n}\n```",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Search by hash",
                "operationId": "search",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search string",
                        "name": "query",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.SearchItem"
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/stats/changes_24h": {
            "get": {
                "description": "Get changes for 24 hours",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get changes for 24 hours",
                "operationId": "stats-24h-changes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Change24hBlockStats"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/stats/messages_count_24h": {
            "get": {
                "description": "Get messages distribution for the last 24 hours",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get messages distribution for the last 24 hours",
                "operationId": "stats-messages-count-24h",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.CountItem"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/stats/namespace/series/{id}/{name}/{timeframe}": {
            "get": {
                "description": "Get histogram for namespace with precomputed stats by series name and timeframe",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get histogram for namespace with precomputed stats",
                "operationId": "stats-ns-series",
                "parameters": [
                    {
                        "maxLength": 56,
                        "minLength": 56,
                        "type": "string",
                        "description": "Namespace id in hexadecimal",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "hour",
                            "day",
                            "week",
                            "month",
                            "year"
                        ],
                        "type": "string",
                        "description": "Timeframe",
                        "name": "timeframe",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "pfb_count",
                            "size"
                        ],
                        "type": "string",
                        "description": "Series name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Time from in unix timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time to in unix timestamp",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.SeriesItem"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/stats/namespace/usage": {
            "get": {
                "description": "Get namespaces with sorting by size. Returns top 100 namespaces. Namespaces which is not included to top 100 grouped into 'others' item",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get namespaces with sorting by size.",
                "operationId": "stats-namespace-usage",
                "parameters": [
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of entities",
                        "name": "top",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.NamespaceUsage"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/stats/price/current": {
            "get": {
                "description": "Get current TIA price",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get current TIA price",
                "operationId": "stats-price-current",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Price"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/stats/price/series/{timeframe}": {
            "get": {
                "description": "Get histogram with TIA price",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get histogram with TIA price",
                "operationId": "stats-price-series",
                "parameters": [
                    {
                        "enum": [
                            "1m",
                            "1h",
                            "1d"
                        ],
                        "type": "string",
                        "description": "Timeframe",
                        "name": "timeframe",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Time from in unix timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time to in unix timestamp",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Price"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/stats/rollup_stats_24h": {
            "get": {
                "description": "Get rollups stats for last 24 hours",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get rollups stats for last 24 hours",
                "operationId": "stats-rollup-24h",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.RollupStats24h"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/stats/series/{name}/{timeframe}": {
            "get": {
                "description": "Get histogram with precomputed stats by series name and timeframe",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get histogram with precomputed stats",
                "operationId": "stats-series",
                "parameters": [
                    {
                        "enum": [
                            "hour",
                            "day",
                            "week",
                            "month",
                            "year"
                        ],
                        "type": "string",
                        "description": "Timeframe",
                        "name": "timeframe",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "blobs_size",
                            "blobs_count",
                            "tps",
                            "bps",
                            "fee",
                            "supply_change",
                            "block_time",
                            "tx_count",
                            "events_count",
                            "gas_price",
                            "gas_efficiency",
                            "gas_used",
                            "gas_limit",
                            "bytes_in_block",
                            "rewards",
                            "commissions"
                        ],
                        "type": "string",
                        "description": "Series name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Time from in unix timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time to in unix timestamp",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.SeriesItem"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/stats/series/{name}/{timeframe}/cumulative": {
            "get": {
                "description": "Get cumulative histogram with precomputed stats by series name and timeframe",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get cumulative histogram with precomputed stats",
                "operationId": "stats-series-cumulative",
                "parameters": [
                    {
                        "enum": [
                            "hour",
                            "day",
                            "week",
                            "month",
                            "year"
                        ],
                        "type": "string",
                        "description": "Timeframe",
                        "name": "timeframe",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "blobs_size",
                            "blobs_count",
                            "fee",
                            "tx_count",
                            "gas_used",
                            "gas_limit",
                            "bytes_in_block",
                            "supply_change"
                        ],
                        "type": "string",
                        "description": "Series name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Time from in unix timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time to in unix timestamp",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.SeriesItem"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/stats/square_size": {
            "get": {
                "description": "Get histogram for square size distribution",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get histogram for square size distribution",
                "operationId": "stats-square-size",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Time from in unix timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time to in unix timestamp",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.SquareSizeResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/stats/staking/series/{id}/{name}/{timeframe}": {
            "get": {
                "description": "Get histogram for staking with precomputed stats by series name and timeframe",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get histogram for staking with precomputed stats",
                "operationId": "stats-staking-series",
                "parameters": [
                    {
                        "maxLength": 56,
                        "minLength": 56,
                        "type": "string",
                        "description": "Validator id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "hour",
                            "day",
                            "month"
                        ],
                        "type": "string",
                        "description": "Timeframe",
                        "name": "timeframe",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "rewards",
                            "commissions",
                            "flow"
                        ],
                        "type": "string",
                        "description": "Series name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Time from in unix timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time to in unix timestamp",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.SeriesItem"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/stats/summary/{table}/{function}": {
            "get": {
                "description": "Returns string value by passed table and function.\n\n### Availiable tables\n* `block`\n* `block_stats`\n* `tx`\n* `message`\n* `event`\n\n\n### Availiable functions\n* `sum`\n* `min`\n* `max`\n* `avg`\n* `count`\n\n\n`Column` query parameter is required for functions `sum`, `min`, `max` and `avg` and should not pass for `count`.\n\n\n###  Availiable columns and functions for tables:\n\n#### Block\n* `height`         -- min max\n* `time`           -- min max\n\n#### Block stats\n* `height`         -- min max\n* `time`           -- min max\n* `tx_count`       -- min max sum avg\n* `events_count`   -- min max sum avg\n* `blobs_size`     -- min max sum avg\n* `block_time`     -- min max sum avg\n* `supply_chnge`   -- min max sum avg\n* `inflation_rate` -- min max avg\n* `fee`            -- min max sum avg\n* `gas_used`       -- min max sum avg\n* `gas_limit`      -- min max sum avg\n\n#### Tx\n* `height`         -- min max\n* `time`           -- min max\n* `gas_wanted`     -- min max sum avg\n* `gas_used`       -- min max sum avg\n* `timeout_height` -- min max avg\n* `events_count`   -- min max sum avg\n* `messages_count` -- min max sum avg\n* `fee`            -- min max sum avg\n\n#### Event\n* `height`         -- min max\n* `time`           -- min max\n\n#### Message\n* `height`         -- min max\n* `time`           -- min max",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get value by table and function",
                "operationId": "stats-summary",
                "parameters": [
                    {
                        "enum": [
                            "block",
                            "block_stats",
                            "tx",
                            "event",
                            "message",
                            "validator"
                        ],
                        "type": "string",
                        "description": "Table name",
                        "name": "table",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "min",
                            "max",
                            "avg",
                            "sum",
                            "count"
                        ],
                        "type": "string",
                        "description": "Function name",
                        "name": "function",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Column name which will be used for computation. Optional for count.",
                        "name": "column",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time from in unix timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time to in unix timestamp",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/stats/tps": {
            "get": {
                "description": "Returns transaction per seconds statistics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get tps",
                "operationId": "stats-tps",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.TPS"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                },
                "x-internal": true
            }
        },
        "/tx": {
            "get": {
                "description": "List transactions info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "List transactions info",
                "operationId": "list-transactions",
                "parameters": [
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "success",
                            "failed"
                        ],
                        "type": "string",
                        "description": "Comma-separated status list",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "MsgUnknown",
                            "MsgSetWithdrawAddress",
                            "MsgWithdrawDelegatorReward",
                            "MsgWithdrawValidatorCommission",
                            "MsgFundCommunityPool",
                            "MsgCreateValidator",
                            "MsgEditValidator",
                            "MsgDelegate",
                            "MsgBeginRedelegate",
                            "MsgUndelegate",
                            "MsgCancelUnbondingDelegation",
                            "MsgUnjail",
                            "MsgSend",
                            "MsgMultiSend",
                            "MsgCreateVestingAccount",
                            "MsgCreatePermanentLockedAccount",
                            "MsgCreatePeriodicVestingAccount",
                            "MsgPayForBlobs",
                            "MsgGrant",
                            "MsgExec",
                            "MsgRevoke",
                            "MsgGrantAllowance",
                            "MsgRevokeAllowance",
                            "MsgRegisterEVMAddress",
                            "MsgSubmitProposal",
                            "MsgExecLegacyContent",
                            "MsgVote",
                            "MsgVoteWeighted",
                            "MsgDeposit",
                            "IBCTransfer",
                            "MsgVerifyInvariant",
                            "MsgSubmitEvidence",
                            "MsgSendNFT",
                            "MsgCreateGroup",
                            "MsgUpdateGroupMembers",
                            "MsgUpdateGroupAdmin",
                            "MsgUpdateGroupMetadata",
                            "MsgCreateGroupPolicy",
                            "MsgUpdateGroupPolicyAdmin",
                            "MsgCreateGroupWithPolicy",
                            "MsgUpdateGroupPolicyDecisionPolicy",
                            "MsgUpdateGroupPolicyMetadata",
                            "MsgSubmitProposalGroup",
                            "MsgWithdrawProposal",
                            "MsgVoteGroup",
                            "MsgExecGroup",
                            "MsgLeaveGroup",
                            "MsgSoftwareUpgrade",
                            "MsgCancelUpgrade",
                            "MsgRegisterInterchainAccount",
                            "MsgSendTx",
                            "MsgRegisterPayee",
                            "MsgRegisterCounterpartyPayee",
                            "MsgPayPacketFee",
                            "MsgPayPacketFeeAsync",
                            "MsgTransfer",
                            "MsgCreateClient",
                            "MsgUpdateClient",
                            "MsgUpgradeClient",
                            "MsgSubmitMisbehaviour",
                            "MsgConnectionOpenInit",
                            "MsgConnectionOpenTry",
                            "MsgConnectionOpenAck",
                            "MsgConnectionOpenConfirm",
                            "MsgChannelOpenInit",
                            "MsgChannelOpenTry",
                            "MsgChannelOpenAck",
                            "MsgChannelOpenConfirm",
                            "MsgChannelCloseInit",
                            "MsgChannelCloseConfirm",
                            "MsgRecvPacket",
                            "MsgTimeout",
                            "MsgTimeoutOnClose",
                            "MsgAcknowledgement"
                        ],
                        "type": "string",
                        "description": "Comma-separated message types list",
                        "name": "msg_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "MsgUnknown",
                            "MsgSetWithdrawAddress",
                            "MsgWithdrawDelegatorReward",
                            "MsgWithdrawValidatorCommission",
                            "MsgFundCommunityPool",
                            "MsgCreateValidator",
                            "MsgEditValidator",
                            "MsgDelegate",
                            "MsgBeginRedelegate",
                            "MsgUndelegate",
                            "MsgCancelUnbondingDelegation",
                            "MsgUnjail",
                            "MsgSend",
                            "MsgMultiSend",
                            "MsgCreateVestingAccount",
                            "MsgCreatePermanentLockedAccount",
                            "MsgCreatePeriodicVestingAccount",
                            "MsgPayForBlobs",
                            "MsgGrant",
                            "MsgExec",
                            "MsgRevoke",
                            "MsgGrantAllowance",
                            "MsgRevokeAllowance",
                            "MsgRegisterEVMAddress",
                            "MsgSubmitProposal",
                            "MsgExecLegacyContent",
                            "MsgVote",
                            "MsgVoteWeighted",
                            "MsgDeposit",
                            "IBCTransfer",
                            "MsgVerifyInvariant",
                            "MsgSubmitEvidence",
                            "MsgSendNFT",
                            "MsgCreateGroup",
                            "MsgUpdateGroupMembers",
                            "MsgUpdateGroupAdmin",
                            "MsgUpdateGroupMetadata",
                            "MsgCreateGroupPolicy",
                            "MsgUpdateGroupPolicyAdmin",
                            "MsgCreateGroupWithPolicy",
                            "MsgUpdateGroupPolicyDecisionPolicy",
                            "MsgUpdateGroupPolicyMetadata",
                            "MsgSubmitProposalGroup",
                            "MsgWithdrawProposal",
                            "MsgVoteGroup",
                            "MsgExecGroup",
                            "MsgLeaveGroup",
                            "MsgSoftwareUpgrade",
                            "MsgCancelUpgrade",
                            "MsgRegisterInterchainAccount",
                            "MsgSendTx",
                            "MsgRegisterPayee",
                            "MsgRegisterCounterpartyPayee",
                            "MsgPayPacketFee",
                            "MsgPayPacketFeeAsync",
                            "MsgTransfer",
                            "MsgCreateClient",
                            "MsgUpdateClient",
                            "MsgUpgradeClient",
                            "MsgSubmitMisbehaviour",
                            "MsgConnectionOpenInit",
                            "MsgConnectionOpenTry",
                            "MsgConnectionOpenAck",
                            "MsgConnectionOpenConfirm",
                            "MsgChannelOpenInit",
                            "MsgChannelOpenTry",
                            "MsgChannelOpenAck",
                            "MsgChannelOpenConfirm",
                            "MsgChannelCloseInit",
                            "MsgChannelCloseConfirm",
                            "MsgRecvPacket",
                            "MsgTimeout",
                            "MsgTimeoutOnClose",
                            "MsgAcknowledgement"
                        ],
                        "type": "string",
                        "description": "Comma-separated message types list which should be excluded",
                        "name": "excluded_msg_type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time from in unix timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time to in unix timestamp",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Block number",
                        "name": "height",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "If true join messages",
                        "name": "messages",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Tx"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/tx/count": {
            "get": {
                "description": "Get count of transactions in network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get count of transactions in network",
                "operationId": "get-transactions-count",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/tx/genesis": {
            "get": {
                "description": "List genesis transactions info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "List genesis transactions info",
                "operationId": "list-genesis-transactions",
                "parameters": [
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Tx"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/tx/{hash}": {
            "get": {
                "description": "Get transaction by hash",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get transaction by hash",
                "operationId": "get-transaction",
                "parameters": [
                    {
                        "maxLength": 64,
                        "minLength": 64,
                        "type": "string",
                        "description": "Transaction hash in hexadecimal",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Tx"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/tx/{hash}/blobs": {
            "get": {
                "description": "List blobs which was pushed by transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "List blobs which was pushed by transaction",
                "operationId": "list-transaction-blobs",
                "parameters": [
                    {
                        "maxLength": 64,
                        "minLength": 64,
                        "type": "string",
                        "description": "Transaction hash in hexadecimal",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order. Default: desc",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "time",
                            "size"
                        ],
                        "type": "string",
                        "description": "Sort field. If it's empty internal id is used",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.BlobLog"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/tx/{hash}/blobs/count": {
            "get": {
                "description": "Count of blobs which was pushed by transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Count of blobs which was pushed by transaction",
                "operationId": "transaction-blobs-count",
                "parameters": [
                    {
                        "maxLength": 64,
                        "minLength": 64,
                        "type": "string",
                        "description": "Transaction hash in hexadecimal",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/tx/{hash}/events": {
            "get": {
                "description": "Get transaction events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get transaction events",
                "operationId": "get-transaction-events",
                "parameters": [
                    {
                        "maxLength": 64,
                        "minLength": 64,
                        "type": "string",
                        "description": "Transaction hash in hexadecimal",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Event"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/tx/{hash}/messages": {
            "get": {
                "description": "Get transaction messages",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get transaction messages",
                "operationId": "get-transaction-messages",
                "parameters": [
                    {
                        "maxLength": 64,
                        "minLength": 64,
                        "type": "string",
                        "description": "Transaction hash in hexadecimal",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Message"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/validators": {
            "get": {
                "description": "List validators",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "validator"
                ],
                "summary": "List validators",
                "operationId": "list-validator",
                "parameters": [
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Return only jailed validators",
                        "name": "jailed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Validator"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/validators/count": {
            "get": {
                "description": "Get validator's count by status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "validator"
                ],
                "summary": "Get validator's count by status",
                "operationId": "validator-count",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.ValidatorCount"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/validators/{id}": {
            "get": {
                "description": "Get validator info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "validator"
                ],
                "summary": "Get validator info",
                "operationId": "get-validator",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Internal validator id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Validator"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/validators/{id}/blocks": {
            "get": {
                "description": "Get blocks which was proposed by validator",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "validator"
                ],
                "summary": "Get blocks which was proposed by validator",
                "operationId": "get-validator-blocks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Internal validator id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Block"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/validators/{id}/delegators": {
            "get": {
                "description": "Get validator's delegators",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "validator"
                ],
                "summary": "Get validator's delegators",
                "operationId": "validator-delegators",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Internal validator id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Show zero delegations",
                        "name": "show_zero",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Delegation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/validators/{id}/jails": {
            "get": {
                "description": "Get validator's jails",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "validator"
                ],
                "summary": "Get validator's jails",
                "operationId": "validator-jails",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Internal validator id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Jail"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/validators/{id}/uptime": {
            "get": {
                "description": "Get validator's uptime and history of signed block",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "validator"
                ],
                "summary": "Get validator's uptime and history of signed block",
                "operationId": "get-validator-uptime",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Internal validator id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested blocks",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.ValidatorUptime"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/vesting/{id}/periods": {
            "get": {
                "description": "Periods vesting periods by id. Returns not empty array only for periodic vestings.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vesting"
                ],
                "summary": "Periods vesting periods by id",
                "operationId": "get-vesting-periods",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Internal identity",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Count of requested entities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.VestingPeriod"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        },
        "/ws": {
            "get": {
                "description": "## Documentation for websocket API\n\n### Notification\n\nThe structure of notification is following in all channels:\n\n```json\n{\n    \"channel\": \"channel_name\",\n    \"body\": \"\u003cobject or array\u003e\"  // depends on channel\n}\n```\n\n### Subscribe\n\nTo receive updates from websocket API send `subscribe` request to server.\n\n```json\n{\n    \"method\": \"subscribe\",\n    \"body\": {\n        \"channel\": \"\u003cCHANNEL_NAME\u003e\",\n        \"filters\": {\n            // pass channel filters\n        }\n    }\n}\n```\n\nNow 3 channels are supported:\n\n* `head` - receive information about indexer state. Channel does not have any filters. Subscribe message should looks like:\n\n```json\n{\n    \"method\": \"subscribe\",\n    \"body\": {\n        \"channel\": \"head\"\n    }\n}\n```\n\nNotification body of `responses.State` type will be sent to the channel.\n\n* `blocks` - receive information about new blocks. Channel does not have any filters. Subscribe message should looks like:\n\n```json\n{\n    \"method\": \"subscribe\",\n    \"body\": {\n        \"channel\": \"blocks\"\n    }\n}\n```\n\nNotification body of `responses.Block` type will be sent to the channel.\n\n* `gas_price` - receive information about current gas price. Channel does not have any filters. Subscribe message should looks like:\n\n```json\n{\n    \"method\": \"subscribe\",\n    \"body\": {\n        \"channel\": \"gas_price\"\n    }\n}\n```\n\nNotification body of `responses.GasPrice` type will be sent to the channel.\n\n\n### Unsubscribe\n\nTo unsubscribe send `unsubscribe` message containing one of channel name describing above.\n\n\n```json\n{\n    \"method\": \"unsubscribe\",\n    \"body\": {\n        \"channel\": \"\u003cCHANNEL_NAME\u003e\",\n    }\n}\n```\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "websocket"
                ],
                "summary": "Websocket API",
                "operationId": "websocket",
                "responses": {},
                "x-internal": true
            }
        }
    },
    "definitions": {
        "github_com_celenium-io_celestia-indexer_internal_storage_types.Status": {
            "type": "string",
            "enum": [
                "success",
                "failed"
            ],
            "x-enum-varnames": [
                "StatusSuccess",
                "StatusFailed"
            ]
        },
        "handler.Error": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "responses.Address": {
            "description": "Celestia address information",
            "type": "object",
            "properties": {
                "balance": {
                    "$ref": "#/definitions/responses.Balance"
                },
                "first_height": {
                    "type": "integer",
                    "example": 100
                },
                "hash": {
                    "type": "string",
                    "example": "celestia1jc92qdnty48pafummfr8ava2tjtuhfdw774w60"
                },
                "id": {
                    "type": "integer",
                    "example": 321
                },
                "last_height": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "responses.Balance": {
            "description": "Balance of address information",
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string",
                    "example": "utia"
                },
                "delegated": {
                    "type": "string",
                    "example": "10000000000"
                },
                "spendable": {
                    "type": "string",
                    "example": "10000000000"
                },
                "unbonding": {
                    "type": "string",
                    "example": "10000000000"
                }
            }
        },
        "responses.Blob": {
            "type": "object",
            "properties": {
                "commitment": {
                    "type": "string",
                    "format": "base64",
                    "example": "vbGakK59+Non81TE3ULg5Ve5ufT9SFm/bCyY+WLR3gg="
                },
                "content_type": {
                    "type": "string",
                    "format": "string",
                    "example": "image/png"
                },
                "data": {
                    "type": "string",
                    "format": "base64",
                    "example": "b2sgZGVtbyBkYQ=="
                },
                "namespace": {
                    "type": "string",
                    "format": "base64",
                    "example": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAs2bWWU6FOB0="
                },
                "share_version": {
                    "type": "integer",
                    "format": "integer",
                    "example": 0
                }
            }
        },
        "responses.BlobLog": {
            "type": "object",
            "properties": {
                "commitment": {
                    "type": "string",
                    "format": "base64",
                    "example": "vbGakK59+Non81TE3ULg5Ve5ufT9SFm/bCyY+WLR3gg="
                },
                "content_type": {
                    "type": "string",
                    "format": "string",
                    "example": "image/png"
                },
                "height": {
                    "type": "integer",
                    "format": "integer",
                    "example": 100
                },
                "id": {
                    "type": "integer",
                    "format": "integer",
                    "example": 200
                },
                "namespace": {
                    "$ref": "#/definitions/responses.Namespace"
                },
                "rollup": {
                    "$ref": "#/definitions/responses.ShortRollup"
                },
                "signer": {
                    "type": "string",
                    "format": "string",
                    "example": "celestia1jc92qdnty48pafummfr8ava2tjtuhfdw774w60"
                },
                "size": {
                    "type": "integer",
                    "format": "integer",
                    "example": 10
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "tx": {
                    "$ref": "#/definitions/responses.Tx"
                }
            }
        },
        "responses.Block": {
            "type": "object",
            "properties": {
                "app_hash": {
                    "type": "string",
                    "example": "652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF"
                },
                "consensus_hash": {
                    "type": "string",
                    "example": "652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF"
                },
                "data_hash": {
                    "type": "string",
                    "example": "652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF"
                },
                "evidence_hash": {
                    "type": "string",
                    "example": "652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF"
                },
                "hash": {
                    "type": "string",
                    "example": "652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF"
                },
                "height": {
                    "type": "integer",
                    "example": 100
                },
                "id": {
                    "type": "integer",
                    "example": 321
                },
                "last_commit_hash": {
                    "type": "string",
                    "example": "652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF"
                },
                "last_results_hash": {
                    "type": "string",
                    "example": "652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF"
                },
                "message_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "MsgSend",
                        "MsgUnjail"
                    ]
                },
                "next_validators_hash": {
                    "type": "string",
                    "example": "652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF"
                },
                "parent_hash": {
                    "type": "string",
                    "example": "652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF"
                },
                "proposer": {
                    "$ref": "#/definitions/responses.ShortValidator"
                },
                "stats": {
                    "$ref": "#/definitions/responses.BlockStats"
                },
                "time": {
                    "type": "string",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "validators_hash": {
                    "type": "string",
                    "example": "652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF"
                },
                "version_app": {
                    "type": "string",
                    "example": "1"
                },
                "version_block": {
                    "type": "string",
                    "example": "11"
                }
            }
        },
        "responses.BlockStats": {
            "type": "object",
            "properties": {
                "blobs_count": {
                    "type": "integer",
                    "example": 100
                },
                "blobs_size": {
                    "type": "integer",
                    "example": 12354
                },
                "block_time": {
                    "type": "integer",
                    "example": 12354
                },
                "bytes_in_block": {
                    "type": "integer",
                    "example": 1234
                },
                "commissions": {
                    "type": "string",
                    "example": "123133"
                },
                "events_count": {
                    "type": "integer",
                    "example": 18
                },
                "fee": {
                    "type": "string",
                    "example": "28347628346"
                },
                "fill_rate": {
                    "type": "string",
                    "example": "0.0800"
                },
                "gas_limit": {
                    "type": "integer",
                    "example": 1234
                },
                "gas_used": {
                    "type": "integer",
                    "example": 1234
                },
                "inflation_rate": {
                    "type": "string",
                    "example": "0.0800000"
                },
                "rewards": {
                    "type": "string",
                    "example": "102102812"
                },
                "square_size": {
                    "type": "integer",
                    "example": 16
                },
                "supply_change": {
                    "type": "string",
                    "example": "8635234"
                },
                "tx_count": {
                    "type": "integer",
                    "example": 12
                }
            }
        },
        "responses.Change24hBlockStats": {
            "type": "object",
            "properties": {
                "blobs_size_24h": {
                    "type": "number",
                    "format": "float",
                    "example": 0.1234
                },
                "bytes_in_block_24h": {
                    "type": "number",
                    "format": "float",
                    "example": 0.1234
                },
                "fee_24h": {
                    "type": "number",
                    "format": "float",
                    "example": 0.1234
                },
                "tx_count_24h": {
                    "type": "number",
                    "format": "float",
                    "example": 0.1234
                }
            }
        },
        "responses.Constants": {
            "type": "object",
            "properties": {
                "denom_metadata": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.DenomMetadata"
                    }
                },
                "module": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/responses.Params"
                    }
                }
            }
        },
        "responses.CountItem": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "format": "string",
                    "example": "test"
                },
                "value": {
                    "type": "string",
                    "format": "string",
                    "example": "17632"
                }
            }
        },
        "responses.Delegation": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string",
                    "example": "0.1"
                },
                "delegator": {
                    "type": "string",
                    "example": "celestia1jc92qdnty48pafummfr8ava2tjtuhfdw774w60"
                },
                "validator": {
                    "$ref": "#/definitions/responses.ShortValidator"
                }
            }
        },
        "responses.DenomMetadata": {
            "type": "object",
            "properties": {
                "base": {
                    "type": "string",
                    "example": "utia"
                },
                "description": {
                    "type": "string",
                    "example": "Some description"
                },
                "display": {
                    "type": "string",
                    "example": "TIA"
                },
                "name": {
                    "type": "string",
                    "example": "TIA"
                },
                "symbol": {
                    "type": "string",
                    "example": "TIA"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "uri": {
                    "type": "string",
                    "example": "https://example.com"
                }
            }
        },
        "responses.DistributionItem": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "format": "string",
                    "example": "12"
                },
                "value": {
                    "type": "string",
                    "format": "string",
                    "example": "0.17632"
                }
            }
        },
        "responses.Enums": {
            "type": "object",
            "properties": {
                "event_type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message_type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "responses.Event": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "height": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                },
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 321
                },
                "position": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "tx_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 11
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.EventType"
                        }
                    ],
                    "example": "commission"
                }
            }
        },
        "responses.GasPrice": {
            "type": "object",
            "properties": {
                "fast": {
                    "type": "string",
                    "format": "string",
                    "example": "0.1234"
                },
                "median": {
                    "type": "string",
                    "format": "string",
                    "example": "0.1234"
                },
                "slow": {
                    "type": "string",
                    "format": "string",
                    "example": "0.1234"
                }
            }
        },
        "responses.Grant": {
            "type": "object",
            "properties": {
                "authorization": {
                    "type": "string",
                    "example": "/cosmos.staking.v1beta1.MsgDelegate"
                },
                "expiration": {
                    "type": "string",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "grantee": {
                    "type": "string",
                    "example": "celestia1jc92qdnty48pafummfr8ava2tjtuhfdw774w60"
                },
                "granter": {
                    "type": "string",
                    "example": "celestia1jc92qdnty48pafummfr8ava2tjtuhfdw774w60"
                },
                "height": {
                    "type": "integer",
                    "example": 123123
                },
                "params": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "revoke_height": {
                    "type": "integer",
                    "example": 123123
                },
                "revoked": {
                    "type": "boolean",
                    "example": true
                },
                "time": {
                    "type": "string",
                    "example": "2023-07-04T03:10:57+00:00"
                }
            }
        },
        "responses.HistogramItem": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "value": {
                    "type": "string",
                    "format": "string",
                    "example": "2223424"
                }
            }
        },
        "responses.Jail": {
            "type": "object",
            "properties": {
                "burned": {
                    "type": "string",
                    "example": "10000000000"
                },
                "height": {
                    "type": "integer",
                    "example": 100
                },
                "reason": {
                    "type": "string",
                    "example": "double_sign"
                },
                "time": {
                    "type": "string",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "validator": {
                    "$ref": "#/definitions/responses.ShortValidator"
                }
            }
        },
        "responses.LightBlobLog": {
            "type": "object",
            "properties": {
                "commitment": {
                    "type": "string",
                    "format": "base64",
                    "example": "vbGakK59+Non81TE3ULg5Ve5ufT9SFm/bCyY+WLR3gg="
                },
                "content_type": {
                    "type": "string",
                    "format": "string",
                    "example": "image/png"
                },
                "height": {
                    "type": "integer",
                    "format": "integer",
                    "example": 100
                },
                "id": {
                    "type": "integer",
                    "format": "integer",
                    "example": 200
                },
                "namespace": {
                    "type": "string",
                    "format": "base64",
                    "example": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAs2bWWU6FOB0="
                },
                "signer": {
                    "type": "string",
                    "format": "string",
                    "example": "celestia1jc92qdnty48pafummfr8ava2tjtuhfdw774w60"
                },
                "size": {
                    "type": "integer",
                    "format": "integer",
                    "example": 10
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "tx_hash": {
                    "type": "string",
                    "format": "binary",
                    "example": "652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF"
                }
            }
        },
        "responses.Message": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "height": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                },
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 321
                },
                "position": {
                    "type": "integer",
                    "format": "int64",
                    "example": 2
                },
                "size": {
                    "type": "integer",
                    "format": "int",
                    "example": 2
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "tx": {
                    "$ref": "#/definitions/responses.Tx"
                },
                "tx_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 11
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MsgType"
                        }
                    ],
                    "example": "MsgCreatePeriodicVestingAccount"
                }
            }
        },
        "responses.MessageForAddress": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "height": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                },
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 321
                },
                "invocation_type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MsgAddressType"
                        }
                    ],
                    "example": "fromAddress"
                },
                "position": {
                    "type": "integer",
                    "format": "int64",
                    "example": 2
                },
                "size": {
                    "type": "integer",
                    "format": "int",
                    "example": 2
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "tx": {
                    "$ref": "#/definitions/responses.TxForAddress"
                },
                "tx_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 11
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MsgType"
                        }
                    ],
                    "example": "MsgCreatePeriodicVestingAccount"
                }
            }
        },
        "responses.Namespace": {
            "type": "object",
            "properties": {
                "blobs_count": {
                    "type": "integer",
                    "format": "integer",
                    "example": 10000
                },
                "hash": {
                    "type": "string",
                    "format": "base64",
                    "example": "U3dhZ2dlciByb2Nrcw=="
                },
                "id": {
                    "type": "integer",
                    "format": "integer",
                    "example": 321
                },
                "last_height": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                },
                "last_message_time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "name": {
                    "type": "string",
                    "format": "string",
                    "example": "name"
                },
                "namespace_id": {
                    "type": "string",
                    "format": "binary",
                    "example": "4723ce10b187716adfc55ff7e6d9179c226e6b5440b02577cca49d02"
                },
                "pfb_count": {
                    "type": "integer",
                    "format": "integer",
                    "example": 12
                },
                "reserved": {
                    "type": "boolean",
                    "example": true
                },
                "size": {
                    "type": "integer",
                    "format": "integer",
                    "example": 12345
                },
                "version": {
                    "type": "integer",
                    "format": "byte"
                }
            }
        },
        "responses.NamespaceKind": {
            "type": "string",
            "enum": [
                "pay_for_blob",
                "tail_padding",
                "tx",
                "parity_shares",
                "primary_reserved_padding",
                "namespace"
            ],
            "x-enum-varnames": [
                "PayForBlobNamespace",
                "TailPaddingNamespace",
                "TxNamespace",
                "ParitySharesNamespace",
                "PrimaryReservedNamespace",
                "DefaultNamespace"
            ]
        },
        "responses.NamespaceMessage": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "height": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                },
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 321
                },
                "namespace": {
                    "$ref": "#/definitions/responses.Namespace"
                },
                "position": {
                    "type": "integer",
                    "format": "int64",
                    "example": 2
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "tx": {
                    "$ref": "#/definitions/responses.Tx"
                },
                "type": {
                    "type": "string",
                    "format": "string",
                    "enum": [
                        "MsgWithdrawValidatorCommission",
                        "MsgWithdrawDelegatorReward",
                        "MsgEditValidator",
                        "MsgBeginRedelegate",
                        "MsgCreateValidator",
                        "MsgDelegate",
                        "MsgUndelegate",
                        "MsgUnjail",
                        "MsgSend",
                        "MsgCreateVestingAccount",
                        "MsgCreatePeriodicVestingAccount",
                        "MsgPayForBlobs",
                        "MsgGrantAllowance"
                    ],
                    "example": "MsgCreatePeriodicVestingAccount"
                }
            }
        },
        "responses.NamespaceUsage": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "format": "string",
                    "example": "00112233"
                },
                "namespace_id": {
                    "type": "string",
                    "format": "binary",
                    "example": "4723ce10b187716adfc55ff7e6d9179c226e6b5440b02577cca49d02"
                },
                "size": {
                    "type": "number",
                    "format": "integer",
                    "example": 1283518
                },
                "version": {
                    "type": "integer",
                    "format": "byte"
                }
            }
        },
        "responses.ODS": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.ODSItem"
                    }
                },
                "width": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "responses.ODSItem": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "namespace": {
                    "type": "string"
                },
                "to": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "type": {
                    "$ref": "#/definitions/responses.NamespaceKind"
                }
            }
        },
        "responses.Params": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "responses.Price": {
            "type": "object",
            "properties": {
                "close": {
                    "type": "string",
                    "format": "string",
                    "example": "0.17632"
                },
                "high": {
                    "type": "string",
                    "format": "string",
                    "example": "0.17632"
                },
                "low": {
                    "type": "string",
                    "format": "string",
                    "example": "0.17632"
                },
                "open": {
                    "type": "string",
                    "format": "string",
                    "example": "0.17632"
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                }
            }
        },
        "responses.Redelegation": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string",
                    "example": "0.1"
                },
                "completion_time": {
                    "type": "string",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "delegator": {
                    "type": "string",
                    "example": "celestia1jc92qdnty48pafummfr8ava2tjtuhfdw774w60"
                },
                "destination": {
                    "$ref": "#/definitions/responses.ShortValidator"
                },
                "height": {
                    "type": "integer",
                    "example": 100
                },
                "source": {
                    "$ref": "#/definitions/responses.ShortValidator"
                },
                "time": {
                    "type": "string",
                    "example": "2023-07-04T03:10:57+00:00"
                }
            }
        },
        "responses.Rollup": {
            "type": "object",
            "properties": {
                "bridge": {
                    "type": "string",
                    "format": "string",
                    "example": "https://github.com/account"
                },
                "description": {
                    "type": "string",
                    "format": "string",
                    "example": "Long rollup description"
                },
                "explorer": {
                    "type": "string",
                    "format": "string",
                    "example": "https://explorer.karak.network/"
                },
                "github": {
                    "type": "string",
                    "format": "string",
                    "example": "https://github.com/account"
                },
                "id": {
                    "type": "integer",
                    "format": "integer",
                    "example": 321
                },
                "l2_beat": {
                    "type": "string",
                    "format": "string",
                    "example": "https://github.com/account"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "logo": {
                    "type": "string",
                    "format": "string",
                    "example": "https://some_link.com/image.png"
                },
                "name": {
                    "type": "string",
                    "format": "string",
                    "example": "Rollup name"
                },
                "slug": {
                    "type": "string",
                    "format": "string",
                    "example": "rollup_slug"
                },
                "stack": {
                    "type": "string",
                    "format": "string",
                    "example": "op_stack"
                },
                "twitter": {
                    "type": "string",
                    "format": "string",
                    "example": "https://x.com/account"
                },
                "website": {
                    "type": "string",
                    "format": "string",
                    "example": "https://website.com"
                }
            }
        },
        "responses.RollupAllSeriesItem": {
            "type": "object",
            "properties": {
                "blobs_count": {
                    "type": "integer",
                    "format": "integer",
                    "example": 123
                },
                "fee": {
                    "type": "string",
                    "format": "string",
                    "example": "123"
                },
                "logo": {
                    "type": "string",
                    "format": "string",
                    "example": "https://some_link.com/image.png"
                },
                "name": {
                    "type": "string",
                    "format": "string",
                    "example": "Rollup name"
                },
                "size": {
                    "type": "integer",
                    "format": "integer",
                    "example": 123
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                }
            }
        },
        "responses.RollupStats24h": {
            "type": "object",
            "properties": {
                "blobs_count": {
                    "type": "integer",
                    "format": "integer",
                    "example": 123
                },
                "fee": {
                    "type": "integer",
                    "format": "number",
                    "example": 123
                },
                "id": {
                    "type": "integer",
                    "format": "integer",
                    "example": 321
                },
                "logo": {
                    "type": "string",
                    "format": "string",
                    "example": "https://some_link.com/image.png"
                },
                "name": {
                    "type": "string",
                    "format": "string",
                    "example": "Rollup name"
                },
                "size": {
                    "type": "integer",
                    "format": "integer",
                    "example": 123
                }
            }
        },
        "responses.RollupWithDayStats": {
            "type": "object",
            "properties": {
                "avg_size": {
                    "type": "integer",
                    "format": "integer",
                    "example": 100
                },
                "blobs_count": {
                    "type": "integer",
                    "format": "integer",
                    "example": 100
                },
                "blobs_per_pfb": {
                    "type": "number",
                    "format": "float",
                    "example": 100
                },
                "bridge": {
                    "type": "string",
                    "format": "string",
                    "example": "https://github.com/account"
                },
                "description": {
                    "type": "string",
                    "format": "string",
                    "example": "Long rollup description"
                },
                "explorer": {
                    "type": "string",
                    "format": "string",
                    "example": "https://explorer.karak.network/"
                },
                "fee_per_pfb": {
                    "type": "string",
                    "format": "string",
                    "example": "100"
                },
                "github": {
                    "type": "string",
                    "format": "string",
                    "example": "https://github.com/account"
                },
                "id": {
                    "type": "integer",
                    "format": "integer",
                    "example": 321
                },
                "l2_beat": {
                    "type": "string",
                    "format": "string",
                    "example": "https://l2beat.com/scaling/projects/karak"
                },
                "logo": {
                    "type": "string",
                    "format": "string",
                    "example": "https://some_link.com/image.png"
                },
                "mb_price": {
                    "type": "string",
                    "format": "string",
                    "example": "100"
                },
                "name": {
                    "type": "string",
                    "format": "string",
                    "example": "Rollup name"
                },
                "namespace_count": {
                    "type": "integer",
                    "format": "integer",
                    "example": 100
                },
                "pfb_count": {
                    "type": "integer",
                    "format": "integer",
                    "example": 100
                },
                "slug": {
                    "type": "string",
                    "format": "string",
                    "example": "rollup_slug"
                },
                "stack": {
                    "type": "string",
                    "format": "string",
                    "example": "op_stack"
                },
                "throughput": {
                    "type": "integer",
                    "format": "integer",
                    "example": 100
                },
                "total_fee": {
                    "type": "string",
                    "format": "string",
                    "example": "100"
                },
                "total_size": {
                    "type": "integer",
                    "format": "integer",
                    "example": 100
                },
                "twitter": {
                    "type": "string",
                    "format": "string",
                    "example": "https://x.com/account"
                },
                "website": {
                    "type": "string",
                    "format": "string",
                    "example": "https://website.com"
                }
            }
        },
        "responses.RollupWithStats": {
            "type": "object",
            "properties": {
                "blobs_count": {
                    "type": "integer",
                    "format": "integer",
                    "example": 2
                },
                "blobs_count_pct": {
                    "type": "number",
                    "format": "float",
                    "example": 0.9876
                },
                "bridge": {
                    "type": "string",
                    "format": "string",
                    "example": "https://github.com/account"
                },
                "description": {
                    "type": "string",
                    "format": "string",
                    "example": "Long rollup description"
                },
                "explorer": {
                    "type": "string",
                    "format": "string",
                    "example": "https://explorer.karak.network/"
                },
                "fee": {
                    "type": "string",
                    "format": "string",
                    "example": "123.456789"
                },
                "fee_pct": {
                    "type": "number",
                    "format": "float",
                    "example": 0.9876
                },
                "first_message_time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "github": {
                    "type": "string",
                    "format": "string",
                    "example": "https://github.com/account"
                },
                "id": {
                    "type": "integer",
                    "format": "integer",
                    "example": 321
                },
                "l2_beat": {
                    "type": "string",
                    "format": "string",
                    "example": "https://l2beat.com/scaling/projects/karak"
                },
                "last_message_time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "logo": {
                    "type": "string",
                    "format": "string",
                    "example": "https://some_link.com/image.png"
                },
                "name": {
                    "type": "string",
                    "format": "string",
                    "example": "Rollup name"
                },
                "size": {
                    "type": "integer",
                    "format": "integer",
                    "example": 1000
                },
                "size_pct": {
                    "type": "number",
                    "format": "float",
                    "example": 0.9876
                },
                "slug": {
                    "type": "string",
                    "format": "string",
                    "example": "rollup_slug"
                },
                "stack": {
                    "type": "string",
                    "format": "string",
                    "example": "op_stack"
                },
                "twitter": {
                    "type": "string",
                    "format": "string",
                    "example": "https://x.com/account"
                },
                "website": {
                    "type": "string",
                    "format": "string",
                    "example": "https://website.com"
                }
            }
        },
        "responses.SearchItem": {
            "type": "object",
            "properties": {
                "result": {
                    "description": "Search result. Can be one of folowwing types: Block, Address, Namespace, Tx, Validator, Rollup",
                    "type": "object"
                },
                "type": {
                    "description": "Result type which is in the result. Can be 'block', 'address', 'namespace', 'tx', 'validator', 'rollup'",
                    "type": "string"
                }
            }
        },
        "responses.SeriesItem": {
            "type": "object",
            "properties": {
                "max": {
                    "type": "string",
                    "format": "string",
                    "example": "0.17632"
                },
                "min": {
                    "type": "string",
                    "format": "string",
                    "example": "0.17632"
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "value": {
                    "type": "string",
                    "format": "string",
                    "example": "0.17632"
                }
            }
        },
        "responses.ShortRollup": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "integer",
                    "example": 321
                },
                "logo": {
                    "type": "string",
                    "format": "string",
                    "example": "https://some_link.com/image.png"
                },
                "name": {
                    "type": "string",
                    "format": "string",
                    "example": "Rollup name"
                },
                "slug": {
                    "type": "string",
                    "format": "string",
                    "example": "rollup_slug"
                }
            }
        },
        "responses.ShortValidator": {
            "type": "object",
            "properties": {
                "cons_address": {
                    "type": "string",
                    "example": "E641C7A2C964833E556AEF934FBF166B712874B6"
                },
                "id": {
                    "type": "integer",
                    "example": 321
                },
                "moniker": {
                    "type": "string",
                    "example": "Easy 2 Stake"
                }
            }
        },
        "responses.SignedBlocks": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer",
                    "example": 100
                },
                "signed": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.SquareSizeResponse": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/responses.TimeValueItem"
                }
            }
        },
        "responses.State": {
            "type": "object",
            "properties": {
                "chain_id": {
                    "type": "string",
                    "format": "string",
                    "example": "mocha-4"
                },
                "hash": {
                    "type": "string",
                    "format": "string",
                    "example": "652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF"
                },
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 321
                },
                "last_height": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                },
                "last_time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "name": {
                    "type": "string",
                    "format": "string",
                    "example": "indexer"
                },
                "synced": {
                    "type": "boolean",
                    "format": "boolean",
                    "example": true
                },
                "total_accounts": {
                    "type": "integer",
                    "format": "int64",
                    "example": 43
                },
                "total_blobs_size": {
                    "type": "integer",
                    "format": "int64",
                    "example": 56789
                },
                "total_fee": {
                    "type": "string",
                    "format": "string",
                    "example": "312"
                },
                "total_stake": {
                    "type": "string",
                    "format": "string",
                    "example": "312"
                },
                "total_supply": {
                    "type": "string",
                    "format": "string",
                    "example": "312"
                },
                "total_tx": {
                    "type": "integer",
                    "format": "int64",
                    "example": 23456
                },
                "total_validators": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                },
                "total_voting_power": {
                    "type": "string",
                    "format": "string",
                    "example": "312"
                }
            }
        },
        "responses.TPS": {
            "type": "object",
            "properties": {
                "change_last_hour_pct": {
                    "type": "number",
                    "format": "float",
                    "example": 0.275
                },
                "current": {
                    "type": "number",
                    "format": "float",
                    "example": 0.567
                },
                "high": {
                    "type": "number",
                    "format": "float",
                    "example": 1.023
                },
                "low": {
                    "type": "number",
                    "format": "float",
                    "example": 0.123
                }
            }
        },
        "responses.TimeValueItem": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "value": {
                    "type": "string",
                    "format": "string",
                    "example": "0.17632"
                }
            }
        },
        "responses.Tx": {
            "type": "object",
            "properties": {
                "codespace": {
                    "type": "string",
                    "format": "string",
                    "example": "sdk"
                },
                "error": {
                    "type": "string",
                    "format": "string",
                    "example": ""
                },
                "events_count": {
                    "type": "integer",
                    "format": "int64",
                    "example": 2
                },
                "fee": {
                    "type": "string",
                    "format": "int64",
                    "example": "9348"
                },
                "gas_used": {
                    "type": "integer",
                    "format": "int64",
                    "example": 4253
                },
                "gas_wanted": {
                    "type": "integer",
                    "format": "int64",
                    "example": 9348
                },
                "hash": {
                    "type": "string",
                    "format": "binary",
                    "example": "652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF"
                },
                "height": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                },
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 321
                },
                "memo": {
                    "type": "string",
                    "format": "string",
                    "example": "Transfer to private account"
                },
                "message_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.MsgType"
                    },
                    "example": [
                        "MsgSend",
                        "MsgUnjail"
                    ]
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.Message"
                    }
                },
                "messages_count": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1
                },
                "position": {
                    "type": "integer",
                    "format": "int64",
                    "example": 11
                },
                "signers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_celenium-io_celestia-indexer_internal_storage_types.Status"
                        }
                    ],
                    "example": "success"
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "timeout_height": {
                    "type": "integer",
                    "format": "int64",
                    "example": 0
                }
            }
        },
        "responses.TxForAddress": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "string",
                    "format": "int64",
                    "example": "9348"
                },
                "hash": {
                    "type": "string",
                    "format": "binary",
                    "example": "652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF"
                },
                "message_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.MsgType"
                    },
                    "example": [
                        "MsgSend",
                        "MsgUnjail"
                    ]
                },
                "messages_count": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_celenium-io_celestia-indexer_internal_storage_types.Status"
                        }
                    ],
                    "example": "success"
                }
            }
        },
        "responses.Undelegation": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string",
                    "example": "0.1"
                },
                "completion_time": {
                    "type": "string",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "delegator": {
                    "type": "string",
                    "example": "celestia1jc92qdnty48pafummfr8ava2tjtuhfdw774w60"
                },
                "height": {
                    "type": "integer",
                    "example": 100
                },
                "time": {
                    "type": "string",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "validator": {
                    "$ref": "#/definitions/responses.ShortValidator"
                }
            }
        },
        "responses.Validator": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "celestiavaloper1un77nfm6axkhkupe8fk4xl6fd4adz3y59fucpu"
                },
                "commissions": {
                    "type": "string",
                    "example": "1"
                },
                "cons_address": {
                    "type": "string",
                    "example": "E641C7A2C964833E556AEF934FBF166B712874B6"
                },
                "contacts": {
                    "type": "string",
                    "example": "security@0xfury.com"
                },
                "delegator": {
                    "type": "string",
                    "example": "celestia1un77nfm6axkhkupe8fk4xl6fd4adz3y5qk7ph6"
                },
                "details": {
                    "type": "string",
                    "example": "Some long text about validator"
                },
                "id": {
                    "type": "integer",
                    "example": 321
                },
                "identity": {
                    "type": "string",
                    "example": "2C877AC873132C91"
                },
                "jailed": {
                    "type": "boolean",
                    "example": false
                },
                "max_change_rate": {
                    "type": "string",
                    "example": "0.01"
                },
                "max_rate": {
                    "type": "string",
                    "example": "0.1"
                },
                "min_self_delegation": {
                    "type": "string",
                    "example": "1"
                },
                "moniker": {
                    "type": "string",
                    "example": "Easy 2 Stake"
                },
                "rate": {
                    "type": "string",
                    "example": "0.03"
                },
                "rewards": {
                    "type": "string",
                    "example": "1"
                },
                "stake": {
                    "type": "string",
                    "example": "1"
                },
                "voting_power": {
                    "type": "string",
                    "example": "1"
                },
                "website": {
                    "type": "string",
                    "example": "https://www.easy2stake.com/"
                }
            }
        },
        "responses.ValidatorCount": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "integer",
                    "example": 100
                },
                "inactive": {
                    "type": "integer",
                    "example": 100
                },
                "jailed": {
                    "type": "integer",
                    "example": 100
                },
                "total": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "responses.ValidatorUptime": {
            "type": "object",
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.SignedBlocks"
                    }
                },
                "uptime": {
                    "type": "string",
                    "example": "0.97"
                }
            }
        },
        "responses.Vesting": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string",
                    "format": "string",
                    "example": "123.13333"
                },
                "end_time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "hash": {
                    "type": "string",
                    "format": "binary",
                    "example": "652452A670018D629CC116E510BA88C1CABE061336661B1F3D206D248BD558AF"
                },
                "height": {
                    "type": "integer",
                    "format": "integer",
                    "example": 100
                },
                "id": {
                    "type": "integer",
                    "format": "integer",
                    "example": 12
                },
                "start_time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                },
                "type": {
                    "type": "string",
                    "format": "string",
                    "example": "delayed"
                }
            }
        },
        "responses.VestingPeriod": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string",
                    "format": "string",
                    "example": "123.13333"
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-07-04T03:10:57+00:00"
                }
            }
        },
        "types.EventType": {
            "type": "string",
            "enum": [
                "unknown",
                "coin_received",
                "coinbase",
                "coin_spent",
                "burn",
                "mint",
                "message",
                "proposer_reward",
                "rewards",
                "commission",
                "liveness",
                "transfer",
                "celestia.blob.v1.EventPayForBlobs",
                "redelegate",
                "AttestationRequest",
                "withdraw_rewards",
                "withdraw_commission",
                "set_withdraw_address",
                "create_validator",
                "delegate",
                "edit_validator",
                "unbond",
                "tx",
                "complete_redelegation",
                "complete_unbonding",
                "use_feegrant",
                "revoke_feegrant",
                "set_feegrant",
                "update_feegrant",
                "slash",
                "proposal_vote",
                "proposal_deposit",
                "submit_proposal",
                "cosmos.authz.v1beta1.EventGrant",
                "send_packet",
                "ibc_transfer",
                "fungible_token_packet",
                "acknowledge_packet",
                "create_client",
                "update_client",
                "connection_open_try",
                "connection_open_init",
                "connection_open_confirm",
                "connection_open_ack",
                "channel_open_try",
                "channel_open_init",
                "channel_open_confirm",
                "channel_open_ack",
                "recv_packet",
                "write_acknowledgement",
                "timeout",
                "timeout_packet",
                "cosmos.authz.v1beta1.EventRevoke",
                "cosmos.authz.v1.EventRevoke",
                "cancel_unbonding_delegation",
                "active_proposal",
                "inactive_proposal",
                "ics27_packet",
                "channel_close_confirm"
            ],
            "x-enum-varnames": [
                "EventTypeUnknown",
                "EventTypeCoinReceived",
                "EventTypeCoinbase",
                "EventTypeCoinSpent",
                "EventTypeBurn",
                "EventTypeMint",
                "EventTypeMessage",
                "EventTypeProposerReward",
                "EventTypeRewards",
                "EventTypeCommission",
                "EventTypeLiveness",
                "EventTypeTransfer",
                "EventTypeCelestiablobv1EventPayForBlobs",
                "EventTypeRedelegate",
                "EventTypeAttestationRequest",
                "EventTypeWithdrawRewards",
                "EventTypeWithdrawCommission",
                "EventTypeSetWithdrawAddress",
                "EventTypeCreateValidator",
                "EventTypeDelegate",
                "EventTypeEditValidator",
                "EventTypeUnbond",
                "EventTypeTx",
                "EventTypeCompleteRedelegation",
                "EventTypeCompleteUnbonding",
                "EventTypeUseFeegrant",
                "EventTypeRevokeFeegrant",
                "EventTypeSetFeegrant",
                "EventTypeUpdateFeegrant",
                "EventTypeSlash",
                "EventTypeProposalVote",
                "EventTypeProposalDeposit",
                "EventTypeSubmitProposal",
                "EventTypeCosmosauthzv1beta1EventGrant",
                "EventTypeSendPacket",
                "EventTypeIbcTransfer",
                "EventTypeFungibleTokenPacket",
                "EventTypeAcknowledgePacket",
                "EventTypeCreateClient",
                "EventTypeUpdateClient",
                "EventTypeConnectionOpenTry",
                "EventTypeConnectionOpenInit",
                "EventTypeConnectionOpenConfirm",
                "EventTypeConnectionOpenAck",
                "EventTypeChannelOpenTry",
                "EventTypeChannelOpenInit",
                "EventTypeChannelOpenConfirm",
                "EventTypeChannelOpenAck",
                "EventTypeRecvPacket",
                "EventTypeWriteAcknowledgement",
                "EventTypeTimeout",
                "EventTypeTimeoutPacket",
                "EventTypeCosmosauthzv1beta1EventRevoke",
                "EventTypeCosmosauthzv1EventRevoke",
                "EventTypeCancelUnbondingDelegation",
                "EventTypeActiveProposal",
                "EventTypeInactiveProposal",
                "EventTypeIcs27Packet",
                "EventTypeChannelCloseConfirm"
            ]
        },
        "types.MsgAddressType": {
            "type": "string",
            "enum": [
                "validator",
                "delegator",
                "depositor",
                "validatorSrc",
                "validatorDst",
                "fromAddress",
                "toAddress",
                "input",
                "output",
                "grantee",
                "granter",
                "signer",
                "withdraw",
                "voter",
                "proposer",
                "authority",
                "sender",
                "receiver",
                "submitter",
                "admin",
                "newAdmin",
                "groupPolicyAddress",
                "executor",
                "groupMember",
                "owner",
                "relayer",
                "payee"
            ],
            "x-enum-varnames": [
                "MsgAddressTypeValidator",
                "MsgAddressTypeDelegator",
                "MsgAddressTypeDepositor",
                "MsgAddressTypeValidatorSrc",
                "MsgAddressTypeValidatorDst",
                "MsgAddressTypeFromAddress",
                "MsgAddressTypeToAddress",
                "MsgAddressTypeInput",
                "MsgAddressTypeOutput",
                "MsgAddressTypeGrantee",
                "MsgAddressTypeGranter",
                "MsgAddressTypeSigner",
                "MsgAddressTypeWithdraw",
                "MsgAddressTypeVoter",
                "MsgAddressTypeProposer",
                "MsgAddressTypeAuthority",
                "MsgAddressTypeSender",
                "MsgAddressTypeReceiver",
                "MsgAddressTypeSubmitter",
                "MsgAddressTypeAdmin",
                "MsgAddressTypeNewAdmin",
                "MsgAddressTypeGroupPolicyAddress",
                "MsgAddressTypeExecutor",
                "MsgAddressTypeGroupMember",
                "MsgAddressTypeOwner",
                "MsgAddressTypeRelayer",
                "MsgAddressTypePayee"
            ]
        },
        "types.MsgType": {
            "type": "string",
            "enum": [
                "MsgUnknown",
                "MsgSetWithdrawAddress",
                "MsgWithdrawDelegatorReward",
                "MsgWithdrawValidatorCommission",
                "MsgFundCommunityPool",
                "MsgCreateValidator",
                "MsgEditValidator",
                "MsgDelegate",
                "MsgBeginRedelegate",
                "MsgUndelegate",
                "MsgCancelUnbondingDelegation",
                "MsgUnjail",
                "MsgSend",
                "MsgMultiSend",
                "MsgCreateVestingAccount",
                "MsgCreatePermanentLockedAccount",
                "MsgCreatePeriodicVestingAccount",
                "MsgPayForBlobs",
                "MsgGrant",
                "MsgExec",
                "MsgRevoke",
                "MsgGrantAllowance",
                "MsgRevokeAllowance",
                "MsgRegisterEVMAddress",
                "MsgSubmitProposal",
                "MsgExecLegacyContent",
                "MsgVote",
                "MsgVoteWeighted",
                "MsgDeposit",
                "IBCTransfer",
                "MsgVerifyInvariant",
                "MsgSubmitEvidence",
                "MsgSendNFT",
                "MsgCreateGroup",
                "MsgUpdateGroupMembers",
                "MsgUpdateGroupAdmin",
                "MsgUpdateGroupMetadata",
                "MsgCreateGroupPolicy",
                "MsgUpdateGroupPolicyAdmin",
                "MsgCreateGroupWithPolicy",
                "MsgUpdateGroupPolicyDecisionPolicy",
                "MsgUpdateGroupPolicyMetadata",
                "MsgSubmitProposalGroup",
                "MsgWithdrawProposal",
                "MsgVoteGroup",
                "MsgExecGroup",
                "MsgLeaveGroup",
                "MsgSoftwareUpgrade",
                "MsgCancelUpgrade",
                "MsgRegisterInterchainAccount",
                "MsgSendTx",
                "MsgRegisterPayee",
                "MsgRegisterCounterpartyPayee",
                "MsgPayPacketFee",
                "MsgPayPacketFeeAsync",
                "MsgTransfer",
                "MsgCreateClient",
                "MsgUpdateClient",
                "MsgUpgradeClient",
                "MsgSubmitMisbehaviour",
                "MsgConnectionOpenInit",
                "MsgConnectionOpenTry",
                "MsgConnectionOpenAck",
                "MsgConnectionOpenConfirm",
                "MsgChannelOpenInit",
                "MsgChannelOpenTry",
                "MsgChannelOpenAck",
                "MsgChannelOpenConfirm",
                "MsgChannelCloseInit",
                "MsgChannelCloseConfirm",
                "MsgRecvPacket",
                "MsgTimeout",
                "MsgTimeoutOnClose",
                "MsgAcknowledgement"
            ],
            "x-enum-varnames": [
                "MsgUnknown",
                "MsgSetWithdrawAddress",
                "MsgWithdrawDelegatorReward",
                "MsgWithdrawValidatorCommission",
                "MsgFundCommunityPool",
                "MsgCreateValidator",
                "MsgEditValidator",
                "MsgDelegate",
                "MsgBeginRedelegate",
                "MsgUndelegate",
                "MsgCancelUnbondingDelegation",
                "MsgUnjail",
                "MsgSend",
                "MsgMultiSend",
                "MsgCreateVestingAccount",
                "MsgCreatePermanentLockedAccount",
                "MsgCreatePeriodicVestingAccount",
                "MsgPayForBlobs",
                "MsgGrant",
                "MsgExec",
                "MsgRevoke",
                "MsgGrantAllowance",
                "MsgRevokeAllowance",
                "MsgRegisterEVMAddress",
                "MsgSubmitProposal",
                "MsgExecLegacyContent",
                "MsgVote",
                "MsgVoteWeighted",
                "MsgDeposit",
                "IBCTransfer",
                "MsgVerifyInvariant",
                "MsgSubmitEvidence",
                "MsgSendNFT",
                "MsgCreateGroup",
                "MsgUpdateGroupMembers",
                "MsgUpdateGroupAdmin",
                "MsgUpdateGroupMetadata",
                "MsgCreateGroupPolicy",
                "MsgUpdateGroupPolicyAdmin",
                "MsgCreateGroupWithPolicy",
                "MsgUpdateGroupPolicyDecisionPolicy",
                "MsgUpdateGroupPolicyMetadata",
                "MsgSubmitProposalGroup",
                "MsgWithdrawProposal",
                "MsgVoteGroup",
                "MsgExecGroup",
                "MsgLeaveGroup",
                "MsgSoftwareUpgrade",
                "MsgCancelUpgrade",
                "MsgRegisterInterchainAccount",
                "MsgSendTx",
                "MsgRegisterPayee",
                "MsgRegisterCounterpartyPayee",
                "MsgPayPacketFee",
                "MsgPayPacketFeeAsync",
                "MsgTransfer",
                "MsgCreateClient",
                "MsgUpdateClient",
                "MsgUpgradeClient",
                "MsgSubmitMisbehaviour",
                "MsgConnectionOpenInit",
                "MsgConnectionOpenTry",
                "MsgConnectionOpenAck",
                "MsgConnectionOpenConfirm",
                "MsgChannelOpenInit",
                "MsgChannelOpenTry",
                "MsgChannelOpenAck",
                "MsgChannelOpenConfirm",
                "MsgChannelCloseInit",
                "MsgChannelCloseConfirm",
                "MsgRecvPacket",
                "MsgTimeout",
                "MsgTimeoutOnClose",
                "MsgAcknowledgement"
            ]
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "To authorize your requests you have to select the required tariff on our site. Then you receive api key to authorize. Api key should be passed via request header `apikey`.",
            "type": "apiKey",
            "name": "apikey",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "Full documentation",
        "url": "https://api-docs.celenium.io/"
    },
    "x-servers": [
        {
            "description": "Celenium Mainnet API",
            "url": "api-mainnet.celenium.io"
        },
        {
            "description": "Celenium Mocha API",
            "url": "api-mocha.celenium.io"
        },
        {
            "description": "Celenium Arabica API",
            "url": "api-arabica.celenium.io"
        }
    ]
}