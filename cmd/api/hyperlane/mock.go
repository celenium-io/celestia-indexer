// SPDX-FileCopyrightText: 2025 Bb Strategy Pte. Ltd. <celenium@baking-bad.org>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock.go -package=hyperlane -typed
//

// Package hyperlane is a generated GoMock package.
package hyperlane

import (
	context "context"
	reflect "reflect"

	hyperlane "github.com/celenium-io/celestia-indexer/pkg/node/hyperlane"
	gomock "go.uber.org/mock/gomock"
)

// MockIChainStore is a mock of IChainStore interface.
type MockIChainStore struct {
	ctrl     *gomock.Controller
	recorder *MockIChainStoreMockRecorder
	isgomock struct{}
}

// MockIChainStoreMockRecorder is the mock recorder for MockIChainStore.
type MockIChainStoreMockRecorder struct {
	mock *MockIChainStore
}

// NewMockIChainStore creates a new mock instance.
func NewMockIChainStore(ctrl *gomock.Controller) *MockIChainStore {
	mock := &MockIChainStore{ctrl: ctrl}
	mock.recorder = &MockIChainStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChainStore) EXPECT() *MockIChainStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIChainStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIChainStoreMockRecorder) Close() *MockIChainStoreCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIChainStore)(nil).Close))
	return &MockIChainStoreCloseCall{Call: call}
}

// MockIChainStoreCloseCall wrap *gomock.Call
type MockIChainStoreCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIChainStoreCloseCall) Return(arg0 error) *MockIChainStoreCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIChainStoreCloseCall) Do(f func() error) *MockIChainStoreCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIChainStoreCloseCall) DoAndReturn(f func() error) *MockIChainStoreCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockIChainStore) Get(domainId uint64) (hyperlane.ChainMetadata, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", domainId)
	ret0, _ := ret[0].(hyperlane.ChainMetadata)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIChainStoreMockRecorder) Get(domainId any) *MockIChainStoreGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIChainStore)(nil).Get), domainId)
	return &MockIChainStoreGetCall{Call: call}
}

// MockIChainStoreGetCall wrap *gomock.Call
type MockIChainStoreGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIChainStoreGetCall) Return(arg0 hyperlane.ChainMetadata, arg1 bool) *MockIChainStoreGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIChainStoreGetCall) Do(f func(uint64) (hyperlane.ChainMetadata, bool)) *MockIChainStoreGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIChainStoreGetCall) DoAndReturn(f func(uint64) (hyperlane.ChainMetadata, bool)) *MockIChainStoreGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Set mocks base method.
func (m *MockIChainStore) Set(metadata map[uint64]hyperlane.ChainMetadata) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", metadata)
}

// Set indicates an expected call of Set.
func (mr *MockIChainStoreMockRecorder) Set(metadata any) *MockIChainStoreSetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIChainStore)(nil).Set), metadata)
	return &MockIChainStoreSetCall{Call: call}
}

// MockIChainStoreSetCall wrap *gomock.Call
type MockIChainStoreSetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIChainStoreSetCall) Return() *MockIChainStoreSetCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIChainStoreSetCall) Do(f func(map[uint64]hyperlane.ChainMetadata)) *MockIChainStoreSetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIChainStoreSetCall) DoAndReturn(f func(map[uint64]hyperlane.ChainMetadata)) *MockIChainStoreSetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Start mocks base method.
func (m *MockIChainStore) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockIChainStoreMockRecorder) Start(ctx any) *MockIChainStoreStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIChainStore)(nil).Start), ctx)
	return &MockIChainStoreStartCall{Call: call}
}

// MockIChainStoreStartCall wrap *gomock.Call
type MockIChainStoreStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIChainStoreStartCall) Return() *MockIChainStoreStartCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIChainStoreStartCall) Do(f func(context.Context)) *MockIChainStoreStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIChainStoreStartCall) DoAndReturn(f func(context.Context)) *MockIChainStoreStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
