// SPDX-FileCopyrightText: 2025 PK Lab AG <celenium@baking-bad.org>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock.go -package=gas -typed
//

// Package gas is a generated GoMock package.
package gas

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockITracker is a mock of ITracker interface.
type MockITracker struct {
	ctrl     *gomock.Controller
	recorder *MockITrackerMockRecorder
}

// MockITrackerMockRecorder is the mock recorder for MockITracker.
type MockITrackerMockRecorder struct {
	mock *MockITracker
}

// NewMockITracker creates a new mock instance.
func NewMockITracker(ctrl *gomock.Controller) *MockITracker {
	mock := &MockITracker{ctrl: ctrl}
	mock.recorder = &MockITrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITracker) EXPECT() *MockITrackerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockITracker) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockITrackerMockRecorder) Close() *MockITrackerCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockITracker)(nil).Close))
	return &MockITrackerCloseCall{Call: call}
}

// MockITrackerCloseCall wrap *gomock.Call
type MockITrackerCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITrackerCloseCall) Return(arg0 error) *MockITrackerCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITrackerCloseCall) Do(f func() error) *MockITrackerCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITrackerCloseCall) DoAndReturn(f func() error) *MockITrackerCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Init mocks base method.
func (m *MockITracker) Init(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockITrackerMockRecorder) Init(ctx any) *MockITrackerInitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockITracker)(nil).Init), ctx)
	return &MockITrackerInitCall{Call: call}
}

// MockITrackerInitCall wrap *gomock.Call
type MockITrackerInitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITrackerInitCall) Return(arg0 error) *MockITrackerInitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITrackerInitCall) Do(f func(context.Context) error) *MockITrackerInitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITrackerInitCall) DoAndReturn(f func(context.Context) error) *MockITrackerInitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Start mocks base method.
func (m *MockITracker) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockITrackerMockRecorder) Start(ctx any) *MockITrackerStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockITracker)(nil).Start), ctx)
	return &MockITrackerStartCall{Call: call}
}

// MockITrackerStartCall wrap *gomock.Call
type MockITrackerStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITrackerStartCall) Return() *MockITrackerStartCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITrackerStartCall) Do(f func(context.Context)) *MockITrackerStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITrackerStartCall) DoAndReturn(f func(context.Context)) *MockITrackerStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// State mocks base method.
func (m *MockITracker) State() GasPrice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(GasPrice)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockITrackerMockRecorder) State() *MockITrackerStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockITracker)(nil).State))
	return &MockITrackerStateCall{Call: call}
}

// MockITrackerStateCall wrap *gomock.Call
type MockITrackerStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITrackerStateCall) Return(arg0 GasPrice) *MockITrackerStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITrackerStateCall) Do(f func() GasPrice) *MockITrackerStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITrackerStateCall) DoAndReturn(f func() GasPrice) *MockITrackerStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubscribeOnCompute mocks base method.
func (m *MockITracker) SubscribeOnCompute(handler ComputeHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeOnCompute", handler)
}

// SubscribeOnCompute indicates an expected call of SubscribeOnCompute.
func (mr *MockITrackerMockRecorder) SubscribeOnCompute(handler any) *MockITrackerSubscribeOnComputeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeOnCompute", reflect.TypeOf((*MockITracker)(nil).SubscribeOnCompute), handler)
	return &MockITrackerSubscribeOnComputeCall{Call: call}
}

// MockITrackerSubscribeOnComputeCall wrap *gomock.Call
type MockITrackerSubscribeOnComputeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITrackerSubscribeOnComputeCall) Return() *MockITrackerSubscribeOnComputeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITrackerSubscribeOnComputeCall) Do(f func(ComputeHandler)) *MockITrackerSubscribeOnComputeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITrackerSubscribeOnComputeCall) DoAndReturn(f func(ComputeHandler)) *MockITrackerSubscribeOnComputeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
