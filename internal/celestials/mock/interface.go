// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock/interface.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	celestials "github.com/celenium-io/celestia-indexer/internal/celestials"
	gomock "go.uber.org/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// Changes mocks base method.
func (m *MockAPI) Changes(ctx context.Context, chainId string, opts ...celestials.ChangeOption) (celestials.Changes, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, chainId}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Changes", varargs...)
	ret0, _ := ret[0].(celestials.Changes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Changes indicates an expected call of Changes.
func (mr *MockAPIMockRecorder) Changes(ctx, chainId any, opts ...any) *MockAPIChangesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, chainId}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockAPI)(nil).Changes), varargs...)
	return &MockAPIChangesCall{Call: call}
}

// MockAPIChangesCall wrap *gomock.Call
type MockAPIChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIChangesCall) Return(arg0 celestials.Changes, arg1 error) *MockAPIChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIChangesCall) Do(f func(context.Context, string, ...celestials.ChangeOption) (celestials.Changes, error)) *MockAPIChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIChangesCall) DoAndReturn(f func(context.Context, string, ...celestials.ChangeOption) (celestials.Changes, error)) *MockAPIChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
