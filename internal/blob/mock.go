// SPDX-FileCopyrightText: 2025 Bb Strategy Pte. Ltd. <celenium@baking-bad.org>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source=storage.go -destination=mock.go -package=blob -typed
//

// Package blob is a generated GoMock package.
package blob

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Head mocks base method.
func (m *MockStorage) Head(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockStorageMockRecorder) Head(ctx any) *MockStorageHeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockStorage)(nil).Head), ctx)
	return &MockStorageHeadCall{Call: call}
}

// MockStorageHeadCall wrap *gomock.Call
type MockStorageHeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageHeadCall) Return(arg0 uint64, arg1 error) *MockStorageHeadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageHeadCall) Do(f func(context.Context) (uint64, error)) *MockStorageHeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageHeadCall) DoAndReturn(f func(context.Context) (uint64, error)) *MockStorageHeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m *MockStorage) Save(ctx context.Context, blob Blob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, blob)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStorageMockRecorder) Save(ctx, blob any) *MockStorageSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorage)(nil).Save), ctx, blob)
	return &MockStorageSaveCall{Call: call}
}

// MockStorageSaveCall wrap *gomock.Call
type MockStorageSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageSaveCall) Return(arg0 error) *MockStorageSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageSaveCall) Do(f func(context.Context, Blob) error) *MockStorageSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageSaveCall) DoAndReturn(f func(context.Context, Blob) error) *MockStorageSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveBulk mocks base method.
func (m *MockStorage) SaveBulk(ctx context.Context, blobs []Blob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBulk", ctx, blobs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBulk indicates an expected call of SaveBulk.
func (mr *MockStorageMockRecorder) SaveBulk(ctx, blobs any) *MockStorageSaveBulkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBulk", reflect.TypeOf((*MockStorage)(nil).SaveBulk), ctx, blobs)
	return &MockStorageSaveBulkCall{Call: call}
}

// MockStorageSaveBulkCall wrap *gomock.Call
type MockStorageSaveBulkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageSaveBulkCall) Return(arg0 error) *MockStorageSaveBulkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageSaveBulkCall) Do(f func(context.Context, []Blob) error) *MockStorageSaveBulkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageSaveBulkCall) DoAndReturn(f func(context.Context, []Blob) error) *MockStorageSaveBulkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateHead mocks base method.
func (m *MockStorage) UpdateHead(ctx context.Context, head uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHead", ctx, head)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHead indicates an expected call of UpdateHead.
func (mr *MockStorageMockRecorder) UpdateHead(ctx, head any) *MockStorageUpdateHeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHead", reflect.TypeOf((*MockStorage)(nil).UpdateHead), ctx, head)
	return &MockStorageUpdateHeadCall{Call: call}
}

// MockStorageUpdateHeadCall wrap *gomock.Call
type MockStorageUpdateHeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageUpdateHeadCall) Return(arg0 error) *MockStorageUpdateHeadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageUpdateHeadCall) Do(f func(context.Context, uint64) error) *MockStorageUpdateHeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageUpdateHeadCall) DoAndReturn(f func(context.Context, uint64) error) *MockStorageUpdateHeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
