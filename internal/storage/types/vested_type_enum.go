// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.7
// Revision: bf63e108589bbd2327b13ec2c5da532aad234029
// Build Date: 2023-07-25T23:27:55Z
// Built By: goreleaser

package types

import (
	"database/sql/driver"
	"errors"
	"fmt"
)

const (
	// VestingTypeDelayed is a VestingType of type delayed.
	VestingTypeDelayed VestingType = "delayed"
	// VestingTypePeriodic is a VestingType of type periodic.
	VestingTypePeriodic VestingType = "periodic"
	// VestingTypePermanent is a VestingType of type permanent.
	VestingTypePermanent VestingType = "permanent"
	// VestingTypeContinuous is a VestingType of type continuous.
	VestingTypeContinuous VestingType = "continuous"
)

var ErrInvalidVestingType = errors.New("not a valid VestingType")

// VestingTypeValues returns a list of the values for VestingType
func VestingTypeValues() []VestingType {
	return []VestingType{
		VestingTypeDelayed,
		VestingTypePeriodic,
		VestingTypePermanent,
		VestingTypeContinuous,
	}
}

// String implements the Stringer interface.
func (x VestingType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x VestingType) IsValid() bool {
	_, err := ParseVestingType(string(x))
	return err == nil
}

var _VestingTypeValue = map[string]VestingType{
	"delayed":    VestingTypeDelayed,
	"periodic":   VestingTypePeriodic,
	"permanent":  VestingTypePermanent,
	"continuous": VestingTypeContinuous,
}

// ParseVestingType attempts to convert a string to a VestingType.
func ParseVestingType(name string) (VestingType, error) {
	if x, ok := _VestingTypeValue[name]; ok {
		return x, nil
	}
	return VestingType(""), fmt.Errorf("%s is %w", name, ErrInvalidVestingType)
}

// MarshalText implements the text marshaller method.
func (x VestingType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *VestingType) UnmarshalText(text []byte) error {
	tmp, err := ParseVestingType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errVestingTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *VestingType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = VestingType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseVestingType(v)
	case []byte:
		*x, err = ParseVestingType(string(v))
	case VestingType:
		*x = v
	case *VestingType:
		if v == nil {
			return errVestingTypeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errVestingTypeNilPtr
		}
		*x, err = ParseVestingType(*v)
	default:
		return errors.New("invalid type for VestingType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x VestingType) Value() (driver.Value, error) {
	return x.String(), nil
}
