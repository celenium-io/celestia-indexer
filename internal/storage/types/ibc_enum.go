// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.7
// Revision: bf63e108589bbd2327b13ec2c5da532aad234029
// Build Date: 2023-07-25T23:27:55Z
// Built By: goreleaser

package types

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// IbcChannelStatusInitialization is a IbcChannelStatus of type initialization.
	IbcChannelStatusInitialization IbcChannelStatus = "initialization"
	// IbcChannelStatusOpened is a IbcChannelStatus of type opened.
	IbcChannelStatusOpened IbcChannelStatus = "opened"
	// IbcChannelStatusClosed is a IbcChannelStatus of type closed.
	IbcChannelStatusClosed IbcChannelStatus = "closed"
)

var ErrInvalidIbcChannelStatus = fmt.Errorf("not a valid IbcChannelStatus, try [%s]", strings.Join(_IbcChannelStatusNames, ", "))

var _IbcChannelStatusNames = []string{
	string(IbcChannelStatusInitialization),
	string(IbcChannelStatusOpened),
	string(IbcChannelStatusClosed),
}

// IbcChannelStatusNames returns a list of possible string values of IbcChannelStatus.
func IbcChannelStatusNames() []string {
	tmp := make([]string, len(_IbcChannelStatusNames))
	copy(tmp, _IbcChannelStatusNames)
	return tmp
}

// IbcChannelStatusValues returns a list of the values for IbcChannelStatus
func IbcChannelStatusValues() []IbcChannelStatus {
	return []IbcChannelStatus{
		IbcChannelStatusInitialization,
		IbcChannelStatusOpened,
		IbcChannelStatusClosed,
	}
}

// String implements the Stringer interface.
func (x IbcChannelStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x IbcChannelStatus) IsValid() bool {
	_, err := ParseIbcChannelStatus(string(x))
	return err == nil
}

var _IbcChannelStatusValue = map[string]IbcChannelStatus{
	"initialization": IbcChannelStatusInitialization,
	"opened":         IbcChannelStatusOpened,
	"closed":         IbcChannelStatusClosed,
}

// ParseIbcChannelStatus attempts to convert a string to a IbcChannelStatus.
func ParseIbcChannelStatus(name string) (IbcChannelStatus, error) {
	if x, ok := _IbcChannelStatusValue[name]; ok {
		return x, nil
	}
	return IbcChannelStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidIbcChannelStatus)
}

// MarshalText implements the text marshaller method.
func (x IbcChannelStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *IbcChannelStatus) UnmarshalText(text []byte) error {
	tmp, err := ParseIbcChannelStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errIbcChannelStatusNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *IbcChannelStatus) Scan(value interface{}) (err error) {
	if value == nil {
		*x = IbcChannelStatus("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseIbcChannelStatus(v)
	case []byte:
		*x, err = ParseIbcChannelStatus(string(v))
	case IbcChannelStatus:
		*x = v
	case *IbcChannelStatus:
		if v == nil {
			return errIbcChannelStatusNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errIbcChannelStatusNilPtr
		}
		*x, err = ParseIbcChannelStatus(*v)
	default:
		return errors.New("invalid type for IbcChannelStatus")
	}

	return
}

// Value implements the driver Valuer interface.
func (x IbcChannelStatus) Value() (driver.Value, error) {
	return x.String(), nil
}
