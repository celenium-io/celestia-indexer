// Code generated by MockGen. DO NOT EDIT.
// Source: hl_igp_config.go
//
// Generated by this command:
//
//	mockgen -source=hl_igp_config.go -destination=mock/hl_igp_config.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIHLIGPConfig is a mock of IHLIGPConfig interface.
type MockIHLIGPConfig struct {
	ctrl     *gomock.Controller
	recorder *MockIHLIGPConfigMockRecorder
	isgomock struct{}
}

// MockIHLIGPConfigMockRecorder is the mock recorder for MockIHLIGPConfig.
type MockIHLIGPConfigMockRecorder struct {
	mock *MockIHLIGPConfig
}

// NewMockIHLIGPConfig creates a new mock instance.
func NewMockIHLIGPConfig(ctrl *gomock.Controller) *MockIHLIGPConfig {
	mock := &MockIHLIGPConfig{ctrl: ctrl}
	mock.recorder = &MockIHLIGPConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHLIGPConfig) EXPECT() *MockIHLIGPConfigMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockIHLIGPConfig) List(ctx context.Context, limit, offset int) ([]storage.HLIGPConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]storage.HLIGPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIHLIGPConfigMockRecorder) List(ctx, limit, offset any) *MockIHLIGPConfigListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIHLIGPConfig)(nil).List), ctx, limit, offset)
	return &MockIHLIGPConfigListCall{Call: call}
}

// MockIHLIGPConfigListCall wrap *gomock.Call
type MockIHLIGPConfigListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIHLIGPConfigListCall) Return(arg0 []storage.HLIGPConfig, arg1 error) *MockIHLIGPConfigListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIHLIGPConfigListCall) Do(f func(context.Context, int, int) ([]storage.HLIGPConfig, error)) *MockIHLIGPConfigListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIHLIGPConfigListCall) DoAndReturn(f func(context.Context, int, int) ([]storage.HLIGPConfig, error)) *MockIHLIGPConfigListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
