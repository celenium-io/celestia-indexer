// SPDX-FileCopyrightText: 2025 PK Lab AG <celenium@baking-bad.org>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: grant.go
//
// Generated by this command:
//
//	mockgen -source=grant.go -destination=mock/grant.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIGrant is a mock of IGrant interface.
type MockIGrant struct {
	ctrl     *gomock.Controller
	recorder *MockIGrantMockRecorder
}

// MockIGrantMockRecorder is the mock recorder for MockIGrant.
type MockIGrantMockRecorder struct {
	mock *MockIGrant
}

// NewMockIGrant creates a new mock instance.
func NewMockIGrant(ctrl *gomock.Controller) *MockIGrant {
	mock := &MockIGrant{ctrl: ctrl}
	mock.recorder = &MockIGrantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGrant) EXPECT() *MockIGrantMockRecorder {
	return m.recorder
}

// ByGrantee mocks base method.
func (m *MockIGrant) ByGrantee(ctx context.Context, id uint64, limit, offset int) ([]storage.Grant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByGrantee", ctx, id, limit, offset)
	ret0, _ := ret[0].([]storage.Grant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByGrantee indicates an expected call of ByGrantee.
func (mr *MockIGrantMockRecorder) ByGrantee(ctx, id, limit, offset any) *MockIGrantByGranteeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByGrantee", reflect.TypeOf((*MockIGrant)(nil).ByGrantee), ctx, id, limit, offset)
	return &MockIGrantByGranteeCall{Call: call}
}

// MockIGrantByGranteeCall wrap *gomock.Call
type MockIGrantByGranteeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIGrantByGranteeCall) Return(arg0 []storage.Grant, arg1 error) *MockIGrantByGranteeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIGrantByGranteeCall) Do(f func(context.Context, uint64, int, int) ([]storage.Grant, error)) *MockIGrantByGranteeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIGrantByGranteeCall) DoAndReturn(f func(context.Context, uint64, int, int) ([]storage.Grant, error)) *MockIGrantByGranteeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ByGranter mocks base method.
func (m *MockIGrant) ByGranter(ctx context.Context, id uint64, limit, offset int) ([]storage.Grant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByGranter", ctx, id, limit, offset)
	ret0, _ := ret[0].([]storage.Grant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByGranter indicates an expected call of ByGranter.
func (mr *MockIGrantMockRecorder) ByGranter(ctx, id, limit, offset any) *MockIGrantByGranterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByGranter", reflect.TypeOf((*MockIGrant)(nil).ByGranter), ctx, id, limit, offset)
	return &MockIGrantByGranterCall{Call: call}
}

// MockIGrantByGranterCall wrap *gomock.Call
type MockIGrantByGranterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIGrantByGranterCall) Return(arg0 []storage.Grant, arg1 error) *MockIGrantByGranterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIGrantByGranterCall) Do(f func(context.Context, uint64, int, int) ([]storage.Grant, error)) *MockIGrantByGranterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIGrantByGranterCall) DoAndReturn(f func(context.Context, uint64, int, int) ([]storage.Grant, error)) *MockIGrantByGranterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CursorList mocks base method.
func (m *MockIGrant) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Grant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Grant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIGrantMockRecorder) CursorList(ctx, id, limit, order, cmp any) *MockIGrantCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIGrant)(nil).CursorList), ctx, id, limit, order, cmp)
	return &MockIGrantCursorListCall{Call: call}
}

// MockIGrantCursorListCall wrap *gomock.Call
type MockIGrantCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIGrantCursorListCall) Return(arg0 []*storage.Grant, arg1 error) *MockIGrantCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIGrantCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Grant, error)) *MockIGrantCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIGrantCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Grant, error)) *MockIGrantCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIGrant) GetByID(ctx context.Context, id uint64) (*storage.Grant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Grant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIGrantMockRecorder) GetByID(ctx, id any) *MockIGrantGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIGrant)(nil).GetByID), ctx, id)
	return &MockIGrantGetByIDCall{Call: call}
}

// MockIGrantGetByIDCall wrap *gomock.Call
type MockIGrantGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIGrantGetByIDCall) Return(arg0 *storage.Grant, arg1 error) *MockIGrantGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIGrantGetByIDCall) Do(f func(context.Context, uint64) (*storage.Grant, error)) *MockIGrantGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIGrantGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Grant, error)) *MockIGrantGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIGrant) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIGrantMockRecorder) IsNoRows(err any) *MockIGrantIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIGrant)(nil).IsNoRows), err)
	return &MockIGrantIsNoRowsCall{Call: call}
}

// MockIGrantIsNoRowsCall wrap *gomock.Call
type MockIGrantIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIGrantIsNoRowsCall) Return(arg0 bool) *MockIGrantIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIGrantIsNoRowsCall) Do(f func(error) bool) *MockIGrantIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIGrantIsNoRowsCall) DoAndReturn(f func(error) bool) *MockIGrantIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIGrant) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIGrantMockRecorder) LastID(ctx any) *MockIGrantLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIGrant)(nil).LastID), ctx)
	return &MockIGrantLastIDCall{Call: call}
}

// MockIGrantLastIDCall wrap *gomock.Call
type MockIGrantLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIGrantLastIDCall) Return(arg0 uint64, arg1 error) *MockIGrantLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIGrantLastIDCall) Do(f func(context.Context) (uint64, error)) *MockIGrantLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIGrantLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *MockIGrantLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIGrant) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Grant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Grant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIGrantMockRecorder) List(ctx, limit, offset, order any) *MockIGrantListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIGrant)(nil).List), ctx, limit, offset, order)
	return &MockIGrantListCall{Call: call}
}

// MockIGrantListCall wrap *gomock.Call
type MockIGrantListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIGrantListCall) Return(arg0 []*storage.Grant, arg1 error) *MockIGrantListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIGrantListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Grant, error)) *MockIGrantListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIGrantListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Grant, error)) *MockIGrantListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIGrant) Save(ctx context.Context, m *storage.Grant) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIGrantMockRecorder) Save(ctx, m any) *MockIGrantSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIGrant)(nil).Save), ctx, m)
	return &MockIGrantSaveCall{Call: call}
}

// MockIGrantSaveCall wrap *gomock.Call
type MockIGrantSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIGrantSaveCall) Return(arg0 error) *MockIGrantSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIGrantSaveCall) Do(f func(context.Context, *storage.Grant) error) *MockIGrantSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIGrantSaveCall) DoAndReturn(f func(context.Context, *storage.Grant) error) *MockIGrantSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIGrant) Update(ctx context.Context, m *storage.Grant) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIGrantMockRecorder) Update(ctx, m any) *MockIGrantUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIGrant)(nil).Update), ctx, m)
	return &MockIGrantUpdateCall{Call: call}
}

// MockIGrantUpdateCall wrap *gomock.Call
type MockIGrantUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIGrantUpdateCall) Return(arg0 error) *MockIGrantUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIGrantUpdateCall) Do(f func(context.Context, *storage.Grant) error) *MockIGrantUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIGrantUpdateCall) DoAndReturn(f func(context.Context, *storage.Grant) error) *MockIGrantUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
