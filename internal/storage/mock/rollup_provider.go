// Code generated by MockGen. DO NOT EDIT.
// Source: rollup_provider.go
//
// Generated by this command:
//
//	mockgen -source=rollup_provider.go -destination=mock/rollup_provider.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIRollupProvider is a mock of IRollupProvider interface.
type MockIRollupProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIRollupProviderMockRecorder
}

// MockIRollupProviderMockRecorder is the mock recorder for MockIRollupProvider.
type MockIRollupProviderMockRecorder struct {
	mock *MockIRollupProvider
}

// NewMockIRollupProvider creates a new mock instance.
func NewMockIRollupProvider(ctrl *gomock.Controller) *MockIRollupProvider {
	mock := &MockIRollupProvider{ctrl: ctrl}
	mock.recorder = &MockIRollupProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRollupProvider) EXPECT() *MockIRollupProviderMockRecorder {
	return m.recorder
}

// ByRollupId mocks base method.
func (m *MockIRollupProvider) ByRollupId(ctx context.Context, rollupId uint64) ([]storage.RollupProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByRollupId", ctx, rollupId)
	ret0, _ := ret[0].([]storage.RollupProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByRollupId indicates an expected call of ByRollupId.
func (mr *MockIRollupProviderMockRecorder) ByRollupId(ctx, rollupId any) *MockIRollupProviderByRollupIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByRollupId", reflect.TypeOf((*MockIRollupProvider)(nil).ByRollupId), ctx, rollupId)
	return &MockIRollupProviderByRollupIdCall{Call: call}
}

// MockIRollupProviderByRollupIdCall wrap *gomock.Call
type MockIRollupProviderByRollupIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIRollupProviderByRollupIdCall) Return(arg0 []storage.RollupProvider, arg1 error) *MockIRollupProviderByRollupIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIRollupProviderByRollupIdCall) Do(f func(context.Context, uint64) ([]storage.RollupProvider, error)) *MockIRollupProviderByRollupIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIRollupProviderByRollupIdCall) DoAndReturn(f func(context.Context, uint64) ([]storage.RollupProvider, error)) *MockIRollupProviderByRollupIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
