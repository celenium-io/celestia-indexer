// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: hl_transfer.go
//
// Generated by this command:
//
//	mockgen -source=hl_transfer.go -destination=mock/hl_transfer.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIHLTransfer is a mock of IHLTransfer interface.
type MockIHLTransfer struct {
	ctrl     *gomock.Controller
	recorder *MockIHLTransferMockRecorder
}

// MockIHLTransferMockRecorder is the mock recorder for MockIHLTransfer.
type MockIHLTransferMockRecorder struct {
	mock *MockIHLTransfer
}

// NewMockIHLTransfer creates a new mock instance.
func NewMockIHLTransfer(ctrl *gomock.Controller) *MockIHLTransfer {
	mock := &MockIHLTransfer{ctrl: ctrl}
	mock.recorder = &MockIHLTransferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHLTransfer) EXPECT() *MockIHLTransferMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockIHLTransfer) List(ctx context.Context, filters storage.ListHyperlaneTransfers) ([]storage.HLTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filters)
	ret0, _ := ret[0].([]storage.HLTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIHLTransferMockRecorder) List(ctx, filters any) *MockIHLTransferListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIHLTransfer)(nil).List), ctx, filters)
	return &MockIHLTransferListCall{Call: call}
}

// MockIHLTransferListCall wrap *gomock.Call
type MockIHLTransferListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIHLTransferListCall) Return(arg0 []storage.HLTransfer, arg1 error) *MockIHLTransferListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIHLTransferListCall) Do(f func(context.Context, storage.ListHyperlaneTransfers) ([]storage.HLTransfer, error)) *MockIHLTransferListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIHLTransferListCall) DoAndReturn(f func(context.Context, storage.ListHyperlaneTransfers) ([]storage.HLTransfer, error)) *MockIHLTransferListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
