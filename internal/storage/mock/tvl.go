// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: tvl.go
//
// Generated by this command:
//
//	mockgen -source=tvl.go -destination=mock/tvl.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockITvl is a mock of ITvl interface.
type MockITvl struct {
	ctrl     *gomock.Controller
	recorder *MockITvlMockRecorder
	isgomock struct{}
}

// MockITvlMockRecorder is the mock recorder for MockITvl.
type MockITvlMockRecorder struct {
	mock *MockITvl
}

// NewMockITvl creates a new mock instance.
func NewMockITvl(ctrl *gomock.Controller) *MockITvl {
	mock := &MockITvl{ctrl: ctrl}
	mock.recorder = &MockITvlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITvl) EXPECT() *MockITvlMockRecorder {
	return m.recorder
}

// LastSyncTime mocks base method.
func (m *MockITvl) LastSyncTime(ctx context.Context) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSyncTime", ctx)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastSyncTime indicates an expected call of LastSyncTime.
func (mr *MockITvlMockRecorder) LastSyncTime(ctx any) *MockITvlLastSyncTimeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSyncTime", reflect.TypeOf((*MockITvl)(nil).LastSyncTime), ctx)
	return &MockITvlLastSyncTimeCall{Call: call}
}

// MockITvlLastSyncTimeCall wrap *gomock.Call
type MockITvlLastSyncTimeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITvlLastSyncTimeCall) Return(arg0 time.Time, arg1 error) *MockITvlLastSyncTimeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITvlLastSyncTimeCall) Do(f func(context.Context) (time.Time, error)) *MockITvlLastSyncTimeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITvlLastSyncTimeCall) DoAndReturn(f func(context.Context) (time.Time, error)) *MockITvlLastSyncTimeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m *MockITvl) Save(ctx context.Context, rollupTvl *storage.Tvl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, rollupTvl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockITvlMockRecorder) Save(ctx, rollupTvl any) *MockITvlSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockITvl)(nil).Save), ctx, rollupTvl)
	return &MockITvlSaveCall{Call: call}
}

// MockITvlSaveCall wrap *gomock.Call
type MockITvlSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITvlSaveCall) Return(arg0 error) *MockITvlSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITvlSaveCall) Do(f func(context.Context, *storage.Tvl) error) *MockITvlSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITvlSaveCall) DoAndReturn(f func(context.Context, *storage.Tvl) error) *MockITvlSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveBulk mocks base method.
func (m *MockITvl) SaveBulk(ctx context.Context, tvls ...*storage.Tvl) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range tvls {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBulk", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBulk indicates an expected call of SaveBulk.
func (mr *MockITvlMockRecorder) SaveBulk(ctx any, tvls ...any) *MockITvlSaveBulkCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, tvls...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBulk", reflect.TypeOf((*MockITvl)(nil).SaveBulk), varargs...)
	return &MockITvlSaveBulkCall{Call: call}
}

// MockITvlSaveBulkCall wrap *gomock.Call
type MockITvlSaveBulkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITvlSaveBulkCall) Return(arg0 error) *MockITvlSaveBulkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITvlSaveBulkCall) Do(f func(context.Context, ...*storage.Tvl) error) *MockITvlSaveBulkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITvlSaveBulkCall) DoAndReturn(f func(context.Context, ...*storage.Tvl) error) *MockITvlSaveBulkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
