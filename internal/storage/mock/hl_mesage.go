// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: hl_mesage.go
//
// Generated by this command:
//
//	mockgen -source=hl_mesage.go -destination=mock/hl_mesage.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIHLMessage is a mock of IHLMessage interface.
type MockIHLMessage struct {
	ctrl     *gomock.Controller
	recorder *MockIHLMessageMockRecorder
}

// MockIHLMessageMockRecorder is the mock recorder for MockIHLMessage.
type MockIHLMessageMockRecorder struct {
	mock *MockIHLMessage
}

// NewMockIHLMessage creates a new mock instance.
func NewMockIHLMessage(ctrl *gomock.Controller) *MockIHLMessage {
	mock := &MockIHLMessage{ctrl: ctrl}
	mock.recorder = &MockIHLMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHLMessage) EXPECT() *MockIHLMessageMockRecorder {
	return m.recorder
}

// CursorList mocks base method.
func (m *MockIHLMessage) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.HLTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.HLTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIHLMessageMockRecorder) CursorList(ctx, id, limit, order, cmp any) *MockIHLMessageCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIHLMessage)(nil).CursorList), ctx, id, limit, order, cmp)
	return &MockIHLMessageCursorListCall{Call: call}
}

// MockIHLMessageCursorListCall wrap *gomock.Call
type MockIHLMessageCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIHLMessageCursorListCall) Return(arg0 []*storage.HLTransfer, arg1 error) *MockIHLMessageCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIHLMessageCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.HLTransfer, error)) *MockIHLMessageCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIHLMessageCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.HLTransfer, error)) *MockIHLMessageCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIHLMessage) GetByID(ctx context.Context, id uint64) (*storage.HLTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.HLTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIHLMessageMockRecorder) GetByID(ctx, id any) *MockIHLMessageGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIHLMessage)(nil).GetByID), ctx, id)
	return &MockIHLMessageGetByIDCall{Call: call}
}

// MockIHLMessageGetByIDCall wrap *gomock.Call
type MockIHLMessageGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIHLMessageGetByIDCall) Return(arg0 *storage.HLTransfer, arg1 error) *MockIHLMessageGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIHLMessageGetByIDCall) Do(f func(context.Context, uint64) (*storage.HLTransfer, error)) *MockIHLMessageGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIHLMessageGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.HLTransfer, error)) *MockIHLMessageGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIHLMessage) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIHLMessageMockRecorder) IsNoRows(err any) *MockIHLMessageIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIHLMessage)(nil).IsNoRows), err)
	return &MockIHLMessageIsNoRowsCall{Call: call}
}

// MockIHLMessageIsNoRowsCall wrap *gomock.Call
type MockIHLMessageIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIHLMessageIsNoRowsCall) Return(arg0 bool) *MockIHLMessageIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIHLMessageIsNoRowsCall) Do(f func(error) bool) *MockIHLMessageIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIHLMessageIsNoRowsCall) DoAndReturn(f func(error) bool) *MockIHLMessageIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIHLMessage) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIHLMessageMockRecorder) LastID(ctx any) *MockIHLMessageLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIHLMessage)(nil).LastID), ctx)
	return &MockIHLMessageLastIDCall{Call: call}
}

// MockIHLMessageLastIDCall wrap *gomock.Call
type MockIHLMessageLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIHLMessageLastIDCall) Return(arg0 uint64, arg1 error) *MockIHLMessageLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIHLMessageLastIDCall) Do(f func(context.Context) (uint64, error)) *MockIHLMessageLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIHLMessageLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *MockIHLMessageLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIHLMessage) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.HLTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.HLTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIHLMessageMockRecorder) List(ctx, limit, offset, order any) *MockIHLMessageListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIHLMessage)(nil).List), ctx, limit, offset, order)
	return &MockIHLMessageListCall{Call: call}
}

// MockIHLMessageListCall wrap *gomock.Call
type MockIHLMessageListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIHLMessageListCall) Return(arg0 []*storage.HLTransfer, arg1 error) *MockIHLMessageListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIHLMessageListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.HLTransfer, error)) *MockIHLMessageListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIHLMessageListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.HLTransfer, error)) *MockIHLMessageListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIHLMessage) Save(ctx context.Context, m *storage.HLTransfer) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIHLMessageMockRecorder) Save(ctx, m any) *MockIHLMessageSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIHLMessage)(nil).Save), ctx, m)
	return &MockIHLMessageSaveCall{Call: call}
}

// MockIHLMessageSaveCall wrap *gomock.Call
type MockIHLMessageSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIHLMessageSaveCall) Return(arg0 error) *MockIHLMessageSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIHLMessageSaveCall) Do(f func(context.Context, *storage.HLTransfer) error) *MockIHLMessageSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIHLMessageSaveCall) DoAndReturn(f func(context.Context, *storage.HLTransfer) error) *MockIHLMessageSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIHLMessage) Update(ctx context.Context, m *storage.HLTransfer) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIHLMessageMockRecorder) Update(ctx, m any) *MockIHLMessageUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIHLMessage)(nil).Update), ctx, m)
	return &MockIHLMessageUpdateCall{Call: call}
}

// MockIHLMessageUpdateCall wrap *gomock.Call
type MockIHLMessageUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIHLMessageUpdateCall) Return(arg0 error) *MockIHLMessageUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIHLMessageUpdateCall) Do(f func(context.Context, *storage.HLTransfer) error) *MockIHLMessageUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIHLMessageUpdateCall) DoAndReturn(f func(context.Context, *storage.HLTransfer) error) *MockIHLMessageUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
