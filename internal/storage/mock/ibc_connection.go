// SPDX-FileCopyrightText: 2025 Bb Strategy Pte. Ltd. <celenium@baking-bad.org>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: ibc_connection.go
//
// Generated by this command:
//
//	mockgen -source=ibc_connection.go -destination=mock/ibc_connection.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIIbcConnection is a mock of IIbcConnection interface.
type MockIIbcConnection struct {
	ctrl     *gomock.Controller
	recorder *MockIIbcConnectionMockRecorder
}

// MockIIbcConnectionMockRecorder is the mock recorder for MockIIbcConnection.
type MockIIbcConnectionMockRecorder struct {
	mock *MockIIbcConnection
}

// NewMockIIbcConnection creates a new mock instance.
func NewMockIIbcConnection(ctrl *gomock.Controller) *MockIIbcConnection {
	mock := &MockIIbcConnection{ctrl: ctrl}
	mock.recorder = &MockIIbcConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIbcConnection) EXPECT() *MockIIbcConnectionMockRecorder {
	return m.recorder
}

// ById mocks base method.
func (m *MockIIbcConnection) ById(ctx context.Context, id string) (storage.IbcConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ById", ctx, id)
	ret0, _ := ret[0].(storage.IbcConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ById indicates an expected call of ById.
func (mr *MockIIbcConnectionMockRecorder) ById(ctx, id any) *MockIIbcConnectionByIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ById", reflect.TypeOf((*MockIIbcConnection)(nil).ById), ctx, id)
	return &MockIIbcConnectionByIdCall{Call: call}
}

// MockIIbcConnectionByIdCall wrap *gomock.Call
type MockIIbcConnectionByIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIIbcConnectionByIdCall) Return(arg0 storage.IbcConnection, arg1 error) *MockIIbcConnectionByIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIIbcConnectionByIdCall) Do(f func(context.Context, string) (storage.IbcConnection, error)) *MockIIbcConnectionByIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIIbcConnectionByIdCall) DoAndReturn(f func(context.Context, string) (storage.IbcConnection, error)) *MockIIbcConnectionByIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIIbcConnection) List(ctx context.Context, fltrs storage.ListConnectionFilters) ([]storage.IbcConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, fltrs)
	ret0, _ := ret[0].([]storage.IbcConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIIbcConnectionMockRecorder) List(ctx, fltrs any) *MockIIbcConnectionListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIIbcConnection)(nil).List), ctx, fltrs)
	return &MockIIbcConnectionListCall{Call: call}
}

// MockIIbcConnectionListCall wrap *gomock.Call
type MockIIbcConnectionListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIIbcConnectionListCall) Return(arg0 []storage.IbcConnection, arg1 error) *MockIIbcConnectionListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIIbcConnectionListCall) Do(f func(context.Context, storage.ListConnectionFilters) ([]storage.IbcConnection, error)) *MockIIbcConnectionListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIIbcConnectionListCall) DoAndReturn(f func(context.Context, storage.ListConnectionFilters) ([]storage.IbcConnection, error)) *MockIIbcConnectionListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
