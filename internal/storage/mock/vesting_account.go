// Code generated by MockGen. DO NOT EDIT.
// Source: vesting_account.go
//
// Generated by this command:
//
//	mockgen -source=vesting_account.go -destination=mock/vesting_account.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIVestingAccount is a mock of IVestingAccount interface.
type MockIVestingAccount struct {
	ctrl     *gomock.Controller
	recorder *MockIVestingAccountMockRecorder
}

// MockIVestingAccountMockRecorder is the mock recorder for MockIVestingAccount.
type MockIVestingAccountMockRecorder struct {
	mock *MockIVestingAccount
}

// NewMockIVestingAccount creates a new mock instance.
func NewMockIVestingAccount(ctrl *gomock.Controller) *MockIVestingAccount {
	mock := &MockIVestingAccount{ctrl: ctrl}
	mock.recorder = &MockIVestingAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVestingAccount) EXPECT() *MockIVestingAccountMockRecorder {
	return m.recorder
}

// ByAddress mocks base method.
func (m *MockIVestingAccount) ByAddress(ctx context.Context, addressId uint64, limit, offset int, showEnded bool) ([]storage.VestingAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByAddress", ctx, addressId, limit, offset, showEnded)
	ret0, _ := ret[0].([]storage.VestingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByAddress indicates an expected call of ByAddress.
func (mr *MockIVestingAccountMockRecorder) ByAddress(ctx, addressId, limit, offset, showEnded any) *IVestingAccountByAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByAddress", reflect.TypeOf((*MockIVestingAccount)(nil).ByAddress), ctx, addressId, limit, offset, showEnded)
	return &IVestingAccountByAddressCall{Call: call}
}

// IVestingAccountByAddressCall wrap *gomock.Call
type IVestingAccountByAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IVestingAccountByAddressCall) Return(arg0 []storage.VestingAccount, arg1 error) *IVestingAccountByAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IVestingAccountByAddressCall) Do(f func(context.Context, uint64, int, int, bool) ([]storage.VestingAccount, error)) *IVestingAccountByAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IVestingAccountByAddressCall) DoAndReturn(f func(context.Context, uint64, int, int, bool) ([]storage.VestingAccount, error)) *IVestingAccountByAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CursorList mocks base method.
func (m *MockIVestingAccount) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.VestingAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.VestingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIVestingAccountMockRecorder) CursorList(ctx, id, limit, order, cmp any) *IVestingAccountCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIVestingAccount)(nil).CursorList), ctx, id, limit, order, cmp)
	return &IVestingAccountCursorListCall{Call: call}
}

// IVestingAccountCursorListCall wrap *gomock.Call
type IVestingAccountCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IVestingAccountCursorListCall) Return(arg0 []*storage.VestingAccount, arg1 error) *IVestingAccountCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IVestingAccountCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.VestingAccount, error)) *IVestingAccountCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IVestingAccountCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.VestingAccount, error)) *IVestingAccountCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIVestingAccount) GetByID(ctx context.Context, id uint64) (*storage.VestingAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.VestingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIVestingAccountMockRecorder) GetByID(ctx, id any) *IVestingAccountGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIVestingAccount)(nil).GetByID), ctx, id)
	return &IVestingAccountGetByIDCall{Call: call}
}

// IVestingAccountGetByIDCall wrap *gomock.Call
type IVestingAccountGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IVestingAccountGetByIDCall) Return(arg0 *storage.VestingAccount, arg1 error) *IVestingAccountGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IVestingAccountGetByIDCall) Do(f func(context.Context, uint64) (*storage.VestingAccount, error)) *IVestingAccountGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IVestingAccountGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.VestingAccount, error)) *IVestingAccountGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIVestingAccount) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIVestingAccountMockRecorder) IsNoRows(err any) *IVestingAccountIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIVestingAccount)(nil).IsNoRows), err)
	return &IVestingAccountIsNoRowsCall{Call: call}
}

// IVestingAccountIsNoRowsCall wrap *gomock.Call
type IVestingAccountIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IVestingAccountIsNoRowsCall) Return(arg0 bool) *IVestingAccountIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IVestingAccountIsNoRowsCall) Do(f func(error) bool) *IVestingAccountIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IVestingAccountIsNoRowsCall) DoAndReturn(f func(error) bool) *IVestingAccountIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIVestingAccount) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIVestingAccountMockRecorder) LastID(ctx any) *IVestingAccountLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIVestingAccount)(nil).LastID), ctx)
	return &IVestingAccountLastIDCall{Call: call}
}

// IVestingAccountLastIDCall wrap *gomock.Call
type IVestingAccountLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IVestingAccountLastIDCall) Return(arg0 uint64, arg1 error) *IVestingAccountLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IVestingAccountLastIDCall) Do(f func(context.Context) (uint64, error)) *IVestingAccountLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IVestingAccountLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *IVestingAccountLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIVestingAccount) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.VestingAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.VestingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIVestingAccountMockRecorder) List(ctx, limit, offset, order any) *IVestingAccountListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIVestingAccount)(nil).List), ctx, limit, offset, order)
	return &IVestingAccountListCall{Call: call}
}

// IVestingAccountListCall wrap *gomock.Call
type IVestingAccountListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IVestingAccountListCall) Return(arg0 []*storage.VestingAccount, arg1 error) *IVestingAccountListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IVestingAccountListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.VestingAccount, error)) *IVestingAccountListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IVestingAccountListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.VestingAccount, error)) *IVestingAccountListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIVestingAccount) Save(ctx context.Context, m *storage.VestingAccount) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIVestingAccountMockRecorder) Save(ctx, m any) *IVestingAccountSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIVestingAccount)(nil).Save), ctx, m)
	return &IVestingAccountSaveCall{Call: call}
}

// IVestingAccountSaveCall wrap *gomock.Call
type IVestingAccountSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IVestingAccountSaveCall) Return(arg0 error) *IVestingAccountSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IVestingAccountSaveCall) Do(f func(context.Context, *storage.VestingAccount) error) *IVestingAccountSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IVestingAccountSaveCall) DoAndReturn(f func(context.Context, *storage.VestingAccount) error) *IVestingAccountSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIVestingAccount) Update(ctx context.Context, m *storage.VestingAccount) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIVestingAccountMockRecorder) Update(ctx, m any) *IVestingAccountUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIVestingAccount)(nil).Update), ctx, m)
	return &IVestingAccountUpdateCall{Call: call}
}

// IVestingAccountUpdateCall wrap *gomock.Call
type IVestingAccountUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IVestingAccountUpdateCall) Return(arg0 error) *IVestingAccountUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IVestingAccountUpdateCall) Do(f func(context.Context, *storage.VestingAccount) error) *IVestingAccountUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IVestingAccountUpdateCall) DoAndReturn(f func(context.Context, *storage.VestingAccount) error) *IVestingAccountUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
