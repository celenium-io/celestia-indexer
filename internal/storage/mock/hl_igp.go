// SPDX-FileCopyrightText: 2025 Bb Strategy Pte. Ltd. <celenium@baking-bad.org>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: hl_igp.go
//
// Generated by this command:
//
//	mockgen -source=hl_igp.go -destination=mock/hl_igp.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIHLIGP is a mock of IHLIGP interface.
type MockIHLIGP struct {
	ctrl     *gomock.Controller
	recorder *MockIHLIGPMockRecorder
}

// MockIHLIGPMockRecorder is the mock recorder for MockIHLIGP.
type MockIHLIGPMockRecorder struct {
	mock *MockIHLIGP
}

// NewMockIHLIGP creates a new mock instance.
func NewMockIHLIGP(ctrl *gomock.Controller) *MockIHLIGP {
	mock := &MockIHLIGP{ctrl: ctrl}
	mock.recorder = &MockIHLIGPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHLIGP) EXPECT() *MockIHLIGPMockRecorder {
	return m.recorder
}

// ByHash mocks base method.
func (m *MockIHLIGP) ByHash(ctx context.Context, hash []byte) (storage.HLIGP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByHash", ctx, hash)
	ret0, _ := ret[0].(storage.HLIGP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByHash indicates an expected call of ByHash.
func (mr *MockIHLIGPMockRecorder) ByHash(ctx, hash any) *MockIHLIGPByHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByHash", reflect.TypeOf((*MockIHLIGP)(nil).ByHash), ctx, hash)
	return &MockIHLIGPByHashCall{Call: call}
}

// MockIHLIGPByHashCall wrap *gomock.Call
type MockIHLIGPByHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIHLIGPByHashCall) Return(arg0 storage.HLIGP, arg1 error) *MockIHLIGPByHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIHLIGPByHashCall) Do(f func(context.Context, []byte) (storage.HLIGP, error)) *MockIHLIGPByHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIHLIGPByHashCall) DoAndReturn(f func(context.Context, []byte) (storage.HLIGP, error)) *MockIHLIGPByHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIHLIGP) List(ctx context.Context, limit, offset int) ([]storage.HLIGP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]storage.HLIGP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIHLIGPMockRecorder) List(ctx, limit, offset any) *MockIHLIGPListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIHLIGP)(nil).List), ctx, limit, offset)
	return &MockIHLIGPListCall{Call: call}
}

// MockIHLIGPListCall wrap *gomock.Call
type MockIHLIGPListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIHLIGPListCall) Return(arg0 []storage.HLIGP, arg1 error) *MockIHLIGPListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIHLIGPListCall) Do(f func(context.Context, int, int) ([]storage.HLIGP, error)) *MockIHLIGPListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIHLIGPListCall) DoAndReturn(f func(context.Context, int, int) ([]storage.HLIGP, error)) *MockIHLIGPListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
