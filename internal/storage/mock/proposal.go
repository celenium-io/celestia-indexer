// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: proposal.go
//
// Generated by this command:
//
//	mockgen -source=proposal.go -destination=mock/proposal.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIProposal is a mock of IProposal interface.
type MockIProposal struct {
	ctrl     *gomock.Controller
	recorder *MockIProposalMockRecorder
}

// MockIProposalMockRecorder is the mock recorder for MockIProposal.
type MockIProposalMockRecorder struct {
	mock *MockIProposal
}

// NewMockIProposal creates a new mock instance.
func NewMockIProposal(ctrl *gomock.Controller) *MockIProposal {
	mock := &MockIProposal{ctrl: ctrl}
	mock.recorder = &MockIProposalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProposal) EXPECT() *MockIProposalMockRecorder {
	return m.recorder
}

// ById mocks base method.
func (m *MockIProposal) ById(ctx context.Context, id uint64) (storage.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ById", ctx, id)
	ret0, _ := ret[0].(storage.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ById indicates an expected call of ById.
func (mr *MockIProposalMockRecorder) ById(ctx, id any) *MockIProposalByIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ById", reflect.TypeOf((*MockIProposal)(nil).ById), ctx, id)
	return &MockIProposalByIdCall{Call: call}
}

// MockIProposalByIdCall wrap *gomock.Call
type MockIProposalByIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIProposalByIdCall) Return(arg0 storage.Proposal, arg1 error) *MockIProposalByIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIProposalByIdCall) Do(f func(context.Context, uint64) (storage.Proposal, error)) *MockIProposalByIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIProposalByIdCall) DoAndReturn(f func(context.Context, uint64) (storage.Proposal, error)) *MockIProposalByIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListWithFilters mocks base method.
func (m *MockIProposal) ListWithFilters(ctx context.Context, filters storage.ListProposalFilters) ([]storage.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithFilters", ctx, filters)
	ret0, _ := ret[0].([]storage.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithFilters indicates an expected call of ListWithFilters.
func (mr *MockIProposalMockRecorder) ListWithFilters(ctx, filters any) *MockIProposalListWithFiltersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithFilters", reflect.TypeOf((*MockIProposal)(nil).ListWithFilters), ctx, filters)
	return &MockIProposalListWithFiltersCall{Call: call}
}

// MockIProposalListWithFiltersCall wrap *gomock.Call
type MockIProposalListWithFiltersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIProposalListWithFiltersCall) Return(proposals []storage.Proposal, err error) *MockIProposalListWithFiltersCall {
	c.Call = c.Call.Return(proposals, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIProposalListWithFiltersCall) Do(f func(context.Context, storage.ListProposalFilters) ([]storage.Proposal, error)) *MockIProposalListWithFiltersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIProposalListWithFiltersCall) DoAndReturn(f func(context.Context, storage.ListProposalFilters) ([]storage.Proposal, error)) *MockIProposalListWithFiltersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
