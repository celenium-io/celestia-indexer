// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: delegation.go
//
// Generated by this command:
//
//	mockgen -source=delegation.go -destination=mock/delegation.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIDelegation is a mock of IDelegation interface.
type MockIDelegation struct {
	ctrl     *gomock.Controller
	recorder *MockIDelegationMockRecorder
}

// MockIDelegationMockRecorder is the mock recorder for MockIDelegation.
type MockIDelegationMockRecorder struct {
	mock *MockIDelegation
}

// NewMockIDelegation creates a new mock instance.
func NewMockIDelegation(ctrl *gomock.Controller) *MockIDelegation {
	mock := &MockIDelegation{ctrl: ctrl}
	mock.recorder = &MockIDelegationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDelegation) EXPECT() *MockIDelegationMockRecorder {
	return m.recorder
}

// ByAddress mocks base method.
func (m *MockIDelegation) ByAddress(ctx context.Context, addressId uint64, limit, offset int, showZero bool) ([]storage.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByAddress", ctx, addressId, limit, offset, showZero)
	ret0, _ := ret[0].([]storage.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByAddress indicates an expected call of ByAddress.
func (mr *MockIDelegationMockRecorder) ByAddress(ctx, addressId, limit, offset, showZero any) *IDelegationByAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByAddress", reflect.TypeOf((*MockIDelegation)(nil).ByAddress), ctx, addressId, limit, offset, showZero)
	return &IDelegationByAddressCall{Call: call}
}

// IDelegationByAddressCall wrap *gomock.Call
type IDelegationByAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDelegationByAddressCall) Return(arg0 []storage.Delegation, arg1 error) *IDelegationByAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDelegationByAddressCall) Do(f func(context.Context, uint64, int, int, bool) ([]storage.Delegation, error)) *IDelegationByAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDelegationByAddressCall) DoAndReturn(f func(context.Context, uint64, int, int, bool) ([]storage.Delegation, error)) *IDelegationByAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ByValidator mocks base method.
func (m *MockIDelegation) ByValidator(ctx context.Context, validatorId uint64, limit, offset int, showZero bool) ([]storage.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByValidator", ctx, validatorId, limit, offset, showZero)
	ret0, _ := ret[0].([]storage.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByValidator indicates an expected call of ByValidator.
func (mr *MockIDelegationMockRecorder) ByValidator(ctx, validatorId, limit, offset, showZero any) *IDelegationByValidatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByValidator", reflect.TypeOf((*MockIDelegation)(nil).ByValidator), ctx, validatorId, limit, offset, showZero)
	return &IDelegationByValidatorCall{Call: call}
}

// IDelegationByValidatorCall wrap *gomock.Call
type IDelegationByValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDelegationByValidatorCall) Return(arg0 []storage.Delegation, arg1 error) *IDelegationByValidatorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDelegationByValidatorCall) Do(f func(context.Context, uint64, int, int, bool) ([]storage.Delegation, error)) *IDelegationByValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDelegationByValidatorCall) DoAndReturn(f func(context.Context, uint64, int, int, bool) ([]storage.Delegation, error)) *IDelegationByValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CursorList mocks base method.
func (m *MockIDelegation) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIDelegationMockRecorder) CursorList(ctx, id, limit, order, cmp any) *IDelegationCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIDelegation)(nil).CursorList), ctx, id, limit, order, cmp)
	return &IDelegationCursorListCall{Call: call}
}

// IDelegationCursorListCall wrap *gomock.Call
type IDelegationCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDelegationCursorListCall) Return(arg0 []*storage.Delegation, arg1 error) *IDelegationCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDelegationCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Delegation, error)) *IDelegationCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDelegationCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Delegation, error)) *IDelegationCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIDelegation) GetByID(ctx context.Context, id uint64) (*storage.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIDelegationMockRecorder) GetByID(ctx, id any) *IDelegationGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIDelegation)(nil).GetByID), ctx, id)
	return &IDelegationGetByIDCall{Call: call}
}

// IDelegationGetByIDCall wrap *gomock.Call
type IDelegationGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDelegationGetByIDCall) Return(arg0 *storage.Delegation, arg1 error) *IDelegationGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDelegationGetByIDCall) Do(f func(context.Context, uint64) (*storage.Delegation, error)) *IDelegationGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDelegationGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Delegation, error)) *IDelegationGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIDelegation) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIDelegationMockRecorder) IsNoRows(err any) *IDelegationIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIDelegation)(nil).IsNoRows), err)
	return &IDelegationIsNoRowsCall{Call: call}
}

// IDelegationIsNoRowsCall wrap *gomock.Call
type IDelegationIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDelegationIsNoRowsCall) Return(arg0 bool) *IDelegationIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDelegationIsNoRowsCall) Do(f func(error) bool) *IDelegationIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDelegationIsNoRowsCall) DoAndReturn(f func(error) bool) *IDelegationIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIDelegation) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIDelegationMockRecorder) LastID(ctx any) *IDelegationLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIDelegation)(nil).LastID), ctx)
	return &IDelegationLastIDCall{Call: call}
}

// IDelegationLastIDCall wrap *gomock.Call
type IDelegationLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDelegationLastIDCall) Return(arg0 uint64, arg1 error) *IDelegationLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDelegationLastIDCall) Do(f func(context.Context) (uint64, error)) *IDelegationLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDelegationLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *IDelegationLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIDelegation) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIDelegationMockRecorder) List(ctx, limit, offset, order any) *IDelegationListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIDelegation)(nil).List), ctx, limit, offset, order)
	return &IDelegationListCall{Call: call}
}

// IDelegationListCall wrap *gomock.Call
type IDelegationListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDelegationListCall) Return(arg0 []*storage.Delegation, arg1 error) *IDelegationListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDelegationListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Delegation, error)) *IDelegationListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDelegationListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Delegation, error)) *IDelegationListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIDelegation) Save(ctx context.Context, m *storage.Delegation) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIDelegationMockRecorder) Save(ctx, m any) *IDelegationSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIDelegation)(nil).Save), ctx, m)
	return &IDelegationSaveCall{Call: call}
}

// IDelegationSaveCall wrap *gomock.Call
type IDelegationSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDelegationSaveCall) Return(arg0 error) *IDelegationSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDelegationSaveCall) Do(f func(context.Context, *storage.Delegation) error) *IDelegationSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDelegationSaveCall) DoAndReturn(f func(context.Context, *storage.Delegation) error) *IDelegationSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIDelegation) Update(ctx context.Context, m *storage.Delegation) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIDelegationMockRecorder) Update(ctx, m any) *IDelegationUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIDelegation)(nil).Update), ctx, m)
	return &IDelegationUpdateCall{Call: call}
}

// IDelegationUpdateCall wrap *gomock.Call
type IDelegationUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDelegationUpdateCall) Return(arg0 error) *IDelegationUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDelegationUpdateCall) Do(f func(context.Context, *storage.Delegation) error) *IDelegationUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDelegationUpdateCall) DoAndReturn(f func(context.Context, *storage.Delegation) error) *IDelegationUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
