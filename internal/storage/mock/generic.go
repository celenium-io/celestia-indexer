// SPDX-FileCopyrightText: 2025 Bb Strategy Pte. Ltd. <celenium@baking-bad.org>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: generic.go
//
// Generated by this command:
//
//	mockgen -source=generic.go -destination=mock/generic.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	types "github.com/celenium-io/celestia-indexer/pkg/types"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	pq "github.com/lib/pq"
	decimal "github.com/shopspring/decimal"
	bun "github.com/uptrace/bun"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificator is a mock of Notificator interface.
type MockNotificator struct {
	ctrl     *gomock.Controller
	recorder *MockNotificatorMockRecorder
	isgomock struct{}
}

// MockNotificatorMockRecorder is the mock recorder for MockNotificator.
type MockNotificatorMockRecorder struct {
	mock *MockNotificator
}

// NewMockNotificator creates a new mock instance.
func NewMockNotificator(ctrl *gomock.Controller) *MockNotificator {
	mock := &MockNotificator{ctrl: ctrl}
	mock.recorder = &MockNotificatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificator) EXPECT() *MockNotificatorMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockNotificator) Notify(ctx context.Context, channel, payload string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, channel, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockNotificatorMockRecorder) Notify(ctx, channel, payload any) *MockNotificatorNotifyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockNotificator)(nil).Notify), ctx, channel, payload)
	return &MockNotificatorNotifyCall{Call: call}
}

// MockNotificatorNotifyCall wrap *gomock.Call
type MockNotificatorNotifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificatorNotifyCall) Return(arg0 error) *MockNotificatorNotifyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificatorNotifyCall) Do(f func(context.Context, string, string) error) *MockNotificatorNotifyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificatorNotifyCall) DoAndReturn(f func(context.Context, string, string) error) *MockNotificatorNotifyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockListener is a mock of Listener interface.
type MockListener struct {
	ctrl     *gomock.Controller
	recorder *MockListenerMockRecorder
	isgomock struct{}
}

// MockListenerMockRecorder is the mock recorder for MockListener.
type MockListenerMockRecorder struct {
	mock *MockListener
}

// NewMockListener creates a new mock instance.
func NewMockListener(ctrl *gomock.Controller) *MockListener {
	mock := &MockListener{ctrl: ctrl}
	mock.recorder = &MockListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListener) EXPECT() *MockListenerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockListener) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockListenerMockRecorder) Close() *MockListenerCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockListener)(nil).Close))
	return &MockListenerCloseCall{Call: call}
}

// MockListenerCloseCall wrap *gomock.Call
type MockListenerCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockListenerCloseCall) Return(arg0 error) *MockListenerCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockListenerCloseCall) Do(f func() error) *MockListenerCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockListenerCloseCall) DoAndReturn(f func() error) *MockListenerCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Listen mocks base method.
func (m *MockListener) Listen() chan *pq.Notification {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen")
	ret0, _ := ret[0].(chan *pq.Notification)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockListenerMockRecorder) Listen() *MockListenerListenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockListener)(nil).Listen))
	return &MockListenerListenCall{Call: call}
}

// MockListenerListenCall wrap *gomock.Call
type MockListenerListenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockListenerListenCall) Return(arg0 chan *pq.Notification) *MockListenerListenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockListenerListenCall) Do(f func() chan *pq.Notification) *MockListenerListenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockListenerListenCall) DoAndReturn(f func() chan *pq.Notification) *MockListenerListenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Subscribe mocks base method.
func (m *MockListener) Subscribe(ctx context.Context, channels ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockListenerMockRecorder) Subscribe(ctx any, channels ...any) *MockListenerSubscribeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, channels...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockListener)(nil).Subscribe), varargs...)
	return &MockListenerSubscribeCall{Call: call}
}

// MockListenerSubscribeCall wrap *gomock.Call
type MockListenerSubscribeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockListenerSubscribeCall) Return(arg0 error) *MockListenerSubscribeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockListenerSubscribeCall) Do(f func(context.Context, ...string) error) *MockListenerSubscribeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockListenerSubscribeCall) DoAndReturn(f func(context.Context, ...string) error) *MockListenerSubscribeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockListenerFactory is a mock of ListenerFactory interface.
type MockListenerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockListenerFactoryMockRecorder
	isgomock struct{}
}

// MockListenerFactoryMockRecorder is the mock recorder for MockListenerFactory.
type MockListenerFactoryMockRecorder struct {
	mock *MockListenerFactory
}

// NewMockListenerFactory creates a new mock instance.
func NewMockListenerFactory(ctrl *gomock.Controller) *MockListenerFactory {
	mock := &MockListenerFactory{ctrl: ctrl}
	mock.recorder = &MockListenerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenerFactory) EXPECT() *MockListenerFactoryMockRecorder {
	return m.recorder
}

// CreateListener mocks base method.
func (m *MockListenerFactory) CreateListener() storage.Listener {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListener")
	ret0, _ := ret[0].(storage.Listener)
	return ret0
}

// CreateListener indicates an expected call of CreateListener.
func (mr *MockListenerFactoryMockRecorder) CreateListener() *MockListenerFactoryCreateListenerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListener", reflect.TypeOf((*MockListenerFactory)(nil).CreateListener))
	return &MockListenerFactoryCreateListenerCall{Call: call}
}

// MockListenerFactoryCreateListenerCall wrap *gomock.Call
type MockListenerFactoryCreateListenerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockListenerFactoryCreateListenerCall) Return(arg0 storage.Listener) *MockListenerFactoryCreateListenerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockListenerFactoryCreateListenerCall) Do(f func() storage.Listener) *MockListenerFactoryCreateListenerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockListenerFactoryCreateListenerCall) DoAndReturn(f func() storage.Listener) *MockListenerFactoryCreateListenerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
	isgomock struct{}
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// ActiveProposals mocks base method.
func (m *MockTransaction) ActiveProposals(ctx context.Context) ([]storage.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveProposals", ctx)
	ret0, _ := ret[0].([]storage.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveProposals indicates an expected call of ActiveProposals.
func (mr *MockTransactionMockRecorder) ActiveProposals(ctx any) *MockTransactionActiveProposalsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveProposals", reflect.TypeOf((*MockTransaction)(nil).ActiveProposals), ctx)
	return &MockTransactionActiveProposalsCall{Call: call}
}

// MockTransactionActiveProposalsCall wrap *gomock.Call
type MockTransactionActiveProposalsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionActiveProposalsCall) Return(arg0 []storage.Proposal, arg1 error) *MockTransactionActiveProposalsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionActiveProposalsCall) Do(f func(context.Context) ([]storage.Proposal, error)) *MockTransactionActiveProposalsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionActiveProposalsCall) DoAndReturn(f func(context.Context) ([]storage.Proposal, error)) *MockTransactionActiveProposalsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Add mocks base method.
func (m *MockTransaction) Add(ctx context.Context, model any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTransactionMockRecorder) Add(ctx, model any) *MockTransactionAddCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTransaction)(nil).Add), ctx, model)
	return &MockTransactionAddCall{Call: call}
}

// MockTransactionAddCall wrap *gomock.Call
type MockTransactionAddCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionAddCall) Return(arg0 error) *MockTransactionAddCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionAddCall) Do(f func(context.Context, any) error) *MockTransactionAddCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionAddCall) DoAndReturn(f func(context.Context, any) error) *MockTransactionAddCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddressDelegations mocks base method.
func (m *MockTransaction) AddressDelegations(ctx context.Context, addressId uint64) ([]storage.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressDelegations", ctx, addressId)
	ret0, _ := ret[0].([]storage.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressDelegations indicates an expected call of AddressDelegations.
func (mr *MockTransactionMockRecorder) AddressDelegations(ctx, addressId any) *MockTransactionAddressDelegationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressDelegations", reflect.TypeOf((*MockTransaction)(nil).AddressDelegations), ctx, addressId)
	return &MockTransactionAddressDelegationsCall{Call: call}
}

// MockTransactionAddressDelegationsCall wrap *gomock.Call
type MockTransactionAddressDelegationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionAddressDelegationsCall) Return(val []storage.Delegation, err error) *MockTransactionAddressDelegationsCall {
	c.Call = c.Call.Return(val, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionAddressDelegationsCall) Do(f func(context.Context, uint64) ([]storage.Delegation, error)) *MockTransactionAddressDelegationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionAddressDelegationsCall) DoAndReturn(f func(context.Context, uint64) ([]storage.Delegation, error)) *MockTransactionAddressDelegationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BondedValidators mocks base method.
func (m *MockTransaction) BondedValidators(ctx context.Context, limit int) ([]storage.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BondedValidators", ctx, limit)
	ret0, _ := ret[0].([]storage.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BondedValidators indicates an expected call of BondedValidators.
func (mr *MockTransactionMockRecorder) BondedValidators(ctx, limit any) *MockTransactionBondedValidatorsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BondedValidators", reflect.TypeOf((*MockTransaction)(nil).BondedValidators), ctx, limit)
	return &MockTransactionBondedValidatorsCall{Call: call}
}

// MockTransactionBondedValidatorsCall wrap *gomock.Call
type MockTransactionBondedValidatorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionBondedValidatorsCall) Return(arg0 []storage.Validator, arg1 error) *MockTransactionBondedValidatorsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionBondedValidatorsCall) Do(f func(context.Context, int) ([]storage.Validator, error)) *MockTransactionBondedValidatorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionBondedValidatorsCall) DoAndReturn(f func(context.Context, int) ([]storage.Validator, error)) *MockTransactionBondedValidatorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BulkSave mocks base method.
func (m *MockTransaction) BulkSave(ctx context.Context, models []any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkSave", ctx, models)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkSave indicates an expected call of BulkSave.
func (mr *MockTransactionMockRecorder) BulkSave(ctx, models any) *MockTransactionBulkSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkSave", reflect.TypeOf((*MockTransaction)(nil).BulkSave), ctx, models)
	return &MockTransactionBulkSaveCall{Call: call}
}

// MockTransactionBulkSaveCall wrap *gomock.Call
type MockTransactionBulkSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionBulkSaveCall) Return(arg0 error) *MockTransactionBulkSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionBulkSaveCall) Do(f func(context.Context, []any) error) *MockTransactionBulkSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionBulkSaveCall) DoAndReturn(f func(context.Context, []any) error) *MockTransactionBulkSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CancelUnbondings mocks base method.
func (m *MockTransaction) CancelUnbondings(ctx context.Context, cancellations ...storage.Undelegation) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range cancellations {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelUnbondings", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelUnbondings indicates an expected call of CancelUnbondings.
func (mr *MockTransactionMockRecorder) CancelUnbondings(ctx any, cancellations ...any) *MockTransactionCancelUnbondingsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, cancellations...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelUnbondings", reflect.TypeOf((*MockTransaction)(nil).CancelUnbondings), varargs...)
	return &MockTransactionCancelUnbondingsCall{Call: call}
}

// MockTransactionCancelUnbondingsCall wrap *gomock.Call
type MockTransactionCancelUnbondingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionCancelUnbondingsCall) Return(arg0 error) *MockTransactionCancelUnbondingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionCancelUnbondingsCall) Do(f func(context.Context, ...storage.Undelegation) error) *MockTransactionCancelUnbondingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionCancelUnbondingsCall) DoAndReturn(f func(context.Context, ...storage.Undelegation) error) *MockTransactionCancelUnbondingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockTransaction) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTransactionMockRecorder) Close(ctx any) *MockTransactionCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTransaction)(nil).Close), ctx)
	return &MockTransactionCloseCall{Call: call}
}

// MockTransactionCloseCall wrap *gomock.Call
type MockTransactionCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionCloseCall) Return(arg0 error) *MockTransactionCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionCloseCall) Do(f func(context.Context) error) *MockTransactionCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionCloseCall) DoAndReturn(f func(context.Context) error) *MockTransactionCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CopyFrom mocks base method.
func (m *MockTransaction) CopyFrom(ctx context.Context, tableName string, data []storage0.Copiable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFrom", ctx, tableName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFrom indicates an expected call of CopyFrom.
func (mr *MockTransactionMockRecorder) CopyFrom(ctx, tableName, data any) *MockTransactionCopyFromCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockTransaction)(nil).CopyFrom), ctx, tableName, data)
	return &MockTransactionCopyFromCall{Call: call}
}

// MockTransactionCopyFromCall wrap *gomock.Call
type MockTransactionCopyFromCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionCopyFromCall) Return(arg0 error) *MockTransactionCopyFromCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionCopyFromCall) Do(f func(context.Context, string, []storage0.Copiable) error) *MockTransactionCopyFromCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionCopyFromCall) DoAndReturn(f func(context.Context, string, []storage0.Copiable) error) *MockTransactionCopyFromCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delegation mocks base method.
func (m *MockTransaction) Delegation(ctx context.Context, validatorId, addressId uint64) (storage.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delegation", ctx, validatorId, addressId)
	ret0, _ := ret[0].(storage.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delegation indicates an expected call of Delegation.
func (mr *MockTransactionMockRecorder) Delegation(ctx, validatorId, addressId any) *MockTransactionDelegationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delegation", reflect.TypeOf((*MockTransaction)(nil).Delegation), ctx, validatorId, addressId)
	return &MockTransactionDelegationCall{Call: call}
}

// MockTransactionDelegationCall wrap *gomock.Call
type MockTransactionDelegationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionDelegationCall) Return(val storage.Delegation, err error) *MockTransactionDelegationCall {
	c.Call = c.Call.Return(val, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionDelegationCall) Do(f func(context.Context, uint64, uint64) (storage.Delegation, error)) *MockTransactionDelegationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionDelegationCall) DoAndReturn(f func(context.Context, uint64, uint64) (storage.Delegation, error)) *MockTransactionDelegationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteBalances mocks base method.
func (m *MockTransaction) DeleteBalances(ctx context.Context, ids []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBalances", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBalances indicates an expected call of DeleteBalances.
func (mr *MockTransactionMockRecorder) DeleteBalances(ctx, ids any) *MockTransactionDeleteBalancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBalances", reflect.TypeOf((*MockTransaction)(nil).DeleteBalances), ctx, ids)
	return &MockTransactionDeleteBalancesCall{Call: call}
}

// MockTransactionDeleteBalancesCall wrap *gomock.Call
type MockTransactionDeleteBalancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionDeleteBalancesCall) Return(arg0 error) *MockTransactionDeleteBalancesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionDeleteBalancesCall) Do(f func(context.Context, []uint64) error) *MockTransactionDeleteBalancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionDeleteBalancesCall) DoAndReturn(f func(context.Context, []uint64) error) *MockTransactionDeleteBalancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteDelegationsByValidator mocks base method.
func (m *MockTransaction) DeleteDelegationsByValidator(ctx context.Context, ids ...uint64) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDelegationsByValidator", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDelegationsByValidator indicates an expected call of DeleteDelegationsByValidator.
func (mr *MockTransactionMockRecorder) DeleteDelegationsByValidator(ctx any, ids ...any) *MockTransactionDeleteDelegationsByValidatorCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, ids...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDelegationsByValidator", reflect.TypeOf((*MockTransaction)(nil).DeleteDelegationsByValidator), varargs...)
	return &MockTransactionDeleteDelegationsByValidatorCall{Call: call}
}

// MockTransactionDeleteDelegationsByValidatorCall wrap *gomock.Call
type MockTransactionDeleteDelegationsByValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionDeleteDelegationsByValidatorCall) Return(arg0 error) *MockTransactionDeleteDelegationsByValidatorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionDeleteDelegationsByValidatorCall) Do(f func(context.Context, ...uint64) error) *MockTransactionDeleteDelegationsByValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionDeleteDelegationsByValidatorCall) DoAndReturn(f func(context.Context, ...uint64) error) *MockTransactionDeleteDelegationsByValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteProviders mocks base method.
func (m *MockTransaction) DeleteProviders(ctx context.Context, rollupId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProviders", ctx, rollupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProviders indicates an expected call of DeleteProviders.
func (mr *MockTransactionMockRecorder) DeleteProviders(ctx, rollupId any) *MockTransactionDeleteProvidersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProviders", reflect.TypeOf((*MockTransaction)(nil).DeleteProviders), ctx, rollupId)
	return &MockTransactionDeleteProvidersCall{Call: call}
}

// MockTransactionDeleteProvidersCall wrap *gomock.Call
type MockTransactionDeleteProvidersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionDeleteProvidersCall) Return(arg0 error) *MockTransactionDeleteProvidersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionDeleteProvidersCall) Do(f func(context.Context, uint64) error) *MockTransactionDeleteProvidersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionDeleteProvidersCall) DoAndReturn(f func(context.Context, uint64) error) *MockTransactionDeleteProvidersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRollup mocks base method.
func (m *MockTransaction) DeleteRollup(ctx context.Context, rollupId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRollup", ctx, rollupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRollup indicates an expected call of DeleteRollup.
func (mr *MockTransactionMockRecorder) DeleteRollup(ctx, rollupId any) *MockTransactionDeleteRollupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRollup", reflect.TypeOf((*MockTransaction)(nil).DeleteRollup), ctx, rollupId)
	return &MockTransactionDeleteRollupCall{Call: call}
}

// MockTransactionDeleteRollupCall wrap *gomock.Call
type MockTransactionDeleteRollupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionDeleteRollupCall) Return(arg0 error) *MockTransactionDeleteRollupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionDeleteRollupCall) Do(f func(context.Context, uint64) error) *MockTransactionDeleteRollupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionDeleteRollupCall) DoAndReturn(f func(context.Context, uint64) error) *MockTransactionDeleteRollupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Exec mocks base method.
func (m *MockTransaction) Exec(ctx context.Context, query string, params ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockTransactionMockRecorder) Exec(ctx, query any, params ...any) *MockTransactionExecCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, params...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockTransaction)(nil).Exec), varargs...)
	return &MockTransactionExecCall{Call: call}
}

// MockTransactionExecCall wrap *gomock.Call
type MockTransactionExecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionExecCall) Return(arg0 int64, arg1 error) *MockTransactionExecCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionExecCall) Do(f func(context.Context, string, ...any) (int64, error)) *MockTransactionExecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionExecCall) DoAndReturn(f func(context.Context, string, ...any) (int64, error)) *MockTransactionExecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Flush mocks base method.
func (m *MockTransaction) Flush(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockTransactionMockRecorder) Flush(ctx any) *MockTransactionFlushCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockTransaction)(nil).Flush), ctx)
	return &MockTransactionFlushCall{Call: call}
}

// MockTransactionFlushCall wrap *gomock.Call
type MockTransactionFlushCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionFlushCall) Return(arg0 error) *MockTransactionFlushCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionFlushCall) Do(f func(context.Context) error) *MockTransactionFlushCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionFlushCall) DoAndReturn(f func(context.Context) error) *MockTransactionFlushCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProposerId mocks base method.
func (m *MockTransaction) GetProposerId(ctx context.Context, address string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposerId", ctx, address)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposerId indicates an expected call of GetProposerId.
func (mr *MockTransactionMockRecorder) GetProposerId(ctx, address any) *MockTransactionGetProposerIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposerId", reflect.TypeOf((*MockTransaction)(nil).GetProposerId), ctx, address)
	return &MockTransactionGetProposerIdCall{Call: call}
}

// MockTransactionGetProposerIdCall wrap *gomock.Call
type MockTransactionGetProposerIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionGetProposerIdCall) Return(arg0 uint64, arg1 error) *MockTransactionGetProposerIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionGetProposerIdCall) Do(f func(context.Context, string) (uint64, error)) *MockTransactionGetProposerIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionGetProposerIdCall) DoAndReturn(f func(context.Context, string) (uint64, error)) *MockTransactionGetProposerIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HandleError mocks base method.
func (m *MockTransaction) HandleError(ctx context.Context, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleError", ctx, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleError indicates an expected call of HandleError.
func (mr *MockTransactionMockRecorder) HandleError(ctx, err any) *MockTransactionHandleErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleError", reflect.TypeOf((*MockTransaction)(nil).HandleError), ctx, err)
	return &MockTransactionHandleErrorCall{Call: call}
}

// MockTransactionHandleErrorCall wrap *gomock.Call
type MockTransactionHandleErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionHandleErrorCall) Return(arg0 error) *MockTransactionHandleErrorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionHandleErrorCall) Do(f func(context.Context, error) error) *MockTransactionHandleErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionHandleErrorCall) DoAndReturn(f func(context.Context, error) error) *MockTransactionHandleErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HyperlaneIgp mocks base method.
func (m *MockTransaction) HyperlaneIgp(ctx context.Context, id []byte) (storage.HLIGP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HyperlaneIgp", ctx, id)
	ret0, _ := ret[0].(storage.HLIGP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HyperlaneIgp indicates an expected call of HyperlaneIgp.
func (mr *MockTransactionMockRecorder) HyperlaneIgp(ctx, id any) *MockTransactionHyperlaneIgpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HyperlaneIgp", reflect.TypeOf((*MockTransaction)(nil).HyperlaneIgp), ctx, id)
	return &MockTransactionHyperlaneIgpCall{Call: call}
}

// MockTransactionHyperlaneIgpCall wrap *gomock.Call
type MockTransactionHyperlaneIgpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionHyperlaneIgpCall) Return(arg0 storage.HLIGP, arg1 error) *MockTransactionHyperlaneIgpCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionHyperlaneIgpCall) Do(f func(context.Context, []byte) (storage.HLIGP, error)) *MockTransactionHyperlaneIgpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionHyperlaneIgpCall) DoAndReturn(f func(context.Context, []byte) (storage.HLIGP, error)) *MockTransactionHyperlaneIgpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HyperlaneIgpConfig mocks base method.
func (m *MockTransaction) HyperlaneIgpConfig(ctx context.Context, id uint64) (storage.HLIGPConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HyperlaneIgpConfig", ctx, id)
	ret0, _ := ret[0].(storage.HLIGPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HyperlaneIgpConfig indicates an expected call of HyperlaneIgpConfig.
func (mr *MockTransactionMockRecorder) HyperlaneIgpConfig(ctx, id any) *MockTransactionHyperlaneIgpConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HyperlaneIgpConfig", reflect.TypeOf((*MockTransaction)(nil).HyperlaneIgpConfig), ctx, id)
	return &MockTransactionHyperlaneIgpConfigCall{Call: call}
}

// MockTransactionHyperlaneIgpConfigCall wrap *gomock.Call
type MockTransactionHyperlaneIgpConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionHyperlaneIgpConfigCall) Return(arg0 storage.HLIGPConfig, arg1 error) *MockTransactionHyperlaneIgpConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionHyperlaneIgpConfigCall) Do(f func(context.Context, uint64) (storage.HLIGPConfig, error)) *MockTransactionHyperlaneIgpConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionHyperlaneIgpConfigCall) DoAndReturn(f func(context.Context, uint64) (storage.HLIGPConfig, error)) *MockTransactionHyperlaneIgpConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HyperlaneMailbox mocks base method.
func (m *MockTransaction) HyperlaneMailbox(ctx context.Context, internalId uint64) (storage.HLMailbox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HyperlaneMailbox", ctx, internalId)
	ret0, _ := ret[0].(storage.HLMailbox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HyperlaneMailbox indicates an expected call of HyperlaneMailbox.
func (mr *MockTransactionMockRecorder) HyperlaneMailbox(ctx, internalId any) *MockTransactionHyperlaneMailboxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HyperlaneMailbox", reflect.TypeOf((*MockTransaction)(nil).HyperlaneMailbox), ctx, internalId)
	return &MockTransactionHyperlaneMailboxCall{Call: call}
}

// MockTransactionHyperlaneMailboxCall wrap *gomock.Call
type MockTransactionHyperlaneMailboxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionHyperlaneMailboxCall) Return(arg0 storage.HLMailbox, arg1 error) *MockTransactionHyperlaneMailboxCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionHyperlaneMailboxCall) Do(f func(context.Context, uint64) (storage.HLMailbox, error)) *MockTransactionHyperlaneMailboxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionHyperlaneMailboxCall) DoAndReturn(f func(context.Context, uint64) (storage.HLMailbox, error)) *MockTransactionHyperlaneMailboxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HyperlaneToken mocks base method.
func (m *MockTransaction) HyperlaneToken(ctx context.Context, id []byte) (storage.HLToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HyperlaneToken", ctx, id)
	ret0, _ := ret[0].(storage.HLToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HyperlaneToken indicates an expected call of HyperlaneToken.
func (mr *MockTransactionMockRecorder) HyperlaneToken(ctx, id any) *MockTransactionHyperlaneTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HyperlaneToken", reflect.TypeOf((*MockTransaction)(nil).HyperlaneToken), ctx, id)
	return &MockTransactionHyperlaneTokenCall{Call: call}
}

// MockTransactionHyperlaneTokenCall wrap *gomock.Call
type MockTransactionHyperlaneTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionHyperlaneTokenCall) Return(arg0 storage.HLToken, arg1 error) *MockTransactionHyperlaneTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionHyperlaneTokenCall) Do(f func(context.Context, []byte) (storage.HLToken, error)) *MockTransactionHyperlaneTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionHyperlaneTokenCall) DoAndReturn(f func(context.Context, []byte) (storage.HLToken, error)) *MockTransactionHyperlaneTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IbcConnection mocks base method.
func (m *MockTransaction) IbcConnection(ctx context.Context, id string) (storage.IbcConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IbcConnection", ctx, id)
	ret0, _ := ret[0].(storage.IbcConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IbcConnection indicates an expected call of IbcConnection.
func (mr *MockTransactionMockRecorder) IbcConnection(ctx, id any) *MockTransactionIbcConnectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IbcConnection", reflect.TypeOf((*MockTransaction)(nil).IbcConnection), ctx, id)
	return &MockTransactionIbcConnectionCall{Call: call}
}

// MockTransactionIbcConnectionCall wrap *gomock.Call
type MockTransactionIbcConnectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionIbcConnectionCall) Return(arg0 storage.IbcConnection, arg1 error) *MockTransactionIbcConnectionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionIbcConnectionCall) Do(f func(context.Context, string) (storage.IbcConnection, error)) *MockTransactionIbcConnectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionIbcConnectionCall) DoAndReturn(f func(context.Context, string) (storage.IbcConnection, error)) *MockTransactionIbcConnectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Jail mocks base method.
func (m *MockTransaction) Jail(ctx context.Context, validators ...*storage.Validator) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range validators {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Jail", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Jail indicates an expected call of Jail.
func (mr *MockTransactionMockRecorder) Jail(ctx any, validators ...any) *MockTransactionJailCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, validators...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jail", reflect.TypeOf((*MockTransaction)(nil).Jail), varargs...)
	return &MockTransactionJailCall{Call: call}
}

// MockTransactionJailCall wrap *gomock.Call
type MockTransactionJailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionJailCall) Return(arg0 error) *MockTransactionJailCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionJailCall) Do(f func(context.Context, ...*storage.Validator) error) *MockTransactionJailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionJailCall) DoAndReturn(f func(context.Context, ...*storage.Validator) error) *MockTransactionJailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastAddressAction mocks base method.
func (m *MockTransaction) LastAddressAction(ctx context.Context, address []byte) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastAddressAction", ctx, address)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastAddressAction indicates an expected call of LastAddressAction.
func (mr *MockTransactionMockRecorder) LastAddressAction(ctx, address any) *MockTransactionLastAddressActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastAddressAction", reflect.TypeOf((*MockTransaction)(nil).LastAddressAction), ctx, address)
	return &MockTransactionLastAddressActionCall{Call: call}
}

// MockTransactionLastAddressActionCall wrap *gomock.Call
type MockTransactionLastAddressActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionLastAddressActionCall) Return(arg0 uint64, arg1 error) *MockTransactionLastAddressActionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionLastAddressActionCall) Do(f func(context.Context, []byte) (uint64, error)) *MockTransactionLastAddressActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionLastAddressActionCall) DoAndReturn(f func(context.Context, []byte) (uint64, error)) *MockTransactionLastAddressActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastBlock mocks base method.
func (m *MockTransaction) LastBlock(ctx context.Context) (storage.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastBlock", ctx)
	ret0, _ := ret[0].(storage.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastBlock indicates an expected call of LastBlock.
func (mr *MockTransactionMockRecorder) LastBlock(ctx any) *MockTransactionLastBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastBlock", reflect.TypeOf((*MockTransaction)(nil).LastBlock), ctx)
	return &MockTransactionLastBlockCall{Call: call}
}

// MockTransactionLastBlockCall wrap *gomock.Call
type MockTransactionLastBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionLastBlockCall) Return(block storage.Block, err error) *MockTransactionLastBlockCall {
	c.Call = c.Call.Return(block, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionLastBlockCall) Do(f func(context.Context) (storage.Block, error)) *MockTransactionLastBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionLastBlockCall) DoAndReturn(f func(context.Context) (storage.Block, error)) *MockTransactionLastBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastNamespaceMessage mocks base method.
func (m *MockTransaction) LastNamespaceMessage(ctx context.Context, nsId uint64) (storage.NamespaceMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastNamespaceMessage", ctx, nsId)
	ret0, _ := ret[0].(storage.NamespaceMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastNamespaceMessage indicates an expected call of LastNamespaceMessage.
func (mr *MockTransactionMockRecorder) LastNamespaceMessage(ctx, nsId any) *MockTransactionLastNamespaceMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastNamespaceMessage", reflect.TypeOf((*MockTransaction)(nil).LastNamespaceMessage), ctx, nsId)
	return &MockTransactionLastNamespaceMessageCall{Call: call}
}

// MockTransactionLastNamespaceMessageCall wrap *gomock.Call
type MockTransactionLastNamespaceMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionLastNamespaceMessageCall) Return(msg storage.NamespaceMessage, err error) *MockTransactionLastNamespaceMessageCall {
	c.Call = c.Call.Return(msg, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionLastNamespaceMessageCall) Do(f func(context.Context, uint64) (storage.NamespaceMessage, error)) *MockTransactionLastNamespaceMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionLastNamespaceMessageCall) DoAndReturn(f func(context.Context, uint64) (storage.NamespaceMessage, error)) *MockTransactionLastNamespaceMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Namespace mocks base method.
func (m *MockTransaction) Namespace(ctx context.Context, id uint64) (storage.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace", ctx, id)
	ret0, _ := ret[0].(storage.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Namespace indicates an expected call of Namespace.
func (mr *MockTransactionMockRecorder) Namespace(ctx, id any) *MockTransactionNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockTransaction)(nil).Namespace), ctx, id)
	return &MockTransactionNamespaceCall{Call: call}
}

// MockTransactionNamespaceCall wrap *gomock.Call
type MockTransactionNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionNamespaceCall) Return(ns storage.Namespace, err error) *MockTransactionNamespaceCall {
	c.Call = c.Call.Return(ns, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionNamespaceCall) Do(f func(context.Context, uint64) (storage.Namespace, error)) *MockTransactionNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionNamespaceCall) DoAndReturn(f func(context.Context, uint64) (storage.Namespace, error)) *MockTransactionNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Proposal mocks base method.
func (m *MockTransaction) Proposal(ctx context.Context, id uint64) (storage.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proposal", ctx, id)
	ret0, _ := ret[0].(storage.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Proposal indicates an expected call of Proposal.
func (mr *MockTransactionMockRecorder) Proposal(ctx, id any) *MockTransactionProposalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proposal", reflect.TypeOf((*MockTransaction)(nil).Proposal), ctx, id)
	return &MockTransactionProposalCall{Call: call}
}

// MockTransactionProposalCall wrap *gomock.Call
type MockTransactionProposalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionProposalCall) Return(arg0 storage.Proposal, arg1 error) *MockTransactionProposalCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionProposalCall) Do(f func(context.Context, uint64) (storage.Proposal, error)) *MockTransactionProposalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionProposalCall) DoAndReturn(f func(context.Context, uint64) (storage.Proposal, error)) *MockTransactionProposalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProposalVotes mocks base method.
func (m *MockTransaction) ProposalVotes(ctx context.Context, proposalId uint64, limit, offset int) ([]storage.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposalVotes", ctx, proposalId, limit, offset)
	ret0, _ := ret[0].([]storage.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposalVotes indicates an expected call of ProposalVotes.
func (mr *MockTransactionMockRecorder) ProposalVotes(ctx, proposalId, limit, offset any) *MockTransactionProposalVotesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposalVotes", reflect.TypeOf((*MockTransaction)(nil).ProposalVotes), ctx, proposalId, limit, offset)
	return &MockTransactionProposalVotesCall{Call: call}
}

// MockTransactionProposalVotesCall wrap *gomock.Call
type MockTransactionProposalVotesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionProposalVotesCall) Return(arg0 []storage.Vote, arg1 error) *MockTransactionProposalVotesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionProposalVotesCall) Do(f func(context.Context, uint64, int, int) ([]storage.Vote, error)) *MockTransactionProposalVotesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionProposalVotesCall) DoAndReturn(f func(context.Context, uint64, int, int) ([]storage.Vote, error)) *MockTransactionProposalVotesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RefreshLeaderboard mocks base method.
func (m *MockTransaction) RefreshLeaderboard(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshLeaderboard", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshLeaderboard indicates an expected call of RefreshLeaderboard.
func (mr *MockTransactionMockRecorder) RefreshLeaderboard(ctx any) *MockTransactionRefreshLeaderboardCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshLeaderboard", reflect.TypeOf((*MockTransaction)(nil).RefreshLeaderboard), ctx)
	return &MockTransactionRefreshLeaderboardCall{Call: call}
}

// MockTransactionRefreshLeaderboardCall wrap *gomock.Call
type MockTransactionRefreshLeaderboardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRefreshLeaderboardCall) Return(arg0 error) *MockTransactionRefreshLeaderboardCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRefreshLeaderboardCall) Do(f func(context.Context) error) *MockTransactionRefreshLeaderboardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRefreshLeaderboardCall) DoAndReturn(f func(context.Context) error) *MockTransactionRefreshLeaderboardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RetentionBlockSignatures mocks base method.
func (m *MockTransaction) RetentionBlockSignatures(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetentionBlockSignatures", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetentionBlockSignatures indicates an expected call of RetentionBlockSignatures.
func (mr *MockTransactionMockRecorder) RetentionBlockSignatures(ctx, height any) *MockTransactionRetentionBlockSignaturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetentionBlockSignatures", reflect.TypeOf((*MockTransaction)(nil).RetentionBlockSignatures), ctx, height)
	return &MockTransactionRetentionBlockSignaturesCall{Call: call}
}

// MockTransactionRetentionBlockSignaturesCall wrap *gomock.Call
type MockTransactionRetentionBlockSignaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRetentionBlockSignaturesCall) Return(arg0 error) *MockTransactionRetentionBlockSignaturesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRetentionBlockSignaturesCall) Do(f func(context.Context, types.Level) error) *MockTransactionRetentionBlockSignaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRetentionBlockSignaturesCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRetentionBlockSignaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RetentionCompletedRedelegations mocks base method.
func (m *MockTransaction) RetentionCompletedRedelegations(ctx context.Context, blockTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetentionCompletedRedelegations", ctx, blockTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetentionCompletedRedelegations indicates an expected call of RetentionCompletedRedelegations.
func (mr *MockTransactionMockRecorder) RetentionCompletedRedelegations(ctx, blockTime any) *MockTransactionRetentionCompletedRedelegationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetentionCompletedRedelegations", reflect.TypeOf((*MockTransaction)(nil).RetentionCompletedRedelegations), ctx, blockTime)
	return &MockTransactionRetentionCompletedRedelegationsCall{Call: call}
}

// MockTransactionRetentionCompletedRedelegationsCall wrap *gomock.Call
type MockTransactionRetentionCompletedRedelegationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRetentionCompletedRedelegationsCall) Return(arg0 error) *MockTransactionRetentionCompletedRedelegationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRetentionCompletedRedelegationsCall) Do(f func(context.Context, time.Time) error) *MockTransactionRetentionCompletedRedelegationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRetentionCompletedRedelegationsCall) DoAndReturn(f func(context.Context, time.Time) error) *MockTransactionRetentionCompletedRedelegationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RetentionCompletedUnbondings mocks base method.
func (m *MockTransaction) RetentionCompletedUnbondings(ctx context.Context, blockTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetentionCompletedUnbondings", ctx, blockTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetentionCompletedUnbondings indicates an expected call of RetentionCompletedUnbondings.
func (mr *MockTransactionMockRecorder) RetentionCompletedUnbondings(ctx, blockTime any) *MockTransactionRetentionCompletedUnbondingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetentionCompletedUnbondings", reflect.TypeOf((*MockTransaction)(nil).RetentionCompletedUnbondings), ctx, blockTime)
	return &MockTransactionRetentionCompletedUnbondingsCall{Call: call}
}

// MockTransactionRetentionCompletedUnbondingsCall wrap *gomock.Call
type MockTransactionRetentionCompletedUnbondingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRetentionCompletedUnbondingsCall) Return(arg0 error) *MockTransactionRetentionCompletedUnbondingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRetentionCompletedUnbondingsCall) Do(f func(context.Context, time.Time) error) *MockTransactionRetentionCompletedUnbondingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRetentionCompletedUnbondingsCall) DoAndReturn(f func(context.Context, time.Time) error) *MockTransactionRetentionCompletedUnbondingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback(ctx any) *MockTransactionRollbackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback), ctx)
	return &MockTransactionRollbackCall{Call: call}
}

// MockTransactionRollbackCall wrap *gomock.Call
type MockTransactionRollbackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackCall) Return(arg0 error) *MockTransactionRollbackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackCall) Do(f func(context.Context) error) *MockTransactionRollbackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackCall) DoAndReturn(f func(context.Context) error) *MockTransactionRollbackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackAddresses mocks base method.
func (m *MockTransaction) RollbackAddresses(ctx context.Context, height types.Level) ([]storage.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackAddresses", ctx, height)
	ret0, _ := ret[0].([]storage.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackAddresses indicates an expected call of RollbackAddresses.
func (mr *MockTransactionMockRecorder) RollbackAddresses(ctx, height any) *MockTransactionRollbackAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackAddresses", reflect.TypeOf((*MockTransaction)(nil).RollbackAddresses), ctx, height)
	return &MockTransactionRollbackAddressesCall{Call: call}
}

// MockTransactionRollbackAddressesCall wrap *gomock.Call
type MockTransactionRollbackAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackAddressesCall) Return(address []storage.Address, err error) *MockTransactionRollbackAddressesCall {
	c.Call = c.Call.Return(address, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackAddressesCall) Do(f func(context.Context, types.Level) ([]storage.Address, error)) *MockTransactionRollbackAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackAddressesCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.Address, error)) *MockTransactionRollbackAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackBlobLog mocks base method.
func (m *MockTransaction) RollbackBlobLog(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBlobLog", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackBlobLog indicates an expected call of RollbackBlobLog.
func (mr *MockTransactionMockRecorder) RollbackBlobLog(ctx, height any) *MockTransactionRollbackBlobLogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBlobLog", reflect.TypeOf((*MockTransaction)(nil).RollbackBlobLog), ctx, height)
	return &MockTransactionRollbackBlobLogCall{Call: call}
}

// MockTransactionRollbackBlobLogCall wrap *gomock.Call
type MockTransactionRollbackBlobLogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackBlobLogCall) Return(arg0 error) *MockTransactionRollbackBlobLogCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackBlobLogCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackBlobLogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackBlobLogCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackBlobLogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackBlock mocks base method.
func (m *MockTransaction) RollbackBlock(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBlock", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackBlock indicates an expected call of RollbackBlock.
func (mr *MockTransactionMockRecorder) RollbackBlock(ctx, height any) *MockTransactionRollbackBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBlock", reflect.TypeOf((*MockTransaction)(nil).RollbackBlock), ctx, height)
	return &MockTransactionRollbackBlockCall{Call: call}
}

// MockTransactionRollbackBlockCall wrap *gomock.Call
type MockTransactionRollbackBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackBlockCall) Return(arg0 error) *MockTransactionRollbackBlockCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackBlockCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackBlockCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackBlockSignatures mocks base method.
func (m *MockTransaction) RollbackBlockSignatures(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBlockSignatures", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackBlockSignatures indicates an expected call of RollbackBlockSignatures.
func (mr *MockTransactionMockRecorder) RollbackBlockSignatures(ctx, height any) *MockTransactionRollbackBlockSignaturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBlockSignatures", reflect.TypeOf((*MockTransaction)(nil).RollbackBlockSignatures), ctx, height)
	return &MockTransactionRollbackBlockSignaturesCall{Call: call}
}

// MockTransactionRollbackBlockSignaturesCall wrap *gomock.Call
type MockTransactionRollbackBlockSignaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackBlockSignaturesCall) Return(err error) *MockTransactionRollbackBlockSignaturesCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackBlockSignaturesCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackBlockSignaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackBlockSignaturesCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackBlockSignaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackBlockStats mocks base method.
func (m *MockTransaction) RollbackBlockStats(ctx context.Context, height types.Level) (storage.BlockStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBlockStats", ctx, height)
	ret0, _ := ret[0].(storage.BlockStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackBlockStats indicates an expected call of RollbackBlockStats.
func (mr *MockTransactionMockRecorder) RollbackBlockStats(ctx, height any) *MockTransactionRollbackBlockStatsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBlockStats", reflect.TypeOf((*MockTransaction)(nil).RollbackBlockStats), ctx, height)
	return &MockTransactionRollbackBlockStatsCall{Call: call}
}

// MockTransactionRollbackBlockStatsCall wrap *gomock.Call
type MockTransactionRollbackBlockStatsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackBlockStatsCall) Return(stats storage.BlockStats, err error) *MockTransactionRollbackBlockStatsCall {
	c.Call = c.Call.Return(stats, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackBlockStatsCall) Do(f func(context.Context, types.Level) (storage.BlockStats, error)) *MockTransactionRollbackBlockStatsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackBlockStatsCall) DoAndReturn(f func(context.Context, types.Level) (storage.BlockStats, error)) *MockTransactionRollbackBlockStatsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackEvents mocks base method.
func (m *MockTransaction) RollbackEvents(ctx context.Context, height types.Level) ([]storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackEvents", ctx, height)
	ret0, _ := ret[0].([]storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackEvents indicates an expected call of RollbackEvents.
func (mr *MockTransactionMockRecorder) RollbackEvents(ctx, height any) *MockTransactionRollbackEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackEvents", reflect.TypeOf((*MockTransaction)(nil).RollbackEvents), ctx, height)
	return &MockTransactionRollbackEventsCall{Call: call}
}

// MockTransactionRollbackEventsCall wrap *gomock.Call
type MockTransactionRollbackEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackEventsCall) Return(events []storage.Event, err error) *MockTransactionRollbackEventsCall {
	c.Call = c.Call.Return(events, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackEventsCall) Do(f func(context.Context, types.Level) ([]storage.Event, error)) *MockTransactionRollbackEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackEventsCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.Event, error)) *MockTransactionRollbackEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackGrants mocks base method.
func (m *MockTransaction) RollbackGrants(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackGrants", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackGrants indicates an expected call of RollbackGrants.
func (mr *MockTransactionMockRecorder) RollbackGrants(ctx, height any) *MockTransactionRollbackGrantsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackGrants", reflect.TypeOf((*MockTransaction)(nil).RollbackGrants), ctx, height)
	return &MockTransactionRollbackGrantsCall{Call: call}
}

// MockTransactionRollbackGrantsCall wrap *gomock.Call
type MockTransactionRollbackGrantsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackGrantsCall) Return(arg0 error) *MockTransactionRollbackGrantsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackGrantsCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackGrantsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackGrantsCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackGrantsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackHyperlaneGasPayment mocks base method.
func (m *MockTransaction) RollbackHyperlaneGasPayment(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackHyperlaneGasPayment", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackHyperlaneGasPayment indicates an expected call of RollbackHyperlaneGasPayment.
func (mr *MockTransactionMockRecorder) RollbackHyperlaneGasPayment(ctx, height any) *MockTransactionRollbackHyperlaneGasPaymentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackHyperlaneGasPayment", reflect.TypeOf((*MockTransaction)(nil).RollbackHyperlaneGasPayment), ctx, height)
	return &MockTransactionRollbackHyperlaneGasPaymentCall{Call: call}
}

// MockTransactionRollbackHyperlaneGasPaymentCall wrap *gomock.Call
type MockTransactionRollbackHyperlaneGasPaymentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackHyperlaneGasPaymentCall) Return(arg0 error) *MockTransactionRollbackHyperlaneGasPaymentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackHyperlaneGasPaymentCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackHyperlaneGasPaymentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackHyperlaneGasPaymentCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackHyperlaneGasPaymentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackHyperlaneIgpConfigs mocks base method.
func (m *MockTransaction) RollbackHyperlaneIgpConfigs(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackHyperlaneIgpConfigs", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackHyperlaneIgpConfigs indicates an expected call of RollbackHyperlaneIgpConfigs.
func (mr *MockTransactionMockRecorder) RollbackHyperlaneIgpConfigs(ctx, height any) *MockTransactionRollbackHyperlaneIgpConfigsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackHyperlaneIgpConfigs", reflect.TypeOf((*MockTransaction)(nil).RollbackHyperlaneIgpConfigs), ctx, height)
	return &MockTransactionRollbackHyperlaneIgpConfigsCall{Call: call}
}

// MockTransactionRollbackHyperlaneIgpConfigsCall wrap *gomock.Call
type MockTransactionRollbackHyperlaneIgpConfigsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackHyperlaneIgpConfigsCall) Return(arg0 error) *MockTransactionRollbackHyperlaneIgpConfigsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackHyperlaneIgpConfigsCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackHyperlaneIgpConfigsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackHyperlaneIgpConfigsCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackHyperlaneIgpConfigsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackHyperlaneIgps mocks base method.
func (m *MockTransaction) RollbackHyperlaneIgps(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackHyperlaneIgps", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackHyperlaneIgps indicates an expected call of RollbackHyperlaneIgps.
func (mr *MockTransactionMockRecorder) RollbackHyperlaneIgps(ctx, height any) *MockTransactionRollbackHyperlaneIgpsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackHyperlaneIgps", reflect.TypeOf((*MockTransaction)(nil).RollbackHyperlaneIgps), ctx, height)
	return &MockTransactionRollbackHyperlaneIgpsCall{Call: call}
}

// MockTransactionRollbackHyperlaneIgpsCall wrap *gomock.Call
type MockTransactionRollbackHyperlaneIgpsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackHyperlaneIgpsCall) Return(arg0 error) *MockTransactionRollbackHyperlaneIgpsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackHyperlaneIgpsCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackHyperlaneIgpsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackHyperlaneIgpsCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackHyperlaneIgpsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackHyperlaneMailbox mocks base method.
func (m *MockTransaction) RollbackHyperlaneMailbox(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackHyperlaneMailbox", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackHyperlaneMailbox indicates an expected call of RollbackHyperlaneMailbox.
func (mr *MockTransactionMockRecorder) RollbackHyperlaneMailbox(ctx, height any) *MockTransactionRollbackHyperlaneMailboxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackHyperlaneMailbox", reflect.TypeOf((*MockTransaction)(nil).RollbackHyperlaneMailbox), ctx, height)
	return &MockTransactionRollbackHyperlaneMailboxCall{Call: call}
}

// MockTransactionRollbackHyperlaneMailboxCall wrap *gomock.Call
type MockTransactionRollbackHyperlaneMailboxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackHyperlaneMailboxCall) Return(arg0 error) *MockTransactionRollbackHyperlaneMailboxCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackHyperlaneMailboxCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackHyperlaneMailboxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackHyperlaneMailboxCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackHyperlaneMailboxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackHyperlaneTokens mocks base method.
func (m *MockTransaction) RollbackHyperlaneTokens(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackHyperlaneTokens", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackHyperlaneTokens indicates an expected call of RollbackHyperlaneTokens.
func (mr *MockTransactionMockRecorder) RollbackHyperlaneTokens(ctx, height any) *MockTransactionRollbackHyperlaneTokensCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackHyperlaneTokens", reflect.TypeOf((*MockTransaction)(nil).RollbackHyperlaneTokens), ctx, height)
	return &MockTransactionRollbackHyperlaneTokensCall{Call: call}
}

// MockTransactionRollbackHyperlaneTokensCall wrap *gomock.Call
type MockTransactionRollbackHyperlaneTokensCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackHyperlaneTokensCall) Return(arg0 error) *MockTransactionRollbackHyperlaneTokensCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackHyperlaneTokensCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackHyperlaneTokensCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackHyperlaneTokensCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackHyperlaneTokensCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackHyperlaneTransfers mocks base method.
func (m *MockTransaction) RollbackHyperlaneTransfers(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackHyperlaneTransfers", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackHyperlaneTransfers indicates an expected call of RollbackHyperlaneTransfers.
func (mr *MockTransactionMockRecorder) RollbackHyperlaneTransfers(ctx, height any) *MockTransactionRollbackHyperlaneTransfersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackHyperlaneTransfers", reflect.TypeOf((*MockTransaction)(nil).RollbackHyperlaneTransfers), ctx, height)
	return &MockTransactionRollbackHyperlaneTransfersCall{Call: call}
}

// MockTransactionRollbackHyperlaneTransfersCall wrap *gomock.Call
type MockTransactionRollbackHyperlaneTransfersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackHyperlaneTransfersCall) Return(arg0 error) *MockTransactionRollbackHyperlaneTransfersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackHyperlaneTransfersCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackHyperlaneTransfersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackHyperlaneTransfersCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackHyperlaneTransfersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackIbcChannels mocks base method.
func (m *MockTransaction) RollbackIbcChannels(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackIbcChannels", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackIbcChannels indicates an expected call of RollbackIbcChannels.
func (mr *MockTransactionMockRecorder) RollbackIbcChannels(ctx, height any) *MockTransactionRollbackIbcChannelsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackIbcChannels", reflect.TypeOf((*MockTransaction)(nil).RollbackIbcChannels), ctx, height)
	return &MockTransactionRollbackIbcChannelsCall{Call: call}
}

// MockTransactionRollbackIbcChannelsCall wrap *gomock.Call
type MockTransactionRollbackIbcChannelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackIbcChannelsCall) Return(arg0 error) *MockTransactionRollbackIbcChannelsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackIbcChannelsCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackIbcChannelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackIbcChannelsCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackIbcChannelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackIbcClients mocks base method.
func (m *MockTransaction) RollbackIbcClients(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackIbcClients", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackIbcClients indicates an expected call of RollbackIbcClients.
func (mr *MockTransactionMockRecorder) RollbackIbcClients(ctx, height any) *MockTransactionRollbackIbcClientsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackIbcClients", reflect.TypeOf((*MockTransaction)(nil).RollbackIbcClients), ctx, height)
	return &MockTransactionRollbackIbcClientsCall{Call: call}
}

// MockTransactionRollbackIbcClientsCall wrap *gomock.Call
type MockTransactionRollbackIbcClientsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackIbcClientsCall) Return(arg0 error) *MockTransactionRollbackIbcClientsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackIbcClientsCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackIbcClientsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackIbcClientsCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackIbcClientsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackIbcConnections mocks base method.
func (m *MockTransaction) RollbackIbcConnections(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackIbcConnections", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackIbcConnections indicates an expected call of RollbackIbcConnections.
func (mr *MockTransactionMockRecorder) RollbackIbcConnections(ctx, height any) *MockTransactionRollbackIbcConnectionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackIbcConnections", reflect.TypeOf((*MockTransaction)(nil).RollbackIbcConnections), ctx, height)
	return &MockTransactionRollbackIbcConnectionsCall{Call: call}
}

// MockTransactionRollbackIbcConnectionsCall wrap *gomock.Call
type MockTransactionRollbackIbcConnectionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackIbcConnectionsCall) Return(arg0 error) *MockTransactionRollbackIbcConnectionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackIbcConnectionsCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackIbcConnectionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackIbcConnectionsCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackIbcConnectionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackIbcTransfers mocks base method.
func (m *MockTransaction) RollbackIbcTransfers(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackIbcTransfers", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackIbcTransfers indicates an expected call of RollbackIbcTransfers.
func (mr *MockTransactionMockRecorder) RollbackIbcTransfers(ctx, height any) *MockTransactionRollbackIbcTransfersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackIbcTransfers", reflect.TypeOf((*MockTransaction)(nil).RollbackIbcTransfers), ctx, height)
	return &MockTransactionRollbackIbcTransfersCall{Call: call}
}

// MockTransactionRollbackIbcTransfersCall wrap *gomock.Call
type MockTransactionRollbackIbcTransfersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackIbcTransfersCall) Return(arg0 error) *MockTransactionRollbackIbcTransfersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackIbcTransfersCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackIbcTransfersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackIbcTransfersCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackIbcTransfersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackJails mocks base method.
func (m *MockTransaction) RollbackJails(ctx context.Context, height types.Level) ([]storage.Jail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackJails", ctx, height)
	ret0, _ := ret[0].([]storage.Jail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackJails indicates an expected call of RollbackJails.
func (mr *MockTransactionMockRecorder) RollbackJails(ctx, height any) *MockTransactionRollbackJailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackJails", reflect.TypeOf((*MockTransaction)(nil).RollbackJails), ctx, height)
	return &MockTransactionRollbackJailsCall{Call: call}
}

// MockTransactionRollbackJailsCall wrap *gomock.Call
type MockTransactionRollbackJailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackJailsCall) Return(arg0 []storage.Jail, arg1 error) *MockTransactionRollbackJailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackJailsCall) Do(f func(context.Context, types.Level) ([]storage.Jail, error)) *MockTransactionRollbackJailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackJailsCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.Jail, error)) *MockTransactionRollbackJailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackMessageAddresses mocks base method.
func (m *MockTransaction) RollbackMessageAddresses(ctx context.Context, msgIds []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackMessageAddresses", ctx, msgIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackMessageAddresses indicates an expected call of RollbackMessageAddresses.
func (mr *MockTransactionMockRecorder) RollbackMessageAddresses(ctx, msgIds any) *MockTransactionRollbackMessageAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackMessageAddresses", reflect.TypeOf((*MockTransaction)(nil).RollbackMessageAddresses), ctx, msgIds)
	return &MockTransactionRollbackMessageAddressesCall{Call: call}
}

// MockTransactionRollbackMessageAddressesCall wrap *gomock.Call
type MockTransactionRollbackMessageAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackMessageAddressesCall) Return(err error) *MockTransactionRollbackMessageAddressesCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackMessageAddressesCall) Do(f func(context.Context, []uint64) error) *MockTransactionRollbackMessageAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackMessageAddressesCall) DoAndReturn(f func(context.Context, []uint64) error) *MockTransactionRollbackMessageAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackMessageValidators mocks base method.
func (m *MockTransaction) RollbackMessageValidators(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackMessageValidators", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackMessageValidators indicates an expected call of RollbackMessageValidators.
func (mr *MockTransactionMockRecorder) RollbackMessageValidators(ctx, height any) *MockTransactionRollbackMessageValidatorsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackMessageValidators", reflect.TypeOf((*MockTransaction)(nil).RollbackMessageValidators), ctx, height)
	return &MockTransactionRollbackMessageValidatorsCall{Call: call}
}

// MockTransactionRollbackMessageValidatorsCall wrap *gomock.Call
type MockTransactionRollbackMessageValidatorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackMessageValidatorsCall) Return(err error) *MockTransactionRollbackMessageValidatorsCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackMessageValidatorsCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackMessageValidatorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackMessageValidatorsCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackMessageValidatorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackMessages mocks base method.
func (m *MockTransaction) RollbackMessages(ctx context.Context, height types.Level) ([]storage.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackMessages", ctx, height)
	ret0, _ := ret[0].([]storage.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackMessages indicates an expected call of RollbackMessages.
func (mr *MockTransactionMockRecorder) RollbackMessages(ctx, height any) *MockTransactionRollbackMessagesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackMessages", reflect.TypeOf((*MockTransaction)(nil).RollbackMessages), ctx, height)
	return &MockTransactionRollbackMessagesCall{Call: call}
}

// MockTransactionRollbackMessagesCall wrap *gomock.Call
type MockTransactionRollbackMessagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackMessagesCall) Return(msgs []storage.Message, err error) *MockTransactionRollbackMessagesCall {
	c.Call = c.Call.Return(msgs, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackMessagesCall) Do(f func(context.Context, types.Level) ([]storage.Message, error)) *MockTransactionRollbackMessagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackMessagesCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.Message, error)) *MockTransactionRollbackMessagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackNamespaceMessages mocks base method.
func (m *MockTransaction) RollbackNamespaceMessages(ctx context.Context, height types.Level) ([]storage.NamespaceMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackNamespaceMessages", ctx, height)
	ret0, _ := ret[0].([]storage.NamespaceMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackNamespaceMessages indicates an expected call of RollbackNamespaceMessages.
func (mr *MockTransactionMockRecorder) RollbackNamespaceMessages(ctx, height any) *MockTransactionRollbackNamespaceMessagesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackNamespaceMessages", reflect.TypeOf((*MockTransaction)(nil).RollbackNamespaceMessages), ctx, height)
	return &MockTransactionRollbackNamespaceMessagesCall{Call: call}
}

// MockTransactionRollbackNamespaceMessagesCall wrap *gomock.Call
type MockTransactionRollbackNamespaceMessagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackNamespaceMessagesCall) Return(msgs []storage.NamespaceMessage, err error) *MockTransactionRollbackNamespaceMessagesCall {
	c.Call = c.Call.Return(msgs, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackNamespaceMessagesCall) Do(f func(context.Context, types.Level) ([]storage.NamespaceMessage, error)) *MockTransactionRollbackNamespaceMessagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackNamespaceMessagesCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.NamespaceMessage, error)) *MockTransactionRollbackNamespaceMessagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackNamespaces mocks base method.
func (m *MockTransaction) RollbackNamespaces(ctx context.Context, height types.Level) ([]storage.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackNamespaces", ctx, height)
	ret0, _ := ret[0].([]storage.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackNamespaces indicates an expected call of RollbackNamespaces.
func (mr *MockTransactionMockRecorder) RollbackNamespaces(ctx, height any) *MockTransactionRollbackNamespacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackNamespaces", reflect.TypeOf((*MockTransaction)(nil).RollbackNamespaces), ctx, height)
	return &MockTransactionRollbackNamespacesCall{Call: call}
}

// MockTransactionRollbackNamespacesCall wrap *gomock.Call
type MockTransactionRollbackNamespacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackNamespacesCall) Return(ns []storage.Namespace, err error) *MockTransactionRollbackNamespacesCall {
	c.Call = c.Call.Return(ns, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackNamespacesCall) Do(f func(context.Context, types.Level) ([]storage.Namespace, error)) *MockTransactionRollbackNamespacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackNamespacesCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.Namespace, error)) *MockTransactionRollbackNamespacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackProposals mocks base method.
func (m *MockTransaction) RollbackProposals(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackProposals", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackProposals indicates an expected call of RollbackProposals.
func (mr *MockTransactionMockRecorder) RollbackProposals(ctx, height any) *MockTransactionRollbackProposalsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackProposals", reflect.TypeOf((*MockTransaction)(nil).RollbackProposals), ctx, height)
	return &MockTransactionRollbackProposalsCall{Call: call}
}

// MockTransactionRollbackProposalsCall wrap *gomock.Call
type MockTransactionRollbackProposalsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackProposalsCall) Return(arg0 error) *MockTransactionRollbackProposalsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackProposalsCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackProposalsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackProposalsCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackProposalsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackRedelegations mocks base method.
func (m *MockTransaction) RollbackRedelegations(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackRedelegations", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackRedelegations indicates an expected call of RollbackRedelegations.
func (mr *MockTransactionMockRecorder) RollbackRedelegations(ctx, height any) *MockTransactionRollbackRedelegationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackRedelegations", reflect.TypeOf((*MockTransaction)(nil).RollbackRedelegations), ctx, height)
	return &MockTransactionRollbackRedelegationsCall{Call: call}
}

// MockTransactionRollbackRedelegationsCall wrap *gomock.Call
type MockTransactionRollbackRedelegationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackRedelegationsCall) Return(err error) *MockTransactionRollbackRedelegationsCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackRedelegationsCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackRedelegationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackRedelegationsCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackRedelegationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackSignals mocks base method.
func (m *MockTransaction) RollbackSignals(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackSignals", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackSignals indicates an expected call of RollbackSignals.
func (mr *MockTransactionMockRecorder) RollbackSignals(ctx, height any) *MockTransactionRollbackSignalsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackSignals", reflect.TypeOf((*MockTransaction)(nil).RollbackSignals), ctx, height)
	return &MockTransactionRollbackSignalsCall{Call: call}
}

// MockTransactionRollbackSignalsCall wrap *gomock.Call
type MockTransactionRollbackSignalsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackSignalsCall) Return(arg0 error) *MockTransactionRollbackSignalsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackSignalsCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackSignalsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackSignalsCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackSignalsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackSigners mocks base method.
func (m *MockTransaction) RollbackSigners(ctx context.Context, txIds []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackSigners", ctx, txIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackSigners indicates an expected call of RollbackSigners.
func (mr *MockTransactionMockRecorder) RollbackSigners(ctx, txIds any) *MockTransactionRollbackSignersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackSigners", reflect.TypeOf((*MockTransaction)(nil).RollbackSigners), ctx, txIds)
	return &MockTransactionRollbackSignersCall{Call: call}
}

// MockTransactionRollbackSignersCall wrap *gomock.Call
type MockTransactionRollbackSignersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackSignersCall) Return(err error) *MockTransactionRollbackSignersCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackSignersCall) Do(f func(context.Context, []uint64) error) *MockTransactionRollbackSignersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackSignersCall) DoAndReturn(f func(context.Context, []uint64) error) *MockTransactionRollbackSignersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackStakingLogs mocks base method.
func (m *MockTransaction) RollbackStakingLogs(ctx context.Context, height types.Level) ([]storage.StakingLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackStakingLogs", ctx, height)
	ret0, _ := ret[0].([]storage.StakingLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackStakingLogs indicates an expected call of RollbackStakingLogs.
func (mr *MockTransactionMockRecorder) RollbackStakingLogs(ctx, height any) *MockTransactionRollbackStakingLogsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackStakingLogs", reflect.TypeOf((*MockTransaction)(nil).RollbackStakingLogs), ctx, height)
	return &MockTransactionRollbackStakingLogsCall{Call: call}
}

// MockTransactionRollbackStakingLogsCall wrap *gomock.Call
type MockTransactionRollbackStakingLogsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackStakingLogsCall) Return(arg0 []storage.StakingLog, arg1 error) *MockTransactionRollbackStakingLogsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackStakingLogsCall) Do(f func(context.Context, types.Level) ([]storage.StakingLog, error)) *MockTransactionRollbackStakingLogsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackStakingLogsCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.StakingLog, error)) *MockTransactionRollbackStakingLogsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackTxs mocks base method.
func (m *MockTransaction) RollbackTxs(ctx context.Context, height types.Level) ([]storage.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTxs", ctx, height)
	ret0, _ := ret[0].([]storage.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackTxs indicates an expected call of RollbackTxs.
func (mr *MockTransactionMockRecorder) RollbackTxs(ctx, height any) *MockTransactionRollbackTxsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTxs", reflect.TypeOf((*MockTransaction)(nil).RollbackTxs), ctx, height)
	return &MockTransactionRollbackTxsCall{Call: call}
}

// MockTransactionRollbackTxsCall wrap *gomock.Call
type MockTransactionRollbackTxsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackTxsCall) Return(txs []storage.Tx, err error) *MockTransactionRollbackTxsCall {
	c.Call = c.Call.Return(txs, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackTxsCall) Do(f func(context.Context, types.Level) ([]storage.Tx, error)) *MockTransactionRollbackTxsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackTxsCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.Tx, error)) *MockTransactionRollbackTxsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackUndelegations mocks base method.
func (m *MockTransaction) RollbackUndelegations(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackUndelegations", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackUndelegations indicates an expected call of RollbackUndelegations.
func (mr *MockTransactionMockRecorder) RollbackUndelegations(ctx, height any) *MockTransactionRollbackUndelegationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackUndelegations", reflect.TypeOf((*MockTransaction)(nil).RollbackUndelegations), ctx, height)
	return &MockTransactionRollbackUndelegationsCall{Call: call}
}

// MockTransactionRollbackUndelegationsCall wrap *gomock.Call
type MockTransactionRollbackUndelegationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackUndelegationsCall) Return(err error) *MockTransactionRollbackUndelegationsCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackUndelegationsCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackUndelegationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackUndelegationsCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackUndelegationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackUpgrades mocks base method.
func (m *MockTransaction) RollbackUpgrades(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackUpgrades", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackUpgrades indicates an expected call of RollbackUpgrades.
func (mr *MockTransactionMockRecorder) RollbackUpgrades(ctx, height any) *MockTransactionRollbackUpgradesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackUpgrades", reflect.TypeOf((*MockTransaction)(nil).RollbackUpgrades), ctx, height)
	return &MockTransactionRollbackUpgradesCall{Call: call}
}

// MockTransactionRollbackUpgradesCall wrap *gomock.Call
type MockTransactionRollbackUpgradesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackUpgradesCall) Return(arg0 error) *MockTransactionRollbackUpgradesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackUpgradesCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackUpgradesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackUpgradesCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackUpgradesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackValidators mocks base method.
func (m *MockTransaction) RollbackValidators(ctx context.Context, height types.Level) ([]storage.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackValidators", ctx, height)
	ret0, _ := ret[0].([]storage.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackValidators indicates an expected call of RollbackValidators.
func (mr *MockTransactionMockRecorder) RollbackValidators(ctx, height any) *MockTransactionRollbackValidatorsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackValidators", reflect.TypeOf((*MockTransaction)(nil).RollbackValidators), ctx, height)
	return &MockTransactionRollbackValidatorsCall{Call: call}
}

// MockTransactionRollbackValidatorsCall wrap *gomock.Call
type MockTransactionRollbackValidatorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackValidatorsCall) Return(arg0 []storage.Validator, arg1 error) *MockTransactionRollbackValidatorsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackValidatorsCall) Do(f func(context.Context, types.Level) ([]storage.Validator, error)) *MockTransactionRollbackValidatorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackValidatorsCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.Validator, error)) *MockTransactionRollbackValidatorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackVestingAccounts mocks base method.
func (m *MockTransaction) RollbackVestingAccounts(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackVestingAccounts", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackVestingAccounts indicates an expected call of RollbackVestingAccounts.
func (mr *MockTransactionMockRecorder) RollbackVestingAccounts(ctx, height any) *MockTransactionRollbackVestingAccountsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackVestingAccounts", reflect.TypeOf((*MockTransaction)(nil).RollbackVestingAccounts), ctx, height)
	return &MockTransactionRollbackVestingAccountsCall{Call: call}
}

// MockTransactionRollbackVestingAccountsCall wrap *gomock.Call
type MockTransactionRollbackVestingAccountsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackVestingAccountsCall) Return(arg0 error) *MockTransactionRollbackVestingAccountsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackVestingAccountsCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackVestingAccountsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackVestingAccountsCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackVestingAccountsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackVestingPeriods mocks base method.
func (m *MockTransaction) RollbackVestingPeriods(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackVestingPeriods", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackVestingPeriods indicates an expected call of RollbackVestingPeriods.
func (mr *MockTransactionMockRecorder) RollbackVestingPeriods(ctx, height any) *MockTransactionRollbackVestingPeriodsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackVestingPeriods", reflect.TypeOf((*MockTransaction)(nil).RollbackVestingPeriods), ctx, height)
	return &MockTransactionRollbackVestingPeriodsCall{Call: call}
}

// MockTransactionRollbackVestingPeriodsCall wrap *gomock.Call
type MockTransactionRollbackVestingPeriodsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackVestingPeriodsCall) Return(arg0 error) *MockTransactionRollbackVestingPeriodsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackVestingPeriodsCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackVestingPeriodsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackVestingPeriodsCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackVestingPeriodsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackVotes mocks base method.
func (m *MockTransaction) RollbackVotes(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackVotes", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackVotes indicates an expected call of RollbackVotes.
func (mr *MockTransactionMockRecorder) RollbackVotes(ctx, height any) *MockTransactionRollbackVotesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackVotes", reflect.TypeOf((*MockTransaction)(nil).RollbackVotes), ctx, height)
	return &MockTransactionRollbackVotesCall{Call: call}
}

// MockTransactionRollbackVotesCall wrap *gomock.Call
type MockTransactionRollbackVotesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackVotesCall) Return(arg0 error) *MockTransactionRollbackVotesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackVotesCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackVotesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackVotesCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackVotesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveAddresses mocks base method.
func (m *MockTransaction) SaveAddresses(ctx context.Context, addresses ...*storage.Address) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range addresses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveAddresses", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAddresses indicates an expected call of SaveAddresses.
func (mr *MockTransactionMockRecorder) SaveAddresses(ctx any, addresses ...any) *MockTransactionSaveAddressesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, addresses...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAddresses", reflect.TypeOf((*MockTransaction)(nil).SaveAddresses), varargs...)
	return &MockTransactionSaveAddressesCall{Call: call}
}

// MockTransactionSaveAddressesCall wrap *gomock.Call
type MockTransactionSaveAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveAddressesCall) Return(arg0 int64, arg1 error) *MockTransactionSaveAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveAddressesCall) Do(f func(context.Context, ...*storage.Address) (int64, error)) *MockTransactionSaveAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveAddressesCall) DoAndReturn(f func(context.Context, ...*storage.Address) (int64, error)) *MockTransactionSaveAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveBalances mocks base method.
func (m *MockTransaction) SaveBalances(ctx context.Context, balances ...storage.Balance) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range balances {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBalances", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBalances indicates an expected call of SaveBalances.
func (mr *MockTransactionMockRecorder) SaveBalances(ctx any, balances ...any) *MockTransactionSaveBalancesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, balances...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBalances", reflect.TypeOf((*MockTransaction)(nil).SaveBalances), varargs...)
	return &MockTransactionSaveBalancesCall{Call: call}
}

// MockTransactionSaveBalancesCall wrap *gomock.Call
type MockTransactionSaveBalancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveBalancesCall) Return(arg0 error) *MockTransactionSaveBalancesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveBalancesCall) Do(f func(context.Context, ...storage.Balance) error) *MockTransactionSaveBalancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveBalancesCall) DoAndReturn(f func(context.Context, ...storage.Balance) error) *MockTransactionSaveBalancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveBlobLogs mocks base method.
func (m *MockTransaction) SaveBlobLogs(ctx context.Context, logs ...storage.BlobLog) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range logs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBlobLogs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBlobLogs indicates an expected call of SaveBlobLogs.
func (mr *MockTransactionMockRecorder) SaveBlobLogs(ctx any, logs ...any) *MockTransactionSaveBlobLogsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, logs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBlobLogs", reflect.TypeOf((*MockTransaction)(nil).SaveBlobLogs), varargs...)
	return &MockTransactionSaveBlobLogsCall{Call: call}
}

// MockTransactionSaveBlobLogsCall wrap *gomock.Call
type MockTransactionSaveBlobLogsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveBlobLogsCall) Return(arg0 error) *MockTransactionSaveBlobLogsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveBlobLogsCall) Do(f func(context.Context, ...storage.BlobLog) error) *MockTransactionSaveBlobLogsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveBlobLogsCall) DoAndReturn(f func(context.Context, ...storage.BlobLog) error) *MockTransactionSaveBlobLogsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveBlockSignatures mocks base method.
func (m *MockTransaction) SaveBlockSignatures(ctx context.Context, signs ...storage.BlockSignature) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range signs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBlockSignatures", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBlockSignatures indicates an expected call of SaveBlockSignatures.
func (mr *MockTransactionMockRecorder) SaveBlockSignatures(ctx any, signs ...any) *MockTransactionSaveBlockSignaturesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, signs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBlockSignatures", reflect.TypeOf((*MockTransaction)(nil).SaveBlockSignatures), varargs...)
	return &MockTransactionSaveBlockSignaturesCall{Call: call}
}

// MockTransactionSaveBlockSignaturesCall wrap *gomock.Call
type MockTransactionSaveBlockSignaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveBlockSignaturesCall) Return(arg0 error) *MockTransactionSaveBlockSignaturesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveBlockSignaturesCall) Do(f func(context.Context, ...storage.BlockSignature) error) *MockTransactionSaveBlockSignaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveBlockSignaturesCall) DoAndReturn(f func(context.Context, ...storage.BlockSignature) error) *MockTransactionSaveBlockSignaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveConstants mocks base method.
func (m *MockTransaction) SaveConstants(ctx context.Context, constants ...storage.Constant) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range constants {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveConstants", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConstants indicates an expected call of SaveConstants.
func (mr *MockTransactionMockRecorder) SaveConstants(ctx any, constants ...any) *MockTransactionSaveConstantsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, constants...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConstants", reflect.TypeOf((*MockTransaction)(nil).SaveConstants), varargs...)
	return &MockTransactionSaveConstantsCall{Call: call}
}

// MockTransactionSaveConstantsCall wrap *gomock.Call
type MockTransactionSaveConstantsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveConstantsCall) Return(arg0 error) *MockTransactionSaveConstantsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveConstantsCall) Do(f func(context.Context, ...storage.Constant) error) *MockTransactionSaveConstantsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveConstantsCall) DoAndReturn(f func(context.Context, ...storage.Constant) error) *MockTransactionSaveConstantsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveDelegations mocks base method.
func (m *MockTransaction) SaveDelegations(ctx context.Context, delegations ...storage.Delegation) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range delegations {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveDelegations", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDelegations indicates an expected call of SaveDelegations.
func (mr *MockTransactionMockRecorder) SaveDelegations(ctx any, delegations ...any) *MockTransactionSaveDelegationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, delegations...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDelegations", reflect.TypeOf((*MockTransaction)(nil).SaveDelegations), varargs...)
	return &MockTransactionSaveDelegationsCall{Call: call}
}

// MockTransactionSaveDelegationsCall wrap *gomock.Call
type MockTransactionSaveDelegationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveDelegationsCall) Return(arg0 error) *MockTransactionSaveDelegationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveDelegationsCall) Do(f func(context.Context, ...storage.Delegation) error) *MockTransactionSaveDelegationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveDelegationsCall) DoAndReturn(f func(context.Context, ...storage.Delegation) error) *MockTransactionSaveDelegationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveEvents mocks base method.
func (m *MockTransaction) SaveEvents(ctx context.Context, events ...storage.Event) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range events {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveEvents", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEvents indicates an expected call of SaveEvents.
func (mr *MockTransactionMockRecorder) SaveEvents(ctx any, events ...any) *MockTransactionSaveEventsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, events...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEvents", reflect.TypeOf((*MockTransaction)(nil).SaveEvents), varargs...)
	return &MockTransactionSaveEventsCall{Call: call}
}

// MockTransactionSaveEventsCall wrap *gomock.Call
type MockTransactionSaveEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveEventsCall) Return(arg0 error) *MockTransactionSaveEventsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveEventsCall) Do(f func(context.Context, ...storage.Event) error) *MockTransactionSaveEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveEventsCall) DoAndReturn(f func(context.Context, ...storage.Event) error) *MockTransactionSaveEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveGrants mocks base method.
func (m *MockTransaction) SaveGrants(ctx context.Context, grants ...storage.Grant) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range grants {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveGrants", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveGrants indicates an expected call of SaveGrants.
func (mr *MockTransactionMockRecorder) SaveGrants(ctx any, grants ...any) *MockTransactionSaveGrantsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, grants...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGrants", reflect.TypeOf((*MockTransaction)(nil).SaveGrants), varargs...)
	return &MockTransactionSaveGrantsCall{Call: call}
}

// MockTransactionSaveGrantsCall wrap *gomock.Call
type MockTransactionSaveGrantsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveGrantsCall) Return(arg0 error) *MockTransactionSaveGrantsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveGrantsCall) Do(f func(context.Context, ...storage.Grant) error) *MockTransactionSaveGrantsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveGrantsCall) DoAndReturn(f func(context.Context, ...storage.Grant) error) *MockTransactionSaveGrantsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveHyperlaneGasPayments mocks base method.
func (m *MockTransaction) SaveHyperlaneGasPayments(ctx context.Context, payments ...*storage.HLGasPayment) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range payments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveHyperlaneGasPayments", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHyperlaneGasPayments indicates an expected call of SaveHyperlaneGasPayments.
func (mr *MockTransactionMockRecorder) SaveHyperlaneGasPayments(ctx any, payments ...any) *MockTransactionSaveHyperlaneGasPaymentsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, payments...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHyperlaneGasPayments", reflect.TypeOf((*MockTransaction)(nil).SaveHyperlaneGasPayments), varargs...)
	return &MockTransactionSaveHyperlaneGasPaymentsCall{Call: call}
}

// MockTransactionSaveHyperlaneGasPaymentsCall wrap *gomock.Call
type MockTransactionSaveHyperlaneGasPaymentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveHyperlaneGasPaymentsCall) Return(arg0 error) *MockTransactionSaveHyperlaneGasPaymentsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveHyperlaneGasPaymentsCall) Do(f func(context.Context, ...*storage.HLGasPayment) error) *MockTransactionSaveHyperlaneGasPaymentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveHyperlaneGasPaymentsCall) DoAndReturn(f func(context.Context, ...*storage.HLGasPayment) error) *MockTransactionSaveHyperlaneGasPaymentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveHyperlaneIgpConfigs mocks base method.
func (m *MockTransaction) SaveHyperlaneIgpConfigs(ctx context.Context, configs ...storage.HLIGPConfig) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range configs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveHyperlaneIgpConfigs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHyperlaneIgpConfigs indicates an expected call of SaveHyperlaneIgpConfigs.
func (mr *MockTransactionMockRecorder) SaveHyperlaneIgpConfigs(ctx any, configs ...any) *MockTransactionSaveHyperlaneIgpConfigsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, configs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHyperlaneIgpConfigs", reflect.TypeOf((*MockTransaction)(nil).SaveHyperlaneIgpConfigs), varargs...)
	return &MockTransactionSaveHyperlaneIgpConfigsCall{Call: call}
}

// MockTransactionSaveHyperlaneIgpConfigsCall wrap *gomock.Call
type MockTransactionSaveHyperlaneIgpConfigsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveHyperlaneIgpConfigsCall) Return(arg0 error) *MockTransactionSaveHyperlaneIgpConfigsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveHyperlaneIgpConfigsCall) Do(f func(context.Context, ...storage.HLIGPConfig) error) *MockTransactionSaveHyperlaneIgpConfigsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveHyperlaneIgpConfigsCall) DoAndReturn(f func(context.Context, ...storage.HLIGPConfig) error) *MockTransactionSaveHyperlaneIgpConfigsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveHyperlaneIgps mocks base method.
func (m *MockTransaction) SaveHyperlaneIgps(ctx context.Context, igps ...*storage.HLIGP) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range igps {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveHyperlaneIgps", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHyperlaneIgps indicates an expected call of SaveHyperlaneIgps.
func (mr *MockTransactionMockRecorder) SaveHyperlaneIgps(ctx any, igps ...any) *MockTransactionSaveHyperlaneIgpsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, igps...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHyperlaneIgps", reflect.TypeOf((*MockTransaction)(nil).SaveHyperlaneIgps), varargs...)
	return &MockTransactionSaveHyperlaneIgpsCall{Call: call}
}

// MockTransactionSaveHyperlaneIgpsCall wrap *gomock.Call
type MockTransactionSaveHyperlaneIgpsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveHyperlaneIgpsCall) Return(arg0 error) *MockTransactionSaveHyperlaneIgpsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveHyperlaneIgpsCall) Do(f func(context.Context, ...*storage.HLIGP) error) *MockTransactionSaveHyperlaneIgpsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveHyperlaneIgpsCall) DoAndReturn(f func(context.Context, ...*storage.HLIGP) error) *MockTransactionSaveHyperlaneIgpsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveHyperlaneMailbox mocks base method.
func (m *MockTransaction) SaveHyperlaneMailbox(ctx context.Context, mailbox ...*storage.HLMailbox) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range mailbox {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveHyperlaneMailbox", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHyperlaneMailbox indicates an expected call of SaveHyperlaneMailbox.
func (mr *MockTransactionMockRecorder) SaveHyperlaneMailbox(ctx any, mailbox ...any) *MockTransactionSaveHyperlaneMailboxCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, mailbox...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHyperlaneMailbox", reflect.TypeOf((*MockTransaction)(nil).SaveHyperlaneMailbox), varargs...)
	return &MockTransactionSaveHyperlaneMailboxCall{Call: call}
}

// MockTransactionSaveHyperlaneMailboxCall wrap *gomock.Call
type MockTransactionSaveHyperlaneMailboxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveHyperlaneMailboxCall) Return(arg0 error) *MockTransactionSaveHyperlaneMailboxCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveHyperlaneMailboxCall) Do(f func(context.Context, ...*storage.HLMailbox) error) *MockTransactionSaveHyperlaneMailboxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveHyperlaneMailboxCall) DoAndReturn(f func(context.Context, ...*storage.HLMailbox) error) *MockTransactionSaveHyperlaneMailboxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveHyperlaneTokens mocks base method.
func (m *MockTransaction) SaveHyperlaneTokens(ctx context.Context, tokens ...*storage.HLToken) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range tokens {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveHyperlaneTokens", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHyperlaneTokens indicates an expected call of SaveHyperlaneTokens.
func (mr *MockTransactionMockRecorder) SaveHyperlaneTokens(ctx any, tokens ...any) *MockTransactionSaveHyperlaneTokensCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, tokens...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHyperlaneTokens", reflect.TypeOf((*MockTransaction)(nil).SaveHyperlaneTokens), varargs...)
	return &MockTransactionSaveHyperlaneTokensCall{Call: call}
}

// MockTransactionSaveHyperlaneTokensCall wrap *gomock.Call
type MockTransactionSaveHyperlaneTokensCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveHyperlaneTokensCall) Return(arg0 error) *MockTransactionSaveHyperlaneTokensCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveHyperlaneTokensCall) Do(f func(context.Context, ...*storage.HLToken) error) *MockTransactionSaveHyperlaneTokensCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveHyperlaneTokensCall) DoAndReturn(f func(context.Context, ...*storage.HLToken) error) *MockTransactionSaveHyperlaneTokensCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveHyperlaneTransfers mocks base method.
func (m *MockTransaction) SaveHyperlaneTransfers(ctx context.Context, transfers ...*storage.HLTransfer) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range transfers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveHyperlaneTransfers", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHyperlaneTransfers indicates an expected call of SaveHyperlaneTransfers.
func (mr *MockTransactionMockRecorder) SaveHyperlaneTransfers(ctx any, transfers ...any) *MockTransactionSaveHyperlaneTransfersCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, transfers...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHyperlaneTransfers", reflect.TypeOf((*MockTransaction)(nil).SaveHyperlaneTransfers), varargs...)
	return &MockTransactionSaveHyperlaneTransfersCall{Call: call}
}

// MockTransactionSaveHyperlaneTransfersCall wrap *gomock.Call
type MockTransactionSaveHyperlaneTransfersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveHyperlaneTransfersCall) Return(arg0 error) *MockTransactionSaveHyperlaneTransfersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveHyperlaneTransfersCall) Do(f func(context.Context, ...*storage.HLTransfer) error) *MockTransactionSaveHyperlaneTransfersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveHyperlaneTransfersCall) DoAndReturn(f func(context.Context, ...*storage.HLTransfer) error) *MockTransactionSaveHyperlaneTransfersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveIbcChannels mocks base method.
func (m *MockTransaction) SaveIbcChannels(ctx context.Context, channels ...*storage.IbcChannel) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveIbcChannels", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveIbcChannels indicates an expected call of SaveIbcChannels.
func (mr *MockTransactionMockRecorder) SaveIbcChannels(ctx any, channels ...any) *MockTransactionSaveIbcChannelsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, channels...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveIbcChannels", reflect.TypeOf((*MockTransaction)(nil).SaveIbcChannels), varargs...)
	return &MockTransactionSaveIbcChannelsCall{Call: call}
}

// MockTransactionSaveIbcChannelsCall wrap *gomock.Call
type MockTransactionSaveIbcChannelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveIbcChannelsCall) Return(arg0 error) *MockTransactionSaveIbcChannelsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveIbcChannelsCall) Do(f func(context.Context, ...*storage.IbcChannel) error) *MockTransactionSaveIbcChannelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveIbcChannelsCall) DoAndReturn(f func(context.Context, ...*storage.IbcChannel) error) *MockTransactionSaveIbcChannelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveIbcClients mocks base method.
func (m *MockTransaction) SaveIbcClients(ctx context.Context, clients ...*storage.IbcClient) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range clients {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveIbcClients", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveIbcClients indicates an expected call of SaveIbcClients.
func (mr *MockTransactionMockRecorder) SaveIbcClients(ctx any, clients ...any) *MockTransactionSaveIbcClientsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, clients...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveIbcClients", reflect.TypeOf((*MockTransaction)(nil).SaveIbcClients), varargs...)
	return &MockTransactionSaveIbcClientsCall{Call: call}
}

// MockTransactionSaveIbcClientsCall wrap *gomock.Call
type MockTransactionSaveIbcClientsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveIbcClientsCall) Return(arg0 int64, arg1 error) *MockTransactionSaveIbcClientsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveIbcClientsCall) Do(f func(context.Context, ...*storage.IbcClient) (int64, error)) *MockTransactionSaveIbcClientsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveIbcClientsCall) DoAndReturn(f func(context.Context, ...*storage.IbcClient) (int64, error)) *MockTransactionSaveIbcClientsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveIbcConnections mocks base method.
func (m *MockTransaction) SaveIbcConnections(ctx context.Context, connections ...*storage.IbcConnection) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range connections {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveIbcConnections", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveIbcConnections indicates an expected call of SaveIbcConnections.
func (mr *MockTransactionMockRecorder) SaveIbcConnections(ctx any, connections ...any) *MockTransactionSaveIbcConnectionsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, connections...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveIbcConnections", reflect.TypeOf((*MockTransaction)(nil).SaveIbcConnections), varargs...)
	return &MockTransactionSaveIbcConnectionsCall{Call: call}
}

// MockTransactionSaveIbcConnectionsCall wrap *gomock.Call
type MockTransactionSaveIbcConnectionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveIbcConnectionsCall) Return(arg0 error) *MockTransactionSaveIbcConnectionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveIbcConnectionsCall) Do(f func(context.Context, ...*storage.IbcConnection) error) *MockTransactionSaveIbcConnectionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveIbcConnectionsCall) DoAndReturn(f func(context.Context, ...*storage.IbcConnection) error) *MockTransactionSaveIbcConnectionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveIbcTransfers mocks base method.
func (m *MockTransaction) SaveIbcTransfers(ctx context.Context, transfers ...*storage.IbcTransfer) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range transfers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveIbcTransfers", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveIbcTransfers indicates an expected call of SaveIbcTransfers.
func (mr *MockTransactionMockRecorder) SaveIbcTransfers(ctx any, transfers ...any) *MockTransactionSaveIbcTransfersCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, transfers...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveIbcTransfers", reflect.TypeOf((*MockTransaction)(nil).SaveIbcTransfers), varargs...)
	return &MockTransactionSaveIbcTransfersCall{Call: call}
}

// MockTransactionSaveIbcTransfersCall wrap *gomock.Call
type MockTransactionSaveIbcTransfersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveIbcTransfersCall) Return(arg0 error) *MockTransactionSaveIbcTransfersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveIbcTransfersCall) Do(f func(context.Context, ...*storage.IbcTransfer) error) *MockTransactionSaveIbcTransfersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveIbcTransfersCall) DoAndReturn(f func(context.Context, ...*storage.IbcTransfer) error) *MockTransactionSaveIbcTransfersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveJails mocks base method.
func (m *MockTransaction) SaveJails(ctx context.Context, jails ...storage.Jail) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range jails {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveJails", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveJails indicates an expected call of SaveJails.
func (mr *MockTransactionMockRecorder) SaveJails(ctx any, jails ...any) *MockTransactionSaveJailsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, jails...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveJails", reflect.TypeOf((*MockTransaction)(nil).SaveJails), varargs...)
	return &MockTransactionSaveJailsCall{Call: call}
}

// MockTransactionSaveJailsCall wrap *gomock.Call
type MockTransactionSaveJailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveJailsCall) Return(arg0 error) *MockTransactionSaveJailsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveJailsCall) Do(f func(context.Context, ...storage.Jail) error) *MockTransactionSaveJailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveJailsCall) DoAndReturn(f func(context.Context, ...storage.Jail) error) *MockTransactionSaveJailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveMessages mocks base method.
func (m *MockTransaction) SaveMessages(ctx context.Context, msgs ...*storage.Message) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveMessages", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMessages indicates an expected call of SaveMessages.
func (mr *MockTransactionMockRecorder) SaveMessages(ctx any, msgs ...any) *MockTransactionSaveMessagesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, msgs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessages", reflect.TypeOf((*MockTransaction)(nil).SaveMessages), varargs...)
	return &MockTransactionSaveMessagesCall{Call: call}
}

// MockTransactionSaveMessagesCall wrap *gomock.Call
type MockTransactionSaveMessagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveMessagesCall) Return(arg0 error) *MockTransactionSaveMessagesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveMessagesCall) Do(f func(context.Context, ...*storage.Message) error) *MockTransactionSaveMessagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveMessagesCall) DoAndReturn(f func(context.Context, ...*storage.Message) error) *MockTransactionSaveMessagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveMsgAddresses mocks base method.
func (m *MockTransaction) SaveMsgAddresses(ctx context.Context, addresses ...storage.MsgAddress) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range addresses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveMsgAddresses", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMsgAddresses indicates an expected call of SaveMsgAddresses.
func (mr *MockTransactionMockRecorder) SaveMsgAddresses(ctx any, addresses ...any) *MockTransactionSaveMsgAddressesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, addresses...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMsgAddresses", reflect.TypeOf((*MockTransaction)(nil).SaveMsgAddresses), varargs...)
	return &MockTransactionSaveMsgAddressesCall{Call: call}
}

// MockTransactionSaveMsgAddressesCall wrap *gomock.Call
type MockTransactionSaveMsgAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveMsgAddressesCall) Return(arg0 error) *MockTransactionSaveMsgAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveMsgAddressesCall) Do(f func(context.Context, ...storage.MsgAddress) error) *MockTransactionSaveMsgAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveMsgAddressesCall) DoAndReturn(f func(context.Context, ...storage.MsgAddress) error) *MockTransactionSaveMsgAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveMsgValidator mocks base method.
func (m *MockTransaction) SaveMsgValidator(ctx context.Context, validatorMsgs ...storage.MsgValidator) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range validatorMsgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveMsgValidator", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMsgValidator indicates an expected call of SaveMsgValidator.
func (mr *MockTransactionMockRecorder) SaveMsgValidator(ctx any, validatorMsgs ...any) *MockTransactionSaveMsgValidatorCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, validatorMsgs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMsgValidator", reflect.TypeOf((*MockTransaction)(nil).SaveMsgValidator), varargs...)
	return &MockTransactionSaveMsgValidatorCall{Call: call}
}

// MockTransactionSaveMsgValidatorCall wrap *gomock.Call
type MockTransactionSaveMsgValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveMsgValidatorCall) Return(arg0 error) *MockTransactionSaveMsgValidatorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveMsgValidatorCall) Do(f func(context.Context, ...storage.MsgValidator) error) *MockTransactionSaveMsgValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveMsgValidatorCall) DoAndReturn(f func(context.Context, ...storage.MsgValidator) error) *MockTransactionSaveMsgValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveNamespaceMessage mocks base method.
func (m *MockTransaction) SaveNamespaceMessage(ctx context.Context, nsMsgs ...storage.NamespaceMessage) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range nsMsgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveNamespaceMessage", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNamespaceMessage indicates an expected call of SaveNamespaceMessage.
func (mr *MockTransactionMockRecorder) SaveNamespaceMessage(ctx any, nsMsgs ...any) *MockTransactionSaveNamespaceMessageCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, nsMsgs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNamespaceMessage", reflect.TypeOf((*MockTransaction)(nil).SaveNamespaceMessage), varargs...)
	return &MockTransactionSaveNamespaceMessageCall{Call: call}
}

// MockTransactionSaveNamespaceMessageCall wrap *gomock.Call
type MockTransactionSaveNamespaceMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveNamespaceMessageCall) Return(arg0 error) *MockTransactionSaveNamespaceMessageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveNamespaceMessageCall) Do(f func(context.Context, ...storage.NamespaceMessage) error) *MockTransactionSaveNamespaceMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveNamespaceMessageCall) DoAndReturn(f func(context.Context, ...storage.NamespaceMessage) error) *MockTransactionSaveNamespaceMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveNamespaces mocks base method.
func (m *MockTransaction) SaveNamespaces(ctx context.Context, namespaces ...*storage.Namespace) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range namespaces {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveNamespaces", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveNamespaces indicates an expected call of SaveNamespaces.
func (mr *MockTransactionMockRecorder) SaveNamespaces(ctx any, namespaces ...any) *MockTransactionSaveNamespacesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, namespaces...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNamespaces", reflect.TypeOf((*MockTransaction)(nil).SaveNamespaces), varargs...)
	return &MockTransactionSaveNamespacesCall{Call: call}
}

// MockTransactionSaveNamespacesCall wrap *gomock.Call
type MockTransactionSaveNamespacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveNamespacesCall) Return(arg0 int64, arg1 error) *MockTransactionSaveNamespacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveNamespacesCall) Do(f func(context.Context, ...*storage.Namespace) (int64, error)) *MockTransactionSaveNamespacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveNamespacesCall) DoAndReturn(f func(context.Context, ...*storage.Namespace) (int64, error)) *MockTransactionSaveNamespacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveProposals mocks base method.
func (m *MockTransaction) SaveProposals(ctx context.Context, proposals ...*storage.Proposal) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range proposals {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveProposals", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveProposals indicates an expected call of SaveProposals.
func (mr *MockTransactionMockRecorder) SaveProposals(ctx any, proposals ...any) *MockTransactionSaveProposalsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, proposals...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProposals", reflect.TypeOf((*MockTransaction)(nil).SaveProposals), varargs...)
	return &MockTransactionSaveProposalsCall{Call: call}
}

// MockTransactionSaveProposalsCall wrap *gomock.Call
type MockTransactionSaveProposalsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveProposalsCall) Return(arg0 int64, arg1 error) *MockTransactionSaveProposalsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveProposalsCall) Do(f func(context.Context, ...*storage.Proposal) (int64, error)) *MockTransactionSaveProposalsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveProposalsCall) DoAndReturn(f func(context.Context, ...*storage.Proposal) (int64, error)) *MockTransactionSaveProposalsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveProviders mocks base method.
func (m *MockTransaction) SaveProviders(ctx context.Context, providers ...storage.RollupProvider) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range providers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveProviders", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProviders indicates an expected call of SaveProviders.
func (mr *MockTransactionMockRecorder) SaveProviders(ctx any, providers ...any) *MockTransactionSaveProvidersCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, providers...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProviders", reflect.TypeOf((*MockTransaction)(nil).SaveProviders), varargs...)
	return &MockTransactionSaveProvidersCall{Call: call}
}

// MockTransactionSaveProvidersCall wrap *gomock.Call
type MockTransactionSaveProvidersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveProvidersCall) Return(arg0 error) *MockTransactionSaveProvidersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveProvidersCall) Do(f func(context.Context, ...storage.RollupProvider) error) *MockTransactionSaveProvidersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveProvidersCall) DoAndReturn(f func(context.Context, ...storage.RollupProvider) error) *MockTransactionSaveProvidersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveRedelegations mocks base method.
func (m *MockTransaction) SaveRedelegations(ctx context.Context, redelegations ...storage.Redelegation) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range redelegations {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveRedelegations", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRedelegations indicates an expected call of SaveRedelegations.
func (mr *MockTransactionMockRecorder) SaveRedelegations(ctx any, redelegations ...any) *MockTransactionSaveRedelegationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, redelegations...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRedelegations", reflect.TypeOf((*MockTransaction)(nil).SaveRedelegations), varargs...)
	return &MockTransactionSaveRedelegationsCall{Call: call}
}

// MockTransactionSaveRedelegationsCall wrap *gomock.Call
type MockTransactionSaveRedelegationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveRedelegationsCall) Return(arg0 error) *MockTransactionSaveRedelegationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveRedelegationsCall) Do(f func(context.Context, ...storage.Redelegation) error) *MockTransactionSaveRedelegationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveRedelegationsCall) DoAndReturn(f func(context.Context, ...storage.Redelegation) error) *MockTransactionSaveRedelegationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveRollup mocks base method.
func (m *MockTransaction) SaveRollup(ctx context.Context, rollup *storage.Rollup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRollup", ctx, rollup)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRollup indicates an expected call of SaveRollup.
func (mr *MockTransactionMockRecorder) SaveRollup(ctx, rollup any) *MockTransactionSaveRollupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRollup", reflect.TypeOf((*MockTransaction)(nil).SaveRollup), ctx, rollup)
	return &MockTransactionSaveRollupCall{Call: call}
}

// MockTransactionSaveRollupCall wrap *gomock.Call
type MockTransactionSaveRollupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveRollupCall) Return(arg0 error) *MockTransactionSaveRollupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveRollupCall) Do(f func(context.Context, *storage.Rollup) error) *MockTransactionSaveRollupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveRollupCall) DoAndReturn(f func(context.Context, *storage.Rollup) error) *MockTransactionSaveRollupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveSignals mocks base method.
func (m *MockTransaction) SaveSignals(ctx context.Context, signals ...*storage.SignalVersion) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range signals {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveSignals", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSignals indicates an expected call of SaveSignals.
func (mr *MockTransactionMockRecorder) SaveSignals(ctx any, signals ...any) *MockTransactionSaveSignalsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, signals...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSignals", reflect.TypeOf((*MockTransaction)(nil).SaveSignals), varargs...)
	return &MockTransactionSaveSignalsCall{Call: call}
}

// MockTransactionSaveSignalsCall wrap *gomock.Call
type MockTransactionSaveSignalsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveSignalsCall) Return(arg0 error) *MockTransactionSaveSignalsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveSignalsCall) Do(f func(context.Context, ...*storage.SignalVersion) error) *MockTransactionSaveSignalsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveSignalsCall) DoAndReturn(f func(context.Context, ...*storage.SignalVersion) error) *MockTransactionSaveSignalsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveSigners mocks base method.
func (m *MockTransaction) SaveSigners(ctx context.Context, addresses ...storage.Signer) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range addresses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveSigners", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSigners indicates an expected call of SaveSigners.
func (mr *MockTransactionMockRecorder) SaveSigners(ctx any, addresses ...any) *MockTransactionSaveSignersCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, addresses...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSigners", reflect.TypeOf((*MockTransaction)(nil).SaveSigners), varargs...)
	return &MockTransactionSaveSignersCall{Call: call}
}

// MockTransactionSaveSignersCall wrap *gomock.Call
type MockTransactionSaveSignersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveSignersCall) Return(arg0 error) *MockTransactionSaveSignersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveSignersCall) Do(f func(context.Context, ...storage.Signer) error) *MockTransactionSaveSignersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveSignersCall) DoAndReturn(f func(context.Context, ...storage.Signer) error) *MockTransactionSaveSignersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveStakingLogs mocks base method.
func (m *MockTransaction) SaveStakingLogs(ctx context.Context, logs ...storage.StakingLog) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range logs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveStakingLogs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStakingLogs indicates an expected call of SaveStakingLogs.
func (mr *MockTransactionMockRecorder) SaveStakingLogs(ctx any, logs ...any) *MockTransactionSaveStakingLogsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, logs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStakingLogs", reflect.TypeOf((*MockTransaction)(nil).SaveStakingLogs), varargs...)
	return &MockTransactionSaveStakingLogsCall{Call: call}
}

// MockTransactionSaveStakingLogsCall wrap *gomock.Call
type MockTransactionSaveStakingLogsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveStakingLogsCall) Return(arg0 error) *MockTransactionSaveStakingLogsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveStakingLogsCall) Do(f func(context.Context, ...storage.StakingLog) error) *MockTransactionSaveStakingLogsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveStakingLogsCall) DoAndReturn(f func(context.Context, ...storage.StakingLog) error) *MockTransactionSaveStakingLogsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveTransactions mocks base method.
func (m *MockTransaction) SaveTransactions(ctx context.Context, txs ...storage.Tx) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range txs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveTransactions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTransactions indicates an expected call of SaveTransactions.
func (mr *MockTransactionMockRecorder) SaveTransactions(ctx any, txs ...any) *MockTransactionSaveTransactionsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, txs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransactions", reflect.TypeOf((*MockTransaction)(nil).SaveTransactions), varargs...)
	return &MockTransactionSaveTransactionsCall{Call: call}
}

// MockTransactionSaveTransactionsCall wrap *gomock.Call
type MockTransactionSaveTransactionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveTransactionsCall) Return(arg0 error) *MockTransactionSaveTransactionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveTransactionsCall) Do(f func(context.Context, ...storage.Tx) error) *MockTransactionSaveTransactionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveTransactionsCall) DoAndReturn(f func(context.Context, ...storage.Tx) error) *MockTransactionSaveTransactionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveUndelegations mocks base method.
func (m *MockTransaction) SaveUndelegations(ctx context.Context, undelegations ...storage.Undelegation) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range undelegations {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveUndelegations", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUndelegations indicates an expected call of SaveUndelegations.
func (mr *MockTransactionMockRecorder) SaveUndelegations(ctx any, undelegations ...any) *MockTransactionSaveUndelegationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, undelegations...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUndelegations", reflect.TypeOf((*MockTransaction)(nil).SaveUndelegations), varargs...)
	return &MockTransactionSaveUndelegationsCall{Call: call}
}

// MockTransactionSaveUndelegationsCall wrap *gomock.Call
type MockTransactionSaveUndelegationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveUndelegationsCall) Return(arg0 error) *MockTransactionSaveUndelegationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveUndelegationsCall) Do(f func(context.Context, ...storage.Undelegation) error) *MockTransactionSaveUndelegationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveUndelegationsCall) DoAndReturn(f func(context.Context, ...storage.Undelegation) error) *MockTransactionSaveUndelegationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveUpgrades mocks base method.
func (m *MockTransaction) SaveUpgrades(ctx context.Context, signals ...*storage.Upgrade) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range signals {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveUpgrades", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUpgrades indicates an expected call of SaveUpgrades.
func (mr *MockTransactionMockRecorder) SaveUpgrades(ctx any, signals ...any) *MockTransactionSaveUpgradesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, signals...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUpgrades", reflect.TypeOf((*MockTransaction)(nil).SaveUpgrades), varargs...)
	return &MockTransactionSaveUpgradesCall{Call: call}
}

// MockTransactionSaveUpgradesCall wrap *gomock.Call
type MockTransactionSaveUpgradesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveUpgradesCall) Return(arg0 error) *MockTransactionSaveUpgradesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveUpgradesCall) Do(f func(context.Context, ...*storage.Upgrade) error) *MockTransactionSaveUpgradesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveUpgradesCall) DoAndReturn(f func(context.Context, ...*storage.Upgrade) error) *MockTransactionSaveUpgradesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveValidators mocks base method.
func (m *MockTransaction) SaveValidators(ctx context.Context, validators ...*storage.Validator) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range validators {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveValidators", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveValidators indicates an expected call of SaveValidators.
func (mr *MockTransactionMockRecorder) SaveValidators(ctx any, validators ...any) *MockTransactionSaveValidatorsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, validators...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveValidators", reflect.TypeOf((*MockTransaction)(nil).SaveValidators), varargs...)
	return &MockTransactionSaveValidatorsCall{Call: call}
}

// MockTransactionSaveValidatorsCall wrap *gomock.Call
type MockTransactionSaveValidatorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveValidatorsCall) Return(arg0 int, arg1 error) *MockTransactionSaveValidatorsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveValidatorsCall) Do(f func(context.Context, ...*storage.Validator) (int, error)) *MockTransactionSaveValidatorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveValidatorsCall) DoAndReturn(f func(context.Context, ...*storage.Validator) (int, error)) *MockTransactionSaveValidatorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveVestingAccounts mocks base method.
func (m *MockTransaction) SaveVestingAccounts(ctx context.Context, accounts ...*storage.VestingAccount) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range accounts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveVestingAccounts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVestingAccounts indicates an expected call of SaveVestingAccounts.
func (mr *MockTransactionMockRecorder) SaveVestingAccounts(ctx any, accounts ...any) *MockTransactionSaveVestingAccountsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, accounts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVestingAccounts", reflect.TypeOf((*MockTransaction)(nil).SaveVestingAccounts), varargs...)
	return &MockTransactionSaveVestingAccountsCall{Call: call}
}

// MockTransactionSaveVestingAccountsCall wrap *gomock.Call
type MockTransactionSaveVestingAccountsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveVestingAccountsCall) Return(arg0 error) *MockTransactionSaveVestingAccountsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveVestingAccountsCall) Do(f func(context.Context, ...*storage.VestingAccount) error) *MockTransactionSaveVestingAccountsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveVestingAccountsCall) DoAndReturn(f func(context.Context, ...*storage.VestingAccount) error) *MockTransactionSaveVestingAccountsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveVestingPeriods mocks base method.
func (m *MockTransaction) SaveVestingPeriods(ctx context.Context, periods ...storage.VestingPeriod) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range periods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveVestingPeriods", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVestingPeriods indicates an expected call of SaveVestingPeriods.
func (mr *MockTransactionMockRecorder) SaveVestingPeriods(ctx any, periods ...any) *MockTransactionSaveVestingPeriodsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, periods...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVestingPeriods", reflect.TypeOf((*MockTransaction)(nil).SaveVestingPeriods), varargs...)
	return &MockTransactionSaveVestingPeriodsCall{Call: call}
}

// MockTransactionSaveVestingPeriodsCall wrap *gomock.Call
type MockTransactionSaveVestingPeriodsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveVestingPeriodsCall) Return(arg0 error) *MockTransactionSaveVestingPeriodsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveVestingPeriodsCall) Do(f func(context.Context, ...storage.VestingPeriod) error) *MockTransactionSaveVestingPeriodsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveVestingPeriodsCall) DoAndReturn(f func(context.Context, ...storage.VestingPeriod) error) *MockTransactionSaveVestingPeriodsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveVotes mocks base method.
func (m *MockTransaction) SaveVotes(ctx context.Context, votes ...*storage.Vote) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range votes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveVotes", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVotes indicates an expected call of SaveVotes.
func (mr *MockTransactionMockRecorder) SaveVotes(ctx any, votes ...any) *MockTransactionSaveVotesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, votes...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVotes", reflect.TypeOf((*MockTransaction)(nil).SaveVotes), varargs...)
	return &MockTransactionSaveVotesCall{Call: call}
}

// MockTransactionSaveVotesCall wrap *gomock.Call
type MockTransactionSaveVotesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveVotesCall) Return(arg0 error) *MockTransactionSaveVotesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveVotesCall) Do(f func(context.Context, ...*storage.Vote) error) *MockTransactionSaveVotesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveVotesCall) DoAndReturn(f func(context.Context, ...*storage.Vote) error) *MockTransactionSaveVotesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// State mocks base method.
func (m *MockTransaction) State(ctx context.Context, name string) (storage.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State", ctx, name)
	ret0, _ := ret[0].(storage.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State.
func (mr *MockTransactionMockRecorder) State(ctx, name any) *MockTransactionStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockTransaction)(nil).State), ctx, name)
	return &MockTransactionStateCall{Call: call}
}

// MockTransactionStateCall wrap *gomock.Call
type MockTransactionStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionStateCall) Return(state storage.State, err error) *MockTransactionStateCall {
	c.Call = c.Call.Return(state, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionStateCall) Do(f func(context.Context, string) (storage.State, error)) *MockTransactionStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionStateCall) DoAndReturn(f func(context.Context, string) (storage.State, error)) *MockTransactionStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tx mocks base method.
func (m *MockTransaction) Tx() *bun.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx")
	ret0, _ := ret[0].(*bun.Tx)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockTransactionMockRecorder) Tx() *MockTransactionTxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockTransaction)(nil).Tx))
	return &MockTransactionTxCall{Call: call}
}

// MockTransactionTxCall wrap *gomock.Call
type MockTransactionTxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionTxCall) Return(arg0 *bun.Tx) *MockTransactionTxCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionTxCall) Do(f func() *bun.Tx) *MockTransactionTxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionTxCall) DoAndReturn(f func() *bun.Tx) *MockTransactionTxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockTransaction) Update(ctx context.Context, model any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTransactionMockRecorder) Update(ctx, model any) *MockTransactionUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransaction)(nil).Update), ctx, model)
	return &MockTransactionUpdateCall{Call: call}
}

// MockTransactionUpdateCall wrap *gomock.Call
type MockTransactionUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionUpdateCall) Return(arg0 error) *MockTransactionUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionUpdateCall) Do(f func(context.Context, any) error) *MockTransactionUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionUpdateCall) DoAndReturn(f func(context.Context, any) error) *MockTransactionUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateRollup mocks base method.
func (m *MockTransaction) UpdateRollup(ctx context.Context, rollup *storage.Rollup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRollup", ctx, rollup)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRollup indicates an expected call of UpdateRollup.
func (mr *MockTransactionMockRecorder) UpdateRollup(ctx, rollup any) *MockTransactionUpdateRollupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRollup", reflect.TypeOf((*MockTransaction)(nil).UpdateRollup), ctx, rollup)
	return &MockTransactionUpdateRollupCall{Call: call}
}

// MockTransactionUpdateRollupCall wrap *gomock.Call
type MockTransactionUpdateRollupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionUpdateRollupCall) Return(arg0 error) *MockTransactionUpdateRollupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionUpdateRollupCall) Do(f func(context.Context, *storage.Rollup) error) *MockTransactionUpdateRollupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionUpdateRollupCall) DoAndReturn(f func(context.Context, *storage.Rollup) error) *MockTransactionUpdateRollupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSignalsAfterUpgrade mocks base method.
func (m *MockTransaction) UpdateSignalsAfterUpgrade(ctx context.Context, version uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSignalsAfterUpgrade", ctx, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSignalsAfterUpgrade indicates an expected call of UpdateSignalsAfterUpgrade.
func (mr *MockTransactionMockRecorder) UpdateSignalsAfterUpgrade(ctx, version any) *MockTransactionUpdateSignalsAfterUpgradeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSignalsAfterUpgrade", reflect.TypeOf((*MockTransaction)(nil).UpdateSignalsAfterUpgrade), ctx, version)
	return &MockTransactionUpdateSignalsAfterUpgradeCall{Call: call}
}

// MockTransactionUpdateSignalsAfterUpgradeCall wrap *gomock.Call
type MockTransactionUpdateSignalsAfterUpgradeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionUpdateSignalsAfterUpgradeCall) Return(arg0 error) *MockTransactionUpdateSignalsAfterUpgradeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionUpdateSignalsAfterUpgradeCall) Do(f func(context.Context, uint64) error) *MockTransactionUpdateSignalsAfterUpgradeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionUpdateSignalsAfterUpgradeCall) DoAndReturn(f func(context.Context, uint64) error) *MockTransactionUpdateSignalsAfterUpgradeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSlashedDelegations mocks base method.
func (m *MockTransaction) UpdateSlashedDelegations(ctx context.Context, validatorId uint64, fraction decimal.Decimal) ([]storage.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSlashedDelegations", ctx, validatorId, fraction)
	ret0, _ := ret[0].([]storage.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSlashedDelegations indicates an expected call of UpdateSlashedDelegations.
func (mr *MockTransactionMockRecorder) UpdateSlashedDelegations(ctx, validatorId, fraction any) *MockTransactionUpdateSlashedDelegationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlashedDelegations", reflect.TypeOf((*MockTransaction)(nil).UpdateSlashedDelegations), ctx, validatorId, fraction)
	return &MockTransactionUpdateSlashedDelegationsCall{Call: call}
}

// MockTransactionUpdateSlashedDelegationsCall wrap *gomock.Call
type MockTransactionUpdateSlashedDelegationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionUpdateSlashedDelegationsCall) Return(arg0 []storage.Balance, arg1 error) *MockTransactionUpdateSlashedDelegationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionUpdateSlashedDelegationsCall) Do(f func(context.Context, uint64, decimal.Decimal) ([]storage.Balance, error)) *MockTransactionUpdateSlashedDelegationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionUpdateSlashedDelegationsCall) DoAndReturn(f func(context.Context, uint64, decimal.Decimal) ([]storage.Balance, error)) *MockTransactionUpdateSlashedDelegationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateValidators mocks base method.
func (m *MockTransaction) UpdateValidators(ctx context.Context, validators ...*storage.Validator) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range validators {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateValidators", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateValidators indicates an expected call of UpdateValidators.
func (mr *MockTransactionMockRecorder) UpdateValidators(ctx any, validators ...any) *MockTransactionUpdateValidatorsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, validators...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValidators", reflect.TypeOf((*MockTransaction)(nil).UpdateValidators), varargs...)
	return &MockTransactionUpdateValidatorsCall{Call: call}
}

// MockTransactionUpdateValidatorsCall wrap *gomock.Call
type MockTransactionUpdateValidatorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionUpdateValidatorsCall) Return(arg0 error) *MockTransactionUpdateValidatorsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionUpdateValidatorsCall) Do(f func(context.Context, ...*storage.Validator) error) *MockTransactionUpdateValidatorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionUpdateValidatorsCall) DoAndReturn(f func(context.Context, ...*storage.Validator) error) *MockTransactionUpdateValidatorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Validator mocks base method.
func (m *MockTransaction) Validator(ctx context.Context, id uint64) (storage.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validator", ctx, id)
	ret0, _ := ret[0].(storage.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validator indicates an expected call of Validator.
func (mr *MockTransactionMockRecorder) Validator(ctx, id any) *MockTransactionValidatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validator", reflect.TypeOf((*MockTransaction)(nil).Validator), ctx, id)
	return &MockTransactionValidatorCall{Call: call}
}

// MockTransactionValidatorCall wrap *gomock.Call
type MockTransactionValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionValidatorCall) Return(val storage.Validator, err error) *MockTransactionValidatorCall {
	c.Call = c.Call.Return(val, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionValidatorCall) Do(f func(context.Context, uint64) (storage.Validator, error)) *MockTransactionValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionValidatorCall) DoAndReturn(f func(context.Context, uint64) (storage.Validator, error)) *MockTransactionValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockISearch is a mock of ISearch interface.
type MockISearch struct {
	ctrl     *gomock.Controller
	recorder *MockISearchMockRecorder
	isgomock struct{}
}

// MockISearchMockRecorder is the mock recorder for MockISearch.
type MockISearchMockRecorder struct {
	mock *MockISearch
}

// NewMockISearch creates a new mock instance.
func NewMockISearch(ctrl *gomock.Controller) *MockISearch {
	mock := &MockISearch{ctrl: ctrl}
	mock.recorder = &MockISearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISearch) EXPECT() *MockISearchMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockISearch) Search(ctx context.Context, query []byte) ([]storage.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query)
	ret0, _ := ret[0].([]storage.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockISearchMockRecorder) Search(ctx, query any) *MockISearchSearchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockISearch)(nil).Search), ctx, query)
	return &MockISearchSearchCall{Call: call}
}

// MockISearchSearchCall wrap *gomock.Call
type MockISearchSearchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockISearchSearchCall) Return(arg0 []storage.SearchResult, arg1 error) *MockISearchSearchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockISearchSearchCall) Do(f func(context.Context, []byte) ([]storage.SearchResult, error)) *MockISearchSearchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockISearchSearchCall) DoAndReturn(f func(context.Context, []byte) ([]storage.SearchResult, error)) *MockISearchSearchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SearchText mocks base method.
func (m *MockISearch) SearchText(ctx context.Context, text string) ([]storage.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchText", ctx, text)
	ret0, _ := ret[0].([]storage.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchText indicates an expected call of SearchText.
func (mr *MockISearchMockRecorder) SearchText(ctx, text any) *MockISearchSearchTextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchText", reflect.TypeOf((*MockISearch)(nil).SearchText), ctx, text)
	return &MockISearchSearchTextCall{Call: call}
}

// MockISearchSearchTextCall wrap *gomock.Call
type MockISearchSearchTextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockISearchSearchTextCall) Return(arg0 []storage.SearchResult, arg1 error) *MockISearchSearchTextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockISearchSearchTextCall) Do(f func(context.Context, string) ([]storage.SearchResult, error)) *MockISearchSearchTextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockISearchSearchTextCall) DoAndReturn(f func(context.Context, string) ([]storage.SearchResult, error)) *MockISearchSearchTextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExport is a mock of Export interface.
type MockExport struct {
	ctrl     *gomock.Controller
	recorder *MockExportMockRecorder
	isgomock struct{}
}

// MockExportMockRecorder is the mock recorder for MockExport.
type MockExportMockRecorder struct {
	mock *MockExport
}

// NewMockExport creates a new mock instance.
func NewMockExport(ctrl *gomock.Controller) *MockExport {
	mock := &MockExport{ctrl: ctrl}
	mock.recorder = &MockExportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExport) EXPECT() *MockExportMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockExport) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockExportMockRecorder) Close() *MockExportCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockExport)(nil).Close))
	return &MockExportCloseCall{Call: call}
}

// MockExportCloseCall wrap *gomock.Call
type MockExportCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportCloseCall) Return(arg0 error) *MockExportCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportCloseCall) Do(f func() error) *MockExportCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportCloseCall) DoAndReturn(f func() error) *MockExportCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ToCsv mocks base method.
func (m *MockExport) ToCsv(ctx context.Context, writer io.Writer, query string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCsv", ctx, writer, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToCsv indicates an expected call of ToCsv.
func (mr *MockExportMockRecorder) ToCsv(ctx, writer, query any) *MockExportToCsvCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCsv", reflect.TypeOf((*MockExport)(nil).ToCsv), ctx, writer, query)
	return &MockExportToCsvCall{Call: call}
}

// MockExportToCsvCall wrap *gomock.Call
type MockExportToCsvCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportToCsvCall) Return(arg0 error) *MockExportToCsvCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportToCsvCall) Do(f func(context.Context, io.Writer, string) error) *MockExportToCsvCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportToCsvCall) DoAndReturn(f func(context.Context, io.Writer, string) error) *MockExportToCsvCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
