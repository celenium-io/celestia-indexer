// Code generated by MockGen. DO NOT EDIT.
// Source: vote.go
//
// Generated by this command:
//
//	mockgen -source=vote.go -destination=mock/vote.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIVote is a mock of IVote interface.
type MockIVote struct {
	ctrl     *gomock.Controller
	recorder *MockIVoteMockRecorder
	isgomock struct{}
}

// MockIVoteMockRecorder is the mock recorder for MockIVote.
type MockIVoteMockRecorder struct {
	mock *MockIVote
}

// NewMockIVote creates a new mock instance.
func NewMockIVote(ctrl *gomock.Controller) *MockIVote {
	mock := &MockIVote{ctrl: ctrl}
	mock.recorder = &MockIVoteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVote) EXPECT() *MockIVoteMockRecorder {
	return m.recorder
}

// ByProposalId mocks base method.
func (m *MockIVote) ByProposalId(ctx context.Context, proposalId uint64, fltrs storage.VoteFilters) ([]storage.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByProposalId", ctx, proposalId, fltrs)
	ret0, _ := ret[0].([]storage.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByProposalId indicates an expected call of ByProposalId.
func (mr *MockIVoteMockRecorder) ByProposalId(ctx, proposalId, fltrs any) *MockIVoteByProposalIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByProposalId", reflect.TypeOf((*MockIVote)(nil).ByProposalId), ctx, proposalId, fltrs)
	return &MockIVoteByProposalIdCall{Call: call}
}

// MockIVoteByProposalIdCall wrap *gomock.Call
type MockIVoteByProposalIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVoteByProposalIdCall) Return(arg0 []storage.Vote, arg1 error) *MockIVoteByProposalIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVoteByProposalIdCall) Do(f func(context.Context, uint64, storage.VoteFilters) ([]storage.Vote, error)) *MockIVoteByProposalIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVoteByProposalIdCall) DoAndReturn(f func(context.Context, uint64, storage.VoteFilters) ([]storage.Vote, error)) *MockIVoteByProposalIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ByValidatorId mocks base method.
func (m *MockIVote) ByValidatorId(ctx context.Context, validatorId uint64, fltrs storage.VoteFilters) ([]storage.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByValidatorId", ctx, validatorId, fltrs)
	ret0, _ := ret[0].([]storage.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByValidatorId indicates an expected call of ByValidatorId.
func (mr *MockIVoteMockRecorder) ByValidatorId(ctx, validatorId, fltrs any) *MockIVoteByValidatorIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByValidatorId", reflect.TypeOf((*MockIVote)(nil).ByValidatorId), ctx, validatorId, fltrs)
	return &MockIVoteByValidatorIdCall{Call: call}
}

// MockIVoteByValidatorIdCall wrap *gomock.Call
type MockIVoteByValidatorIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVoteByValidatorIdCall) Return(arg0 []storage.Vote, arg1 error) *MockIVoteByValidatorIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVoteByValidatorIdCall) Do(f func(context.Context, uint64, storage.VoteFilters) ([]storage.Vote, error)) *MockIVoteByValidatorIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVoteByValidatorIdCall) DoAndReturn(f func(context.Context, uint64, storage.VoteFilters) ([]storage.Vote, error)) *MockIVoteByValidatorIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ByVoterId mocks base method.
func (m *MockIVote) ByVoterId(ctx context.Context, voterId uint64, fltrs storage.VoteFilters) ([]storage.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByVoterId", ctx, voterId, fltrs)
	ret0, _ := ret[0].([]storage.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByVoterId indicates an expected call of ByVoterId.
func (mr *MockIVoteMockRecorder) ByVoterId(ctx, voterId, fltrs any) *MockIVoteByVoterIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByVoterId", reflect.TypeOf((*MockIVote)(nil).ByVoterId), ctx, voterId, fltrs)
	return &MockIVoteByVoterIdCall{Call: call}
}

// MockIVoteByVoterIdCall wrap *gomock.Call
type MockIVoteByVoterIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVoteByVoterIdCall) Return(arg0 []storage.Vote, arg1 error) *MockIVoteByVoterIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVoteByVoterIdCall) Do(f func(context.Context, uint64, storage.VoteFilters) ([]storage.Vote, error)) *MockIVoteByVoterIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVoteByVoterIdCall) DoAndReturn(f func(context.Context, uint64, storage.VoteFilters) ([]storage.Vote, error)) *MockIVoteByVoterIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CursorList mocks base method.
func (m *MockIVote) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIVoteMockRecorder) CursorList(ctx, id, limit, order, cmp any) *MockIVoteCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIVote)(nil).CursorList), ctx, id, limit, order, cmp)
	return &MockIVoteCursorListCall{Call: call}
}

// MockIVoteCursorListCall wrap *gomock.Call
type MockIVoteCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVoteCursorListCall) Return(arg0 []*storage.Vote, arg1 error) *MockIVoteCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVoteCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Vote, error)) *MockIVoteCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVoteCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Vote, error)) *MockIVoteCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIVote) GetByID(ctx context.Context, id uint64) (*storage.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIVoteMockRecorder) GetByID(ctx, id any) *MockIVoteGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIVote)(nil).GetByID), ctx, id)
	return &MockIVoteGetByIDCall{Call: call}
}

// MockIVoteGetByIDCall wrap *gomock.Call
type MockIVoteGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVoteGetByIDCall) Return(arg0 *storage.Vote, arg1 error) *MockIVoteGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVoteGetByIDCall) Do(f func(context.Context, uint64) (*storage.Vote, error)) *MockIVoteGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVoteGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Vote, error)) *MockIVoteGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIVote) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIVoteMockRecorder) IsNoRows(err any) *MockIVoteIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIVote)(nil).IsNoRows), err)
	return &MockIVoteIsNoRowsCall{Call: call}
}

// MockIVoteIsNoRowsCall wrap *gomock.Call
type MockIVoteIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVoteIsNoRowsCall) Return(arg0 bool) *MockIVoteIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVoteIsNoRowsCall) Do(f func(error) bool) *MockIVoteIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVoteIsNoRowsCall) DoAndReturn(f func(error) bool) *MockIVoteIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIVote) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIVoteMockRecorder) LastID(ctx any) *MockIVoteLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIVote)(nil).LastID), ctx)
	return &MockIVoteLastIDCall{Call: call}
}

// MockIVoteLastIDCall wrap *gomock.Call
type MockIVoteLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVoteLastIDCall) Return(arg0 uint64, arg1 error) *MockIVoteLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVoteLastIDCall) Do(f func(context.Context) (uint64, error)) *MockIVoteLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVoteLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *MockIVoteLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIVote) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIVoteMockRecorder) List(ctx, limit, offset, order any) *MockIVoteListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIVote)(nil).List), ctx, limit, offset, order)
	return &MockIVoteListCall{Call: call}
}

// MockIVoteListCall wrap *gomock.Call
type MockIVoteListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVoteListCall) Return(arg0 []*storage.Vote, arg1 error) *MockIVoteListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVoteListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Vote, error)) *MockIVoteListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVoteListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Vote, error)) *MockIVoteListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIVote) Save(ctx context.Context, m *storage.Vote) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIVoteMockRecorder) Save(ctx, m any) *MockIVoteSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIVote)(nil).Save), ctx, m)
	return &MockIVoteSaveCall{Call: call}
}

// MockIVoteSaveCall wrap *gomock.Call
type MockIVoteSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVoteSaveCall) Return(arg0 error) *MockIVoteSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVoteSaveCall) Do(f func(context.Context, *storage.Vote) error) *MockIVoteSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVoteSaveCall) DoAndReturn(f func(context.Context, *storage.Vote) error) *MockIVoteSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIVote) Update(ctx context.Context, m *storage.Vote) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIVoteMockRecorder) Update(ctx, m any) *MockIVoteUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIVote)(nil).Update), ctx, m)
	return &MockIVoteUpdateCall{Call: call}
}

// MockIVoteUpdateCall wrap *gomock.Call
type MockIVoteUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVoteUpdateCall) Return(arg0 error) *MockIVoteUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVoteUpdateCall) Do(f func(context.Context, *storage.Vote) error) *MockIVoteUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVoteUpdateCall) DoAndReturn(f func(context.Context, *storage.Vote) error) *MockIVoteUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
