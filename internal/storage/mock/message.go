// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: message.go
//
// Generated by this command:
//
//	mockgen -source=message.go -destination=mock/message.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIMessage is a mock of IMessage interface.
type MockIMessage struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageMockRecorder
}

// MockIMessageMockRecorder is the mock recorder for MockIMessage.
type MockIMessageMockRecorder struct {
	mock *MockIMessage
}

// NewMockIMessage creates a new mock instance.
func NewMockIMessage(ctrl *gomock.Controller) *MockIMessage {
	mock := &MockIMessage{ctrl: ctrl}
	mock.recorder = &MockIMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessage) EXPECT() *MockIMessageMockRecorder {
	return m.recorder
}

// ByAddress mocks base method.
func (m *MockIMessage) ByAddress(ctx context.Context, id uint64, filters storage.AddressMsgsFilter) ([]storage.AddressMessageWithTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByAddress", ctx, id, filters)
	ret0, _ := ret[0].([]storage.AddressMessageWithTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByAddress indicates an expected call of ByAddress.
func (mr *MockIMessageMockRecorder) ByAddress(ctx, id, filters any) *MockIMessageByAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByAddress", reflect.TypeOf((*MockIMessage)(nil).ByAddress), ctx, id, filters)
	return &MockIMessageByAddressCall{Call: call}
}

// MockIMessageByAddressCall wrap *gomock.Call
type MockIMessageByAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMessageByAddressCall) Return(arg0 []storage.AddressMessageWithTx, arg1 error) *MockIMessageByAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMessageByAddressCall) Do(f func(context.Context, uint64, storage.AddressMsgsFilter) ([]storage.AddressMessageWithTx, error)) *MockIMessageByAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMessageByAddressCall) DoAndReturn(f func(context.Context, uint64, storage.AddressMsgsFilter) ([]storage.AddressMessageWithTx, error)) *MockIMessageByAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ByTxId mocks base method.
func (m *MockIMessage) ByTxId(ctx context.Context, txId uint64, limit, offset int) ([]storage.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByTxId", ctx, txId, limit, offset)
	ret0, _ := ret[0].([]storage.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByTxId indicates an expected call of ByTxId.
func (mr *MockIMessageMockRecorder) ByTxId(ctx, txId, limit, offset any) *MockIMessageByTxIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByTxId", reflect.TypeOf((*MockIMessage)(nil).ByTxId), ctx, txId, limit, offset)
	return &MockIMessageByTxIdCall{Call: call}
}

// MockIMessageByTxIdCall wrap *gomock.Call
type MockIMessageByTxIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMessageByTxIdCall) Return(arg0 []storage.Message, arg1 error) *MockIMessageByTxIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMessageByTxIdCall) Do(f func(context.Context, uint64, int, int) ([]storage.Message, error)) *MockIMessageByTxIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMessageByTxIdCall) DoAndReturn(f func(context.Context, uint64, int, int) ([]storage.Message, error)) *MockIMessageByTxIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CursorList mocks base method.
func (m *MockIMessage) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIMessageMockRecorder) CursorList(ctx, id, limit, order, cmp any) *MockIMessageCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIMessage)(nil).CursorList), ctx, id, limit, order, cmp)
	return &MockIMessageCursorListCall{Call: call}
}

// MockIMessageCursorListCall wrap *gomock.Call
type MockIMessageCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMessageCursorListCall) Return(arg0 []*storage.Message, arg1 error) *MockIMessageCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMessageCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Message, error)) *MockIMessageCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMessageCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Message, error)) *MockIMessageCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIMessage) GetByID(ctx context.Context, id uint64) (*storage.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIMessageMockRecorder) GetByID(ctx, id any) *MockIMessageGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIMessage)(nil).GetByID), ctx, id)
	return &MockIMessageGetByIDCall{Call: call}
}

// MockIMessageGetByIDCall wrap *gomock.Call
type MockIMessageGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMessageGetByIDCall) Return(arg0 *storage.Message, arg1 error) *MockIMessageGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMessageGetByIDCall) Do(f func(context.Context, uint64) (*storage.Message, error)) *MockIMessageGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMessageGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Message, error)) *MockIMessageGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIMessage) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIMessageMockRecorder) IsNoRows(err any) *MockIMessageIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIMessage)(nil).IsNoRows), err)
	return &MockIMessageIsNoRowsCall{Call: call}
}

// MockIMessageIsNoRowsCall wrap *gomock.Call
type MockIMessageIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMessageIsNoRowsCall) Return(arg0 bool) *MockIMessageIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMessageIsNoRowsCall) Do(f func(error) bool) *MockIMessageIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMessageIsNoRowsCall) DoAndReturn(f func(error) bool) *MockIMessageIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIMessage) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIMessageMockRecorder) LastID(ctx any) *MockIMessageLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIMessage)(nil).LastID), ctx)
	return &MockIMessageLastIDCall{Call: call}
}

// MockIMessageLastIDCall wrap *gomock.Call
type MockIMessageLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMessageLastIDCall) Return(arg0 uint64, arg1 error) *MockIMessageLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMessageLastIDCall) Do(f func(context.Context) (uint64, error)) *MockIMessageLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMessageLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *MockIMessageLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIMessage) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIMessageMockRecorder) List(ctx, limit, offset, order any) *MockIMessageListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIMessage)(nil).List), ctx, limit, offset, order)
	return &MockIMessageListCall{Call: call}
}

// MockIMessageListCall wrap *gomock.Call
type MockIMessageListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMessageListCall) Return(arg0 []*storage.Message, arg1 error) *MockIMessageListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMessageListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Message, error)) *MockIMessageListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMessageListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Message, error)) *MockIMessageListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListWithTx mocks base method.
func (m *MockIMessage) ListWithTx(ctx context.Context, filters storage.MessageListWithTxFilters) ([]storage.MessageWithTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithTx", ctx, filters)
	ret0, _ := ret[0].([]storage.MessageWithTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithTx indicates an expected call of ListWithTx.
func (mr *MockIMessageMockRecorder) ListWithTx(ctx, filters any) *MockIMessageListWithTxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithTx", reflect.TypeOf((*MockIMessage)(nil).ListWithTx), ctx, filters)
	return &MockIMessageListWithTxCall{Call: call}
}

// MockIMessageListWithTxCall wrap *gomock.Call
type MockIMessageListWithTxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMessageListWithTxCall) Return(arg0 []storage.MessageWithTx, arg1 error) *MockIMessageListWithTxCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMessageListWithTxCall) Do(f func(context.Context, storage.MessageListWithTxFilters) ([]storage.MessageWithTx, error)) *MockIMessageListWithTxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMessageListWithTxCall) DoAndReturn(f func(context.Context, storage.MessageListWithTxFilters) ([]storage.MessageWithTx, error)) *MockIMessageListWithTxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIMessage) Save(ctx context.Context, m *storage.Message) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIMessageMockRecorder) Save(ctx, m any) *MockIMessageSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIMessage)(nil).Save), ctx, m)
	return &MockIMessageSaveCall{Call: call}
}

// MockIMessageSaveCall wrap *gomock.Call
type MockIMessageSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMessageSaveCall) Return(arg0 error) *MockIMessageSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMessageSaveCall) Do(f func(context.Context, *storage.Message) error) *MockIMessageSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMessageSaveCall) DoAndReturn(f func(context.Context, *storage.Message) error) *MockIMessageSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIMessage) Update(ctx context.Context, m *storage.Message) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIMessageMockRecorder) Update(ctx, m any) *MockIMessageUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIMessage)(nil).Update), ctx, m)
	return &MockIMessageUpdateCall{Call: call}
}

// MockIMessageUpdateCall wrap *gomock.Call
type MockIMessageUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMessageUpdateCall) Return(arg0 error) *MockIMessageUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMessageUpdateCall) Do(f func(context.Context, *storage.Message) error) *MockIMessageUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMessageUpdateCall) DoAndReturn(f func(context.Context, *storage.Message) error) *MockIMessageUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
