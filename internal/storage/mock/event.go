// SPDX-FileCopyrightText: 2023 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: event.go
//
// Generated by this command:
//
//	mockgen -source=event.go -destination=mock/event.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	types "github.com/celenium-io/celestia-indexer/pkg/types"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIEvent is a mock of IEvent interface.
type MockIEvent struct {
	ctrl     *gomock.Controller
	recorder *MockIEventMockRecorder
}

// MockIEventMockRecorder is the mock recorder for MockIEvent.
type MockIEventMockRecorder struct {
	mock *MockIEvent
}

// NewMockIEvent creates a new mock instance.
func NewMockIEvent(ctrl *gomock.Controller) *MockIEvent {
	mock := &MockIEvent{ctrl: ctrl}
	mock.recorder = &MockIEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEvent) EXPECT() *MockIEventMockRecorder {
	return m.recorder
}

// ByBlock mocks base method.
func (m *MockIEvent) ByBlock(ctx context.Context, height types.Level, limit, offset int) ([]storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByBlock", ctx, height, limit, offset)
	ret0, _ := ret[0].([]storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByBlock indicates an expected call of ByBlock.
func (mr *MockIEventMockRecorder) ByBlock(ctx, height, limit, offset any) *IEventByBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByBlock", reflect.TypeOf((*MockIEvent)(nil).ByBlock), ctx, height, limit, offset)
	return &IEventByBlockCall{Call: call}
}

// IEventByBlockCall wrap *gomock.Call
type IEventByBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IEventByBlockCall) Return(arg0 []storage.Event, arg1 error) *IEventByBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IEventByBlockCall) Do(f func(context.Context, types.Level, int, int) ([]storage.Event, error)) *IEventByBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IEventByBlockCall) DoAndReturn(f func(context.Context, types.Level, int, int) ([]storage.Event, error)) *IEventByBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ByTxId mocks base method.
func (m *MockIEvent) ByTxId(ctx context.Context, txId uint64, limit, offset int) ([]storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByTxId", ctx, txId, limit, offset)
	ret0, _ := ret[0].([]storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByTxId indicates an expected call of ByTxId.
func (mr *MockIEventMockRecorder) ByTxId(ctx, txId, limit, offset any) *IEventByTxIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByTxId", reflect.TypeOf((*MockIEvent)(nil).ByTxId), ctx, txId, limit, offset)
	return &IEventByTxIdCall{Call: call}
}

// IEventByTxIdCall wrap *gomock.Call
type IEventByTxIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IEventByTxIdCall) Return(arg0 []storage.Event, arg1 error) *IEventByTxIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IEventByTxIdCall) Do(f func(context.Context, uint64, int, int) ([]storage.Event, error)) *IEventByTxIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IEventByTxIdCall) DoAndReturn(f func(context.Context, uint64, int, int) ([]storage.Event, error)) *IEventByTxIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CursorList mocks base method.
func (m *MockIEvent) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIEventMockRecorder) CursorList(ctx, id, limit, order, cmp any) *IEventCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIEvent)(nil).CursorList), ctx, id, limit, order, cmp)
	return &IEventCursorListCall{Call: call}
}

// IEventCursorListCall wrap *gomock.Call
type IEventCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IEventCursorListCall) Return(arg0 []*storage.Event, arg1 error) *IEventCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IEventCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Event, error)) *IEventCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IEventCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Event, error)) *IEventCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIEvent) GetByID(ctx context.Context, id uint64) (*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIEventMockRecorder) GetByID(ctx, id any) *IEventGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIEvent)(nil).GetByID), ctx, id)
	return &IEventGetByIDCall{Call: call}
}

// IEventGetByIDCall wrap *gomock.Call
type IEventGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IEventGetByIDCall) Return(arg0 *storage.Event, arg1 error) *IEventGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IEventGetByIDCall) Do(f func(context.Context, uint64) (*storage.Event, error)) *IEventGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IEventGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Event, error)) *IEventGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIEvent) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIEventMockRecorder) IsNoRows(err any) *IEventIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIEvent)(nil).IsNoRows), err)
	return &IEventIsNoRowsCall{Call: call}
}

// IEventIsNoRowsCall wrap *gomock.Call
type IEventIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IEventIsNoRowsCall) Return(arg0 bool) *IEventIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IEventIsNoRowsCall) Do(f func(error) bool) *IEventIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IEventIsNoRowsCall) DoAndReturn(f func(error) bool) *IEventIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIEvent) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIEventMockRecorder) LastID(ctx any) *IEventLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIEvent)(nil).LastID), ctx)
	return &IEventLastIDCall{Call: call}
}

// IEventLastIDCall wrap *gomock.Call
type IEventLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IEventLastIDCall) Return(arg0 uint64, arg1 error) *IEventLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IEventLastIDCall) Do(f func(context.Context) (uint64, error)) *IEventLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IEventLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *IEventLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIEvent) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIEventMockRecorder) List(ctx, limit, offset, order any) *IEventListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIEvent)(nil).List), ctx, limit, offset, order)
	return &IEventListCall{Call: call}
}

// IEventListCall wrap *gomock.Call
type IEventListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IEventListCall) Return(arg0 []*storage.Event, arg1 error) *IEventListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IEventListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Event, error)) *IEventListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IEventListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Event, error)) *IEventListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIEvent) Save(ctx context.Context, m *storage.Event) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIEventMockRecorder) Save(ctx, m any) *IEventSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIEvent)(nil).Save), ctx, m)
	return &IEventSaveCall{Call: call}
}

// IEventSaveCall wrap *gomock.Call
type IEventSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IEventSaveCall) Return(arg0 error) *IEventSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IEventSaveCall) Do(f func(context.Context, *storage.Event) error) *IEventSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IEventSaveCall) DoAndReturn(f func(context.Context, *storage.Event) error) *IEventSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIEvent) Update(ctx context.Context, m *storage.Event) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIEventMockRecorder) Update(ctx, m any) *IEventUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIEvent)(nil).Update), ctx, m)
	return &IEventUpdateCall{Call: call}
}

// IEventUpdateCall wrap *gomock.Call
type IEventUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IEventUpdateCall) Return(arg0 error) *IEventUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IEventUpdateCall) Do(f func(context.Context, *storage.Event) error) *IEventUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IEventUpdateCall) DoAndReturn(f func(context.Context, *storage.Event) error) *IEventUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
