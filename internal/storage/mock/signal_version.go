// Code generated by MockGen. DO NOT EDIT.
// Source: signal_version.go
//
// Generated by this command:
//
//	mockgen -source=signal_version.go -destination=mock/signal_version.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockISignalVersion is a mock of ISignalVersion interface.
type MockISignalVersion struct {
	ctrl     *gomock.Controller
	recorder *MockISignalVersionMockRecorder
}

// MockISignalVersionMockRecorder is the mock recorder for MockISignalVersion.
type MockISignalVersionMockRecorder struct {
	mock *MockISignalVersion
}

// NewMockISignalVersion creates a new mock instance.
func NewMockISignalVersion(ctrl *gomock.Controller) *MockISignalVersion {
	mock := &MockISignalVersion{ctrl: ctrl}
	mock.recorder = &MockISignalVersionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISignalVersion) EXPECT() *MockISignalVersionMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockISignalVersion) List(ctx context.Context, flts storage.ListSignalsFilter) ([]storage.SignalVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, flts)
	ret0, _ := ret[0].([]storage.SignalVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockISignalVersionMockRecorder) List(ctx, flts any) *MockISignalVersionListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockISignalVersion)(nil).List), ctx, flts)
	return &MockISignalVersionListCall{Call: call}
}

// MockISignalVersionListCall wrap *gomock.Call
type MockISignalVersionListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockISignalVersionListCall) Return(arg0 []storage.SignalVersion, arg1 error) *MockISignalVersionListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockISignalVersionListCall) Do(f func(context.Context, storage.ListSignalsFilter) ([]storage.SignalVersion, error)) *MockISignalVersionListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockISignalVersionListCall) DoAndReturn(f func(context.Context, storage.ListSignalsFilter) ([]storage.SignalVersion, error)) *MockISignalVersionListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
