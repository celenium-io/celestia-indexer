// Code generated by MockGen. DO NOT EDIT.
// Source: hl_token.go
//
// Generated by this command:
//
//	mockgen -source=hl_token.go -destination=mock/hl_token.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIHLToken is a mock of IHLToken interface.
type MockIHLToken struct {
	ctrl     *gomock.Controller
	recorder *MockIHLTokenMockRecorder
}

// MockIHLTokenMockRecorder is the mock recorder for MockIHLToken.
type MockIHLTokenMockRecorder struct {
	mock *MockIHLToken
}

// NewMockIHLToken creates a new mock instance.
func NewMockIHLToken(ctrl *gomock.Controller) *MockIHLToken {
	mock := &MockIHLToken{ctrl: ctrl}
	mock.recorder = &MockIHLTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHLToken) EXPECT() *MockIHLTokenMockRecorder {
	return m.recorder
}

// ByHash mocks base method.
func (m *MockIHLToken) ByHash(ctx context.Context, id []byte) (storage.HLToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByHash", ctx, id)
	ret0, _ := ret[0].(storage.HLToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByHash indicates an expected call of ByHash.
func (mr *MockIHLTokenMockRecorder) ByHash(ctx, id any) *MockIHLTokenByHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByHash", reflect.TypeOf((*MockIHLToken)(nil).ByHash), ctx, id)
	return &MockIHLTokenByHashCall{Call: call}
}

// MockIHLTokenByHashCall wrap *gomock.Call
type MockIHLTokenByHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIHLTokenByHashCall) Return(arg0 storage.HLToken, arg1 error) *MockIHLTokenByHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIHLTokenByHashCall) Do(f func(context.Context, []byte) (storage.HLToken, error)) *MockIHLTokenByHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIHLTokenByHashCall) DoAndReturn(f func(context.Context, []byte) (storage.HLToken, error)) *MockIHLTokenByHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIHLToken) List(ctx context.Context, fltrs storage.ListHyperlaneTokens) ([]storage.HLToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, fltrs)
	ret0, _ := ret[0].([]storage.HLToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIHLTokenMockRecorder) List(ctx, fltrs any) *MockIHLTokenListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIHLToken)(nil).List), ctx, fltrs)
	return &MockIHLTokenListCall{Call: call}
}

// MockIHLTokenListCall wrap *gomock.Call
type MockIHLTokenListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIHLTokenListCall) Return(arg0 []storage.HLToken, arg1 error) *MockIHLTokenListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIHLTokenListCall) Do(f func(context.Context, storage.ListHyperlaneTokens) ([]storage.HLToken, error)) *MockIHLTokenListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIHLTokenListCall) DoAndReturn(f func(context.Context, storage.ListHyperlaneTokens) ([]storage.HLToken, error)) *MockIHLTokenListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
