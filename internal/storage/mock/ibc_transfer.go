// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: ibc_transfer.go
//
// Generated by this command:
//
//	mockgen -source=ibc_transfer.go -destination=mock/ibc_transfer.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIIbcTransfer is a mock of IIbcTransfer interface.
type MockIIbcTransfer struct {
	ctrl     *gomock.Controller
	recorder *MockIIbcTransferMockRecorder
}

// MockIIbcTransferMockRecorder is the mock recorder for MockIIbcTransfer.
type MockIIbcTransferMockRecorder struct {
	mock *MockIIbcTransfer
}

// NewMockIIbcTransfer creates a new mock instance.
func NewMockIIbcTransfer(ctrl *gomock.Controller) *MockIIbcTransfer {
	mock := &MockIIbcTransfer{ctrl: ctrl}
	mock.recorder = &MockIIbcTransferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIbcTransfer) EXPECT() *MockIIbcTransferMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockIIbcTransfer) List(ctx context.Context, fltrs storage.ListIbcTransferFilters) ([]storage.IbcTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, fltrs)
	ret0, _ := ret[0].([]storage.IbcTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIIbcTransferMockRecorder) List(ctx, fltrs any) *MockIIbcTransferListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIIbcTransfer)(nil).List), ctx, fltrs)
	return &MockIIbcTransferListCall{Call: call}
}

// MockIIbcTransferListCall wrap *gomock.Call
type MockIIbcTransferListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIIbcTransferListCall) Return(arg0 []storage.IbcTransfer, arg1 error) *MockIIbcTransferListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIIbcTransferListCall) Do(f func(context.Context, storage.ListIbcTransferFilters) ([]storage.IbcTransfer, error)) *MockIIbcTransferListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIIbcTransferListCall) DoAndReturn(f func(context.Context, storage.ListIbcTransferFilters) ([]storage.IbcTransfer, error)) *MockIIbcTransferListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
