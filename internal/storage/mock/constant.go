// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: constant.go
//
// Generated by this command:
//
//	mockgen -source=constant.go -destination=mock/constant.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	types "github.com/celenium-io/celestia-indexer/internal/storage/types"
	gomock "go.uber.org/mock/gomock"
)

// MockIConstant is a mock of IConstant interface.
type MockIConstant struct {
	ctrl     *gomock.Controller
	recorder *MockIConstantMockRecorder
}

// MockIConstantMockRecorder is the mock recorder for MockIConstant.
type MockIConstantMockRecorder struct {
	mock *MockIConstant
}

// NewMockIConstant creates a new mock instance.
func NewMockIConstant(ctrl *gomock.Controller) *MockIConstant {
	mock := &MockIConstant{ctrl: ctrl}
	mock.recorder = &MockIConstantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConstant) EXPECT() *MockIConstantMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockIConstant) ISGOMOCK() struct{} {
	return struct{}{}
}

// All mocks base method.
func (m *MockIConstant) All(ctx context.Context) ([]storage.Constant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].([]storage.Constant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockIConstantMockRecorder) All(ctx any) *MockIConstantAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockIConstant)(nil).All), ctx)
	return &MockIConstantAllCall{Call: call}
}

// MockIConstantAllCall wrap *gomock.Call
type MockIConstantAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIConstantAllCall) Return(arg0 []storage.Constant, arg1 error) *MockIConstantAllCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIConstantAllCall) Do(f func(context.Context) ([]storage.Constant, error)) *MockIConstantAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIConstantAllCall) DoAndReturn(f func(context.Context) ([]storage.Constant, error)) *MockIConstantAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ByModule mocks base method.
func (m *MockIConstant) ByModule(ctx context.Context, module types.ModuleName) ([]storage.Constant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByModule", ctx, module)
	ret0, _ := ret[0].([]storage.Constant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByModule indicates an expected call of ByModule.
func (mr *MockIConstantMockRecorder) ByModule(ctx, module any) *MockIConstantByModuleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByModule", reflect.TypeOf((*MockIConstant)(nil).ByModule), ctx, module)
	return &MockIConstantByModuleCall{Call: call}
}

// MockIConstantByModuleCall wrap *gomock.Call
type MockIConstantByModuleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIConstantByModuleCall) Return(arg0 []storage.Constant, arg1 error) *MockIConstantByModuleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIConstantByModuleCall) Do(f func(context.Context, types.ModuleName) ([]storage.Constant, error)) *MockIConstantByModuleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIConstantByModuleCall) DoAndReturn(f func(context.Context, types.ModuleName) ([]storage.Constant, error)) *MockIConstantByModuleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockIConstant) Get(ctx context.Context, module types.ModuleName, name string) (storage.Constant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, module, name)
	ret0, _ := ret[0].(storage.Constant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIConstantMockRecorder) Get(ctx, module, name any) *MockIConstantGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIConstant)(nil).Get), ctx, module, name)
	return &MockIConstantGetCall{Call: call}
}

// MockIConstantGetCall wrap *gomock.Call
type MockIConstantGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIConstantGetCall) Return(arg0 storage.Constant, arg1 error) *MockIConstantGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIConstantGetCall) Do(f func(context.Context, types.ModuleName, string) (storage.Constant, error)) *MockIConstantGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIConstantGetCall) DoAndReturn(f func(context.Context, types.ModuleName, string) (storage.Constant, error)) *MockIConstantGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
