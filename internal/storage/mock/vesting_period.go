// Code generated by MockGen. DO NOT EDIT.
// Source: vesting_period.go
//
// Generated by this command:
//
//	mockgen -source=vesting_period.go -destination=mock/vesting_period.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIVestingPeriod is a mock of IVestingPeriod interface.
type MockIVestingPeriod struct {
	ctrl     *gomock.Controller
	recorder *MockIVestingPeriodMockRecorder
}

// MockIVestingPeriodMockRecorder is the mock recorder for MockIVestingPeriod.
type MockIVestingPeriodMockRecorder struct {
	mock *MockIVestingPeriod
}

// NewMockIVestingPeriod creates a new mock instance.
func NewMockIVestingPeriod(ctrl *gomock.Controller) *MockIVestingPeriod {
	mock := &MockIVestingPeriod{ctrl: ctrl}
	mock.recorder = &MockIVestingPeriodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVestingPeriod) EXPECT() *MockIVestingPeriodMockRecorder {
	return m.recorder
}

// ByVesting mocks base method.
func (m *MockIVestingPeriod) ByVesting(ctx context.Context, id uint64, limit, offset int) ([]storage.VestingPeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByVesting", ctx, id, limit, offset)
	ret0, _ := ret[0].([]storage.VestingPeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByVesting indicates an expected call of ByVesting.
func (mr *MockIVestingPeriodMockRecorder) ByVesting(ctx, id, limit, offset any) *MockIVestingPeriodByVestingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByVesting", reflect.TypeOf((*MockIVestingPeriod)(nil).ByVesting), ctx, id, limit, offset)
	return &MockIVestingPeriodByVestingCall{Call: call}
}

// MockIVestingPeriodByVestingCall wrap *gomock.Call
type MockIVestingPeriodByVestingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVestingPeriodByVestingCall) Return(arg0 []storage.VestingPeriod, arg1 error) *MockIVestingPeriodByVestingCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVestingPeriodByVestingCall) Do(f func(context.Context, uint64, int, int) ([]storage.VestingPeriod, error)) *MockIVestingPeriodByVestingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVestingPeriodByVestingCall) DoAndReturn(f func(context.Context, uint64, int, int) ([]storage.VestingPeriod, error)) *MockIVestingPeriodByVestingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CursorList mocks base method.
func (m *MockIVestingPeriod) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.VestingPeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.VestingPeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIVestingPeriodMockRecorder) CursorList(ctx, id, limit, order, cmp any) *MockIVestingPeriodCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIVestingPeriod)(nil).CursorList), ctx, id, limit, order, cmp)
	return &MockIVestingPeriodCursorListCall{Call: call}
}

// MockIVestingPeriodCursorListCall wrap *gomock.Call
type MockIVestingPeriodCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVestingPeriodCursorListCall) Return(arg0 []*storage.VestingPeriod, arg1 error) *MockIVestingPeriodCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVestingPeriodCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.VestingPeriod, error)) *MockIVestingPeriodCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVestingPeriodCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.VestingPeriod, error)) *MockIVestingPeriodCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIVestingPeriod) GetByID(ctx context.Context, id uint64) (*storage.VestingPeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.VestingPeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIVestingPeriodMockRecorder) GetByID(ctx, id any) *MockIVestingPeriodGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIVestingPeriod)(nil).GetByID), ctx, id)
	return &MockIVestingPeriodGetByIDCall{Call: call}
}

// MockIVestingPeriodGetByIDCall wrap *gomock.Call
type MockIVestingPeriodGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVestingPeriodGetByIDCall) Return(arg0 *storage.VestingPeriod, arg1 error) *MockIVestingPeriodGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVestingPeriodGetByIDCall) Do(f func(context.Context, uint64) (*storage.VestingPeriod, error)) *MockIVestingPeriodGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVestingPeriodGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.VestingPeriod, error)) *MockIVestingPeriodGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIVestingPeriod) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIVestingPeriodMockRecorder) IsNoRows(err any) *MockIVestingPeriodIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIVestingPeriod)(nil).IsNoRows), err)
	return &MockIVestingPeriodIsNoRowsCall{Call: call}
}

// MockIVestingPeriodIsNoRowsCall wrap *gomock.Call
type MockIVestingPeriodIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVestingPeriodIsNoRowsCall) Return(arg0 bool) *MockIVestingPeriodIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVestingPeriodIsNoRowsCall) Do(f func(error) bool) *MockIVestingPeriodIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVestingPeriodIsNoRowsCall) DoAndReturn(f func(error) bool) *MockIVestingPeriodIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIVestingPeriod) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIVestingPeriodMockRecorder) LastID(ctx any) *MockIVestingPeriodLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIVestingPeriod)(nil).LastID), ctx)
	return &MockIVestingPeriodLastIDCall{Call: call}
}

// MockIVestingPeriodLastIDCall wrap *gomock.Call
type MockIVestingPeriodLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVestingPeriodLastIDCall) Return(arg0 uint64, arg1 error) *MockIVestingPeriodLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVestingPeriodLastIDCall) Do(f func(context.Context) (uint64, error)) *MockIVestingPeriodLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVestingPeriodLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *MockIVestingPeriodLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIVestingPeriod) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.VestingPeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.VestingPeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIVestingPeriodMockRecorder) List(ctx, limit, offset, order any) *MockIVestingPeriodListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIVestingPeriod)(nil).List), ctx, limit, offset, order)
	return &MockIVestingPeriodListCall{Call: call}
}

// MockIVestingPeriodListCall wrap *gomock.Call
type MockIVestingPeriodListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVestingPeriodListCall) Return(arg0 []*storage.VestingPeriod, arg1 error) *MockIVestingPeriodListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVestingPeriodListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.VestingPeriod, error)) *MockIVestingPeriodListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVestingPeriodListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.VestingPeriod, error)) *MockIVestingPeriodListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIVestingPeriod) Save(ctx context.Context, m *storage.VestingPeriod) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIVestingPeriodMockRecorder) Save(ctx, m any) *MockIVestingPeriodSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIVestingPeriod)(nil).Save), ctx, m)
	return &MockIVestingPeriodSaveCall{Call: call}
}

// MockIVestingPeriodSaveCall wrap *gomock.Call
type MockIVestingPeriodSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVestingPeriodSaveCall) Return(arg0 error) *MockIVestingPeriodSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVestingPeriodSaveCall) Do(f func(context.Context, *storage.VestingPeriod) error) *MockIVestingPeriodSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVestingPeriodSaveCall) DoAndReturn(f func(context.Context, *storage.VestingPeriod) error) *MockIVestingPeriodSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIVestingPeriod) Update(ctx context.Context, m *storage.VestingPeriod) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIVestingPeriodMockRecorder) Update(ctx, m any) *MockIVestingPeriodUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIVestingPeriod)(nil).Update), ctx, m)
	return &MockIVestingPeriodUpdateCall{Call: call}
}

// MockIVestingPeriodUpdateCall wrap *gomock.Call
type MockIVestingPeriodUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIVestingPeriodUpdateCall) Return(arg0 error) *MockIVestingPeriodUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIVestingPeriodUpdateCall) Do(f func(context.Context, *storage.VestingPeriod) error) *MockIVestingPeriodUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIVestingPeriodUpdateCall) DoAndReturn(f func(context.Context, *storage.VestingPeriod) error) *MockIVestingPeriodUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
