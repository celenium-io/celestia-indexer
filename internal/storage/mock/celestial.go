// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: celestial.go
//
// Generated by this command:
//
//	mockgen -source=celestial.go -destination=mock/celestial.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockICelestial is a mock of ICelestial interface.
type MockICelestial struct {
	ctrl     *gomock.Controller
	recorder *MockICelestialMockRecorder
}

// MockICelestialMockRecorder is the mock recorder for MockICelestial.
type MockICelestialMockRecorder struct {
	mock *MockICelestial
}

// NewMockICelestial creates a new mock instance.
func NewMockICelestial(ctrl *gomock.Controller) *MockICelestial {
	mock := &MockICelestial{ctrl: ctrl}
	mock.recorder = &MockICelestialMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICelestial) EXPECT() *MockICelestialMockRecorder {
	return m.recorder
}

// ByAddressId mocks base method.
func (m *MockICelestial) ByAddressId(ctx context.Context, addressId uint64, limit, offset int) ([]storage.Celestial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByAddressId", ctx, addressId, limit, offset)
	ret0, _ := ret[0].([]storage.Celestial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByAddressId indicates an expected call of ByAddressId.
func (mr *MockICelestialMockRecorder) ByAddressId(ctx, addressId, limit, offset any) *MockICelestialByAddressIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByAddressId", reflect.TypeOf((*MockICelestial)(nil).ByAddressId), ctx, addressId, limit, offset)
	return &MockICelestialByAddressIdCall{Call: call}
}

// MockICelestialByAddressIdCall wrap *gomock.Call
type MockICelestialByAddressIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockICelestialByAddressIdCall) Return(arg0 []storage.Celestial, arg1 error) *MockICelestialByAddressIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockICelestialByAddressIdCall) Do(f func(context.Context, uint64, int, int) ([]storage.Celestial, error)) *MockICelestialByAddressIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockICelestialByAddressIdCall) DoAndReturn(f func(context.Context, uint64, int, int) ([]storage.Celestial, error)) *MockICelestialByAddressIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ById mocks base method.
func (m *MockICelestial) ById(ctx context.Context, id string) (storage.Celestial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ById", ctx, id)
	ret0, _ := ret[0].(storage.Celestial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ById indicates an expected call of ById.
func (mr *MockICelestialMockRecorder) ById(ctx, id any) *MockICelestialByIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ById", reflect.TypeOf((*MockICelestial)(nil).ById), ctx, id)
	return &MockICelestialByIdCall{Call: call}
}

// MockICelestialByIdCall wrap *gomock.Call
type MockICelestialByIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockICelestialByIdCall) Return(arg0 storage.Celestial, arg1 error) *MockICelestialByIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockICelestialByIdCall) Do(f func(context.Context, string) (storage.Celestial, error)) *MockICelestialByIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockICelestialByIdCall) DoAndReturn(f func(context.Context, string) (storage.Celestial, error)) *MockICelestialByIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockICelestialState is a mock of ICelestialState interface.
type MockICelestialState struct {
	ctrl     *gomock.Controller
	recorder *MockICelestialStateMockRecorder
}

// MockICelestialStateMockRecorder is the mock recorder for MockICelestialState.
type MockICelestialStateMockRecorder struct {
	mock *MockICelestialState
}

// NewMockICelestialState creates a new mock instance.
func NewMockICelestialState(ctrl *gomock.Controller) *MockICelestialState {
	mock := &MockICelestialState{ctrl: ctrl}
	mock.recorder = &MockICelestialStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICelestialState) EXPECT() *MockICelestialStateMockRecorder {
	return m.recorder
}

// ByName mocks base method.
func (m *MockICelestialState) ByName(ctx context.Context, name string) (storage.CelestialState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByName", ctx, name)
	ret0, _ := ret[0].(storage.CelestialState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByName indicates an expected call of ByName.
func (mr *MockICelestialStateMockRecorder) ByName(ctx, name any) *MockICelestialStateByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByName", reflect.TypeOf((*MockICelestialState)(nil).ByName), ctx, name)
	return &MockICelestialStateByNameCall{Call: call}
}

// MockICelestialStateByNameCall wrap *gomock.Call
type MockICelestialStateByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockICelestialStateByNameCall) Return(arg0 storage.CelestialState, arg1 error) *MockICelestialStateByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockICelestialStateByNameCall) Do(f func(context.Context, string) (storage.CelestialState, error)) *MockICelestialStateByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockICelestialStateByNameCall) DoAndReturn(f func(context.Context, string) (storage.CelestialState, error)) *MockICelestialStateByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m *MockICelestialState) Save(ctx context.Context, state *storage.CelestialState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockICelestialStateMockRecorder) Save(ctx, state any) *MockICelestialStateSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockICelestialState)(nil).Save), ctx, state)
	return &MockICelestialStateSaveCall{Call: call}
}

// MockICelestialStateSaveCall wrap *gomock.Call
type MockICelestialStateSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockICelestialStateSaveCall) Return(arg0 error) *MockICelestialStateSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockICelestialStateSaveCall) Do(f func(context.Context, *storage.CelestialState) error) *MockICelestialStateSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockICelestialStateSaveCall) DoAndReturn(f func(context.Context, *storage.CelestialState) error) *MockICelestialStateSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
