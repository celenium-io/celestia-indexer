// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: undelegation.go
//
// Generated by this command:
//
//	mockgen -source=undelegation.go -destination=mock/undelegation.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIUndelegation is a mock of IUndelegation interface.
type MockIUndelegation struct {
	ctrl     *gomock.Controller
	recorder *MockIUndelegationMockRecorder
}

// MockIUndelegationMockRecorder is the mock recorder for MockIUndelegation.
type MockIUndelegationMockRecorder struct {
	mock *MockIUndelegation
}

// NewMockIUndelegation creates a new mock instance.
func NewMockIUndelegation(ctrl *gomock.Controller) *MockIUndelegation {
	mock := &MockIUndelegation{ctrl: ctrl}
	mock.recorder = &MockIUndelegationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUndelegation) EXPECT() *MockIUndelegationMockRecorder {
	return m.recorder
}

// ByAddress mocks base method.
func (m *MockIUndelegation) ByAddress(ctx context.Context, addressId uint64, limit, offset int) ([]storage.Undelegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByAddress", ctx, addressId, limit, offset)
	ret0, _ := ret[0].([]storage.Undelegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByAddress indicates an expected call of ByAddress.
func (mr *MockIUndelegationMockRecorder) ByAddress(ctx, addressId, limit, offset any) *IUndelegationByAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByAddress", reflect.TypeOf((*MockIUndelegation)(nil).ByAddress), ctx, addressId, limit, offset)
	return &IUndelegationByAddressCall{Call: call}
}

// IUndelegationByAddressCall wrap *gomock.Call
type IUndelegationByAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IUndelegationByAddressCall) Return(arg0 []storage.Undelegation, arg1 error) *IUndelegationByAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IUndelegationByAddressCall) Do(f func(context.Context, uint64, int, int) ([]storage.Undelegation, error)) *IUndelegationByAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IUndelegationByAddressCall) DoAndReturn(f func(context.Context, uint64, int, int) ([]storage.Undelegation, error)) *IUndelegationByAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CursorList mocks base method.
func (m *MockIUndelegation) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Undelegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Undelegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIUndelegationMockRecorder) CursorList(ctx, id, limit, order, cmp any) *IUndelegationCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIUndelegation)(nil).CursorList), ctx, id, limit, order, cmp)
	return &IUndelegationCursorListCall{Call: call}
}

// IUndelegationCursorListCall wrap *gomock.Call
type IUndelegationCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IUndelegationCursorListCall) Return(arg0 []*storage.Undelegation, arg1 error) *IUndelegationCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IUndelegationCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Undelegation, error)) *IUndelegationCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IUndelegationCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Undelegation, error)) *IUndelegationCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIUndelegation) GetByID(ctx context.Context, id uint64) (*storage.Undelegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Undelegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIUndelegationMockRecorder) GetByID(ctx, id any) *IUndelegationGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIUndelegation)(nil).GetByID), ctx, id)
	return &IUndelegationGetByIDCall{Call: call}
}

// IUndelegationGetByIDCall wrap *gomock.Call
type IUndelegationGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IUndelegationGetByIDCall) Return(arg0 *storage.Undelegation, arg1 error) *IUndelegationGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IUndelegationGetByIDCall) Do(f func(context.Context, uint64) (*storage.Undelegation, error)) *IUndelegationGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IUndelegationGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Undelegation, error)) *IUndelegationGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIUndelegation) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIUndelegationMockRecorder) IsNoRows(err any) *IUndelegationIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIUndelegation)(nil).IsNoRows), err)
	return &IUndelegationIsNoRowsCall{Call: call}
}

// IUndelegationIsNoRowsCall wrap *gomock.Call
type IUndelegationIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IUndelegationIsNoRowsCall) Return(arg0 bool) *IUndelegationIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IUndelegationIsNoRowsCall) Do(f func(error) bool) *IUndelegationIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IUndelegationIsNoRowsCall) DoAndReturn(f func(error) bool) *IUndelegationIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIUndelegation) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIUndelegationMockRecorder) LastID(ctx any) *IUndelegationLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIUndelegation)(nil).LastID), ctx)
	return &IUndelegationLastIDCall{Call: call}
}

// IUndelegationLastIDCall wrap *gomock.Call
type IUndelegationLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IUndelegationLastIDCall) Return(arg0 uint64, arg1 error) *IUndelegationLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IUndelegationLastIDCall) Do(f func(context.Context) (uint64, error)) *IUndelegationLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IUndelegationLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *IUndelegationLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIUndelegation) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Undelegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Undelegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIUndelegationMockRecorder) List(ctx, limit, offset, order any) *IUndelegationListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIUndelegation)(nil).List), ctx, limit, offset, order)
	return &IUndelegationListCall{Call: call}
}

// IUndelegationListCall wrap *gomock.Call
type IUndelegationListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IUndelegationListCall) Return(arg0 []*storage.Undelegation, arg1 error) *IUndelegationListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IUndelegationListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Undelegation, error)) *IUndelegationListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IUndelegationListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Undelegation, error)) *IUndelegationListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIUndelegation) Save(ctx context.Context, m *storage.Undelegation) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIUndelegationMockRecorder) Save(ctx, m any) *IUndelegationSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIUndelegation)(nil).Save), ctx, m)
	return &IUndelegationSaveCall{Call: call}
}

// IUndelegationSaveCall wrap *gomock.Call
type IUndelegationSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IUndelegationSaveCall) Return(arg0 error) *IUndelegationSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IUndelegationSaveCall) Do(f func(context.Context, *storage.Undelegation) error) *IUndelegationSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IUndelegationSaveCall) DoAndReturn(f func(context.Context, *storage.Undelegation) error) *IUndelegationSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIUndelegation) Update(ctx context.Context, m *storage.Undelegation) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUndelegationMockRecorder) Update(ctx, m any) *IUndelegationUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUndelegation)(nil).Update), ctx, m)
	return &IUndelegationUpdateCall{Call: call}
}

// IUndelegationUpdateCall wrap *gomock.Call
type IUndelegationUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IUndelegationUpdateCall) Return(arg0 error) *IUndelegationUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IUndelegationUpdateCall) Do(f func(context.Context, *storage.Undelegation) error) *IUndelegationUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IUndelegationUpdateCall) DoAndReturn(f func(context.Context, *storage.Undelegation) error) *IUndelegationUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
