// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: ibc_client.go
//
// Generated by this command:
//
//	mockgen -source=ibc_client.go -destination=mock/ibc_client.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIIbcClient is a mock of IIbcClient interface.
type MockIIbcClient struct {
	ctrl     *gomock.Controller
	recorder *MockIIbcClientMockRecorder
}

// MockIIbcClientMockRecorder is the mock recorder for MockIIbcClient.
type MockIIbcClientMockRecorder struct {
	mock *MockIIbcClient
}

// NewMockIIbcClient creates a new mock instance.
func NewMockIIbcClient(ctrl *gomock.Controller) *MockIIbcClient {
	mock := &MockIIbcClient{ctrl: ctrl}
	mock.recorder = &MockIIbcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIbcClient) EXPECT() *MockIIbcClientMockRecorder {
	return m.recorder
}

// ById mocks base method.
func (m *MockIIbcClient) ById(ctx context.Context, id string) (storage.IbcClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ById", ctx, id)
	ret0, _ := ret[0].(storage.IbcClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ById indicates an expected call of ById.
func (mr *MockIIbcClientMockRecorder) ById(ctx, id any) *MockIIbcClientByIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ById", reflect.TypeOf((*MockIIbcClient)(nil).ById), ctx, id)
	return &MockIIbcClientByIdCall{Call: call}
}

// MockIIbcClientByIdCall wrap *gomock.Call
type MockIIbcClientByIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIIbcClientByIdCall) Return(arg0 storage.IbcClient, arg1 error) *MockIIbcClientByIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIIbcClientByIdCall) Do(f func(context.Context, string) (storage.IbcClient, error)) *MockIIbcClientByIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIIbcClientByIdCall) DoAndReturn(f func(context.Context, string) (storage.IbcClient, error)) *MockIIbcClientByIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIIbcClient) List(ctx context.Context, limit, offset int, sort storage0.SortOrder) ([]storage.IbcClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, sort)
	ret0, _ := ret[0].([]storage.IbcClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIIbcClientMockRecorder) List(ctx, limit, offset, sort any) *MockIIbcClientListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIIbcClient)(nil).List), ctx, limit, offset, sort)
	return &MockIIbcClientListCall{Call: call}
}

// MockIIbcClientListCall wrap *gomock.Call
type MockIIbcClientListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIIbcClientListCall) Return(arg0 []storage.IbcClient, arg1 error) *MockIIbcClientListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIIbcClientListCall) Do(f func(context.Context, int, int, storage0.SortOrder) ([]storage.IbcClient, error)) *MockIIbcClientListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIIbcClientListCall) DoAndReturn(f func(context.Context, int, int, storage0.SortOrder) ([]storage.IbcClient, error)) *MockIIbcClientListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
