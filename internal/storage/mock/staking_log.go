// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: staking_log.go
//
// Generated by this command:
//
//	mockgen -source=staking_log.go -destination=mock/staking_log.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIStakingLog is a mock of IStakingLog interface.
type MockIStakingLog struct {
	ctrl     *gomock.Controller
	recorder *MockIStakingLogMockRecorder
}

// MockIStakingLogMockRecorder is the mock recorder for MockIStakingLog.
type MockIStakingLogMockRecorder struct {
	mock *MockIStakingLog
}

// NewMockIStakingLog creates a new mock instance.
func NewMockIStakingLog(ctrl *gomock.Controller) *MockIStakingLog {
	mock := &MockIStakingLog{ctrl: ctrl}
	mock.recorder = &MockIStakingLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStakingLog) EXPECT() *MockIStakingLogMockRecorder {
	return m.recorder
}

// CursorList mocks base method.
func (m *MockIStakingLog) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.StakingLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.StakingLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIStakingLogMockRecorder) CursorList(ctx, id, limit, order, cmp any) *MockIStakingLogCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIStakingLog)(nil).CursorList), ctx, id, limit, order, cmp)
	return &MockIStakingLogCursorListCall{Call: call}
}

// MockIStakingLogCursorListCall wrap *gomock.Call
type MockIStakingLogCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIStakingLogCursorListCall) Return(arg0 []*storage.StakingLog, arg1 error) *MockIStakingLogCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIStakingLogCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.StakingLog, error)) *MockIStakingLogCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIStakingLogCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.StakingLog, error)) *MockIStakingLogCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIStakingLog) GetByID(ctx context.Context, id uint64) (*storage.StakingLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.StakingLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIStakingLogMockRecorder) GetByID(ctx, id any) *MockIStakingLogGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIStakingLog)(nil).GetByID), ctx, id)
	return &MockIStakingLogGetByIDCall{Call: call}
}

// MockIStakingLogGetByIDCall wrap *gomock.Call
type MockIStakingLogGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIStakingLogGetByIDCall) Return(arg0 *storage.StakingLog, arg1 error) *MockIStakingLogGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIStakingLogGetByIDCall) Do(f func(context.Context, uint64) (*storage.StakingLog, error)) *MockIStakingLogGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIStakingLogGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.StakingLog, error)) *MockIStakingLogGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIStakingLog) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIStakingLogMockRecorder) IsNoRows(err any) *MockIStakingLogIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIStakingLog)(nil).IsNoRows), err)
	return &MockIStakingLogIsNoRowsCall{Call: call}
}

// MockIStakingLogIsNoRowsCall wrap *gomock.Call
type MockIStakingLogIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIStakingLogIsNoRowsCall) Return(arg0 bool) *MockIStakingLogIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIStakingLogIsNoRowsCall) Do(f func(error) bool) *MockIStakingLogIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIStakingLogIsNoRowsCall) DoAndReturn(f func(error) bool) *MockIStakingLogIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIStakingLog) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIStakingLogMockRecorder) LastID(ctx any) *MockIStakingLogLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIStakingLog)(nil).LastID), ctx)
	return &MockIStakingLogLastIDCall{Call: call}
}

// MockIStakingLogLastIDCall wrap *gomock.Call
type MockIStakingLogLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIStakingLogLastIDCall) Return(arg0 uint64, arg1 error) *MockIStakingLogLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIStakingLogLastIDCall) Do(f func(context.Context) (uint64, error)) *MockIStakingLogLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIStakingLogLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *MockIStakingLogLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIStakingLog) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.StakingLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.StakingLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIStakingLogMockRecorder) List(ctx, limit, offset, order any) *MockIStakingLogListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIStakingLog)(nil).List), ctx, limit, offset, order)
	return &MockIStakingLogListCall{Call: call}
}

// MockIStakingLogListCall wrap *gomock.Call
type MockIStakingLogListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIStakingLogListCall) Return(arg0 []*storage.StakingLog, arg1 error) *MockIStakingLogListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIStakingLogListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.StakingLog, error)) *MockIStakingLogListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIStakingLogListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.StakingLog, error)) *MockIStakingLogListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIStakingLog) Save(ctx context.Context, m *storage.StakingLog) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIStakingLogMockRecorder) Save(ctx, m any) *MockIStakingLogSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIStakingLog)(nil).Save), ctx, m)
	return &MockIStakingLogSaveCall{Call: call}
}

// MockIStakingLogSaveCall wrap *gomock.Call
type MockIStakingLogSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIStakingLogSaveCall) Return(arg0 error) *MockIStakingLogSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIStakingLogSaveCall) Do(f func(context.Context, *storage.StakingLog) error) *MockIStakingLogSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIStakingLogSaveCall) DoAndReturn(f func(context.Context, *storage.StakingLog) error) *MockIStakingLogSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIStakingLog) Update(ctx context.Context, m *storage.StakingLog) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIStakingLogMockRecorder) Update(ctx, m any) *MockIStakingLogUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIStakingLog)(nil).Update), ctx, m)
	return &MockIStakingLogUpdateCall{Call: call}
}

// MockIStakingLogUpdateCall wrap *gomock.Call
type MockIStakingLogUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIStakingLogUpdateCall) Return(arg0 error) *MockIStakingLogUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIStakingLogUpdateCall) Do(f func(context.Context, *storage.StakingLog) error) *MockIStakingLogUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIStakingLogUpdateCall) DoAndReturn(f func(context.Context, *storage.StakingLog) error) *MockIStakingLogUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
