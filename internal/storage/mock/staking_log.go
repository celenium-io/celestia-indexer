// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: staking_log.go
//
// Generated by this command:
//
//	mockgen -source=staking_log.go -destination=mock/staking_log.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestia-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIStakingLog is a mock of IStakingLog interface.
type MockIStakingLog struct {
	ctrl     *gomock.Controller
	recorder *MockIStakingLogMockRecorder
}

// MockIStakingLogMockRecorder is the mock recorder for MockIStakingLog.
type MockIStakingLogMockRecorder struct {
	mock *MockIStakingLog
}

// NewMockIStakingLog creates a new mock instance.
func NewMockIStakingLog(ctrl *gomock.Controller) *MockIStakingLog {
	mock := &MockIStakingLog{ctrl: ctrl}
	mock.recorder = &MockIStakingLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStakingLog) EXPECT() *MockIStakingLogMockRecorder {
	return m.recorder
}

// ByValidator mocks base method.
func (m *MockIStakingLog) ByValidator(ctx context.Context, validatorId uint64, limit, offset int) ([]storage.StakingLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByValidator", ctx, validatorId, limit, offset)
	ret0, _ := ret[0].([]storage.StakingLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByValidator indicates an expected call of ByValidator.
func (mr *MockIStakingLogMockRecorder) ByValidator(ctx, validatorId, limit, offset any) *IStakingLogByValidatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByValidator", reflect.TypeOf((*MockIStakingLog)(nil).ByValidator), ctx, validatorId, limit, offset)
	return &IStakingLogByValidatorCall{Call: call}
}

// IStakingLogByValidatorCall wrap *gomock.Call
type IStakingLogByValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IStakingLogByValidatorCall) Return(arg0 []storage.StakingLog, arg1 error) *IStakingLogByValidatorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IStakingLogByValidatorCall) Do(f func(context.Context, uint64, int, int) ([]storage.StakingLog, error)) *IStakingLogByValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IStakingLogByValidatorCall) DoAndReturn(f func(context.Context, uint64, int, int) ([]storage.StakingLog, error)) *IStakingLogByValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CursorList mocks base method.
func (m *MockIStakingLog) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.StakingLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.StakingLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIStakingLogMockRecorder) CursorList(ctx, id, limit, order, cmp any) *IStakingLogCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIStakingLog)(nil).CursorList), ctx, id, limit, order, cmp)
	return &IStakingLogCursorListCall{Call: call}
}

// IStakingLogCursorListCall wrap *gomock.Call
type IStakingLogCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IStakingLogCursorListCall) Return(arg0 []*storage.StakingLog, arg1 error) *IStakingLogCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IStakingLogCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.StakingLog, error)) *IStakingLogCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IStakingLogCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.StakingLog, error)) *IStakingLogCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIStakingLog) GetByID(ctx context.Context, id uint64) (*storage.StakingLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.StakingLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIStakingLogMockRecorder) GetByID(ctx, id any) *IStakingLogGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIStakingLog)(nil).GetByID), ctx, id)
	return &IStakingLogGetByIDCall{Call: call}
}

// IStakingLogGetByIDCall wrap *gomock.Call
type IStakingLogGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IStakingLogGetByIDCall) Return(arg0 *storage.StakingLog, arg1 error) *IStakingLogGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IStakingLogGetByIDCall) Do(f func(context.Context, uint64) (*storage.StakingLog, error)) *IStakingLogGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IStakingLogGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.StakingLog, error)) *IStakingLogGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIStakingLog) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIStakingLogMockRecorder) IsNoRows(err any) *IStakingLogIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIStakingLog)(nil).IsNoRows), err)
	return &IStakingLogIsNoRowsCall{Call: call}
}

// IStakingLogIsNoRowsCall wrap *gomock.Call
type IStakingLogIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IStakingLogIsNoRowsCall) Return(arg0 bool) *IStakingLogIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IStakingLogIsNoRowsCall) Do(f func(error) bool) *IStakingLogIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IStakingLogIsNoRowsCall) DoAndReturn(f func(error) bool) *IStakingLogIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIStakingLog) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIStakingLogMockRecorder) LastID(ctx any) *IStakingLogLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIStakingLog)(nil).LastID), ctx)
	return &IStakingLogLastIDCall{Call: call}
}

// IStakingLogLastIDCall wrap *gomock.Call
type IStakingLogLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IStakingLogLastIDCall) Return(arg0 uint64, arg1 error) *IStakingLogLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IStakingLogLastIDCall) Do(f func(context.Context) (uint64, error)) *IStakingLogLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IStakingLogLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *IStakingLogLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIStakingLog) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.StakingLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.StakingLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIStakingLogMockRecorder) List(ctx, limit, offset, order any) *IStakingLogListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIStakingLog)(nil).List), ctx, limit, offset, order)
	return &IStakingLogListCall{Call: call}
}

// IStakingLogListCall wrap *gomock.Call
type IStakingLogListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IStakingLogListCall) Return(arg0 []*storage.StakingLog, arg1 error) *IStakingLogListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IStakingLogListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.StakingLog, error)) *IStakingLogListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IStakingLogListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.StakingLog, error)) *IStakingLogListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIStakingLog) Save(ctx context.Context, m *storage.StakingLog) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIStakingLogMockRecorder) Save(ctx, m any) *IStakingLogSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIStakingLog)(nil).Save), ctx, m)
	return &IStakingLogSaveCall{Call: call}
}

// IStakingLogSaveCall wrap *gomock.Call
type IStakingLogSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IStakingLogSaveCall) Return(arg0 error) *IStakingLogSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IStakingLogSaveCall) Do(f func(context.Context, *storage.StakingLog) error) *IStakingLogSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IStakingLogSaveCall) DoAndReturn(f func(context.Context, *storage.StakingLog) error) *IStakingLogSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIStakingLog) Update(ctx context.Context, m *storage.StakingLog) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIStakingLogMockRecorder) Update(ctx, m any) *IStakingLogUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIStakingLog)(nil).Update), ctx, m)
	return &IStakingLogUpdateCall{Call: call}
}

// IStakingLogUpdateCall wrap *gomock.Call
type IStakingLogUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IStakingLogUpdateCall) Return(arg0 error) *IStakingLogUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IStakingLogUpdateCall) Do(f func(context.Context, *storage.StakingLog) error) *IStakingLogUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IStakingLogUpdateCall) DoAndReturn(f func(context.Context, *storage.StakingLog) error) *IStakingLogUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
