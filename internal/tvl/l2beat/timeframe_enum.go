// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.7
// Revision: bf63e108589bbd2327b13ec2c5da532aad234029
// Build Date: 2023-07-25T23:27:55Z
// Built By: goreleaser

package l2beat

import (
	"fmt"
	"strings"
)

const (
	// TvlTimeframe7D is a TvlTimeframe of type 7d.
	TvlTimeframe7D TvlTimeframe = "7d"
	// TvlTimeframe30D is a TvlTimeframe of type 30d.
	TvlTimeframe30D TvlTimeframe = "30d"
	// TvlTimeframe90D is a TvlTimeframe of type 90d.
	TvlTimeframe90D TvlTimeframe = "90d"
	// TvlTimeframe180D is a TvlTimeframe of type 180d.
	TvlTimeframe180D TvlTimeframe = "180d"
	// TvlTimeframe1Y is a TvlTimeframe of type 1y.
	TvlTimeframe1Y TvlTimeframe = "1y"
	// TvlTimeframeMax is a TvlTimeframe of type max.
	TvlTimeframeMax TvlTimeframe = "max"
)

var ErrInvalidTvlTimeframe = fmt.Errorf("not a valid TvlTimeframe, try [%s]", strings.Join(_TvlTimeframeNames, ", "))

var _TvlTimeframeNames = []string{
	string(TvlTimeframe7D),
	string(TvlTimeframe30D),
	string(TvlTimeframe90D),
	string(TvlTimeframe180D),
	string(TvlTimeframe1Y),
	string(TvlTimeframeMax),
}

// TvlTimeframeNames returns a list of possible string values of TvlTimeframe.
func TvlTimeframeNames() []string {
	tmp := make([]string, len(_TvlTimeframeNames))
	copy(tmp, _TvlTimeframeNames)
	return tmp
}

// TvlTimeframeValues returns a list of the values for TvlTimeframe
func TvlTimeframeValues() []TvlTimeframe {
	return []TvlTimeframe{
		TvlTimeframe7D,
		TvlTimeframe30D,
		TvlTimeframe90D,
		TvlTimeframe180D,
		TvlTimeframe1Y,
		TvlTimeframeMax,
	}
}

// String implements the Stringer interface.
func (x TvlTimeframe) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TvlTimeframe) IsValid() bool {
	_, err := ParseTvlTimeframe(string(x))
	return err == nil
}

var _TvlTimeframeValue = map[string]TvlTimeframe{
	"7d":   TvlTimeframe7D,
	"30d":  TvlTimeframe30D,
	"90d":  TvlTimeframe90D,
	"180d": TvlTimeframe180D,
	"1y":   TvlTimeframe1Y,
	"max":  TvlTimeframeMax,
}

// ParseTvlTimeframe attempts to convert a string to a TvlTimeframe.
func ParseTvlTimeframe(name string) (TvlTimeframe, error) {
	if x, ok := _TvlTimeframeValue[name]; ok {
		return x, nil
	}
	return TvlTimeframe(""), fmt.Errorf("%s is %w", name, ErrInvalidTvlTimeframe)
}

// MarshalText implements the text marshaller method.
func (x TvlTimeframe) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *TvlTimeframe) UnmarshalText(text []byte) error {
	tmp, err := ParseTvlTimeframe(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
