// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -source=api.go -destination=mock/api.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "github.com/celenium-io/celestia-indexer/pkg/node/types"
	types0 "github.com/celenium-io/celestia-indexer/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockApi is a mock of Api interface.
type MockApi struct {
	ctrl     *gomock.Controller
	recorder *MockApiMockRecorder
	isgomock struct{}
}

// MockApiMockRecorder is the mock recorder for MockApi.
type MockApiMockRecorder struct {
	mock *MockApi
}

// NewMockApi creates a new mock instance.
func NewMockApi(ctrl *gomock.Controller) *MockApi {
	mock := &MockApi{ctrl: ctrl}
	mock.recorder = &MockApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApi) EXPECT() *MockApiMockRecorder {
	return m.recorder
}

// Block mocks base method.
func (m *MockApi) Block(ctx context.Context, level types0.Level) (types0.ResultBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", ctx, level)
	ret0, _ := ret[0].(types0.ResultBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block.
func (mr *MockApiMockRecorder) Block(ctx, level any) *MockApiBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockApi)(nil).Block), ctx, level)
	return &MockApiBlockCall{Call: call}
}

// MockApiBlockCall wrap *gomock.Call
type MockApiBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApiBlockCall) Return(arg0 types0.ResultBlock, arg1 error) *MockApiBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApiBlockCall) Do(f func(context.Context, types0.Level) (types0.ResultBlock, error)) *MockApiBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApiBlockCall) DoAndReturn(f func(context.Context, types0.Level) (types0.ResultBlock, error)) *MockApiBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BlockData mocks base method.
func (m *MockApi) BlockData(ctx context.Context, level types0.Level) (types0.BlockData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockData", ctx, level)
	ret0, _ := ret[0].(types0.BlockData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockData indicates an expected call of BlockData.
func (mr *MockApiMockRecorder) BlockData(ctx, level any) *MockApiBlockDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockData", reflect.TypeOf((*MockApi)(nil).BlockData), ctx, level)
	return &MockApiBlockDataCall{Call: call}
}

// MockApiBlockDataCall wrap *gomock.Call
type MockApiBlockDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApiBlockDataCall) Return(arg0 types0.BlockData, arg1 error) *MockApiBlockDataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApiBlockDataCall) Do(f func(context.Context, types0.Level) (types0.BlockData, error)) *MockApiBlockDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApiBlockDataCall) DoAndReturn(f func(context.Context, types0.Level) (types0.BlockData, error)) *MockApiBlockDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BlockDataGet mocks base method.
func (m *MockApi) BlockDataGet(ctx context.Context, level types0.Level) (types0.BlockData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockDataGet", ctx, level)
	ret0, _ := ret[0].(types0.BlockData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockDataGet indicates an expected call of BlockDataGet.
func (mr *MockApiMockRecorder) BlockDataGet(ctx, level any) *MockApiBlockDataGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockDataGet", reflect.TypeOf((*MockApi)(nil).BlockDataGet), ctx, level)
	return &MockApiBlockDataGetCall{Call: call}
}

// MockApiBlockDataGetCall wrap *gomock.Call
type MockApiBlockDataGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApiBlockDataGetCall) Return(arg0 types0.BlockData, arg1 error) *MockApiBlockDataGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApiBlockDataGetCall) Do(f func(context.Context, types0.Level) (types0.BlockData, error)) *MockApiBlockDataGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApiBlockDataGetCall) DoAndReturn(f func(context.Context, types0.Level) (types0.BlockData, error)) *MockApiBlockDataGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BlockResults mocks base method.
func (m *MockApi) BlockResults(ctx context.Context, level types0.Level) (types0.ResultBlockResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockResults", ctx, level)
	ret0, _ := ret[0].(types0.ResultBlockResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockResults indicates an expected call of BlockResults.
func (mr *MockApiMockRecorder) BlockResults(ctx, level any) *MockApiBlockResultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockResults", reflect.TypeOf((*MockApi)(nil).BlockResults), ctx, level)
	return &MockApiBlockResultsCall{Call: call}
}

// MockApiBlockResultsCall wrap *gomock.Call
type MockApiBlockResultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApiBlockResultsCall) Return(arg0 types0.ResultBlockResults, arg1 error) *MockApiBlockResultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApiBlockResultsCall) Do(f func(context.Context, types0.Level) (types0.ResultBlockResults, error)) *MockApiBlockResultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApiBlockResultsCall) DoAndReturn(f func(context.Context, types0.Level) (types0.ResultBlockResults, error)) *MockApiBlockResultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Genesis mocks base method.
func (m *MockApi) Genesis(ctx context.Context) (types.Genesis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Genesis", ctx)
	ret0, _ := ret[0].(types.Genesis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Genesis indicates an expected call of Genesis.
func (mr *MockApiMockRecorder) Genesis(ctx any) *MockApiGenesisCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Genesis", reflect.TypeOf((*MockApi)(nil).Genesis), ctx)
	return &MockApiGenesisCall{Call: call}
}

// MockApiGenesisCall wrap *gomock.Call
type MockApiGenesisCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApiGenesisCall) Return(arg0 types.Genesis, arg1 error) *MockApiGenesisCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApiGenesisCall) Do(f func(context.Context) (types.Genesis, error)) *MockApiGenesisCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApiGenesisCall) DoAndReturn(f func(context.Context) (types.Genesis, error)) *MockApiGenesisCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Head mocks base method.
func (m *MockApi) Head(ctx context.Context) (types0.ResultBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", ctx)
	ret0, _ := ret[0].(types0.ResultBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockApiMockRecorder) Head(ctx any) *MockApiHeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockApi)(nil).Head), ctx)
	return &MockApiHeadCall{Call: call}
}

// MockApiHeadCall wrap *gomock.Call
type MockApiHeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApiHeadCall) Return(arg0 types0.ResultBlock, arg1 error) *MockApiHeadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApiHeadCall) Do(f func(context.Context) (types0.ResultBlock, error)) *MockApiHeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApiHeadCall) DoAndReturn(f func(context.Context) (types0.ResultBlock, error)) *MockApiHeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockApi) Status(ctx context.Context) (types.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx)
	ret0, _ := ret[0].(types.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockApiMockRecorder) Status(ctx any) *MockApiStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockApi)(nil).Status), ctx)
	return &MockApiStatusCall{Call: call}
}

// MockApiStatusCall wrap *gomock.Call
type MockApiStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApiStatusCall) Return(arg0 types.Status, arg1 error) *MockApiStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApiStatusCall) Do(f func(context.Context) (types.Status, error)) *MockApiStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApiStatusCall) DoAndReturn(f func(context.Context) (types.Status, error)) *MockApiStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDalApi is a mock of DalApi interface.
type MockDalApi struct {
	ctrl     *gomock.Controller
	recorder *MockDalApiMockRecorder
	isgomock struct{}
}

// MockDalApiMockRecorder is the mock recorder for MockDalApi.
type MockDalApiMockRecorder struct {
	mock *MockDalApi
}

// NewMockDalApi creates a new mock instance.
func NewMockDalApi(ctrl *gomock.Controller) *MockDalApi {
	mock := &MockDalApi{ctrl: ctrl}
	mock.recorder = &MockDalApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDalApi) EXPECT() *MockDalApiMockRecorder {
	return m.recorder
}

// Blob mocks base method.
func (m *MockDalApi) Blob(ctx context.Context, height types0.Level, namespace, commitment string) (types.Blob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blob", ctx, height, namespace, commitment)
	ret0, _ := ret[0].(types.Blob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Blob indicates an expected call of Blob.
func (mr *MockDalApiMockRecorder) Blob(ctx, height, namespace, commitment any) *MockDalApiBlobCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blob", reflect.TypeOf((*MockDalApi)(nil).Blob), ctx, height, namespace, commitment)
	return &MockDalApiBlobCall{Call: call}
}

// MockDalApiBlobCall wrap *gomock.Call
type MockDalApiBlobCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDalApiBlobCall) Return(arg0 types.Blob, arg1 error) *MockDalApiBlobCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDalApiBlobCall) Do(f func(context.Context, types0.Level, string, string) (types.Blob, error)) *MockDalApiBlobCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDalApiBlobCall) DoAndReturn(f func(context.Context, types0.Level, string, string) (types.Blob, error)) *MockDalApiBlobCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Blobs mocks base method.
func (m *MockDalApi) Blobs(ctx context.Context, height types0.Level, hash ...string) ([]types.Blob, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, height}
	for _, a := range hash {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Blobs", varargs...)
	ret0, _ := ret[0].([]types.Blob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Blobs indicates an expected call of Blobs.
func (mr *MockDalApiMockRecorder) Blobs(ctx, height any, hash ...any) *MockDalApiBlobsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, height}, hash...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blobs", reflect.TypeOf((*MockDalApi)(nil).Blobs), varargs...)
	return &MockDalApiBlobsCall{Call: call}
}

// MockDalApiBlobsCall wrap *gomock.Call
type MockDalApiBlobsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDalApiBlobsCall) Return(arg0 []types.Blob, arg1 error) *MockDalApiBlobsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDalApiBlobsCall) Do(f func(context.Context, types0.Level, ...string) ([]types.Blob, error)) *MockDalApiBlobsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDalApiBlobsCall) DoAndReturn(f func(context.Context, types0.Level, ...string) ([]types.Blob, error)) *MockDalApiBlobsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
